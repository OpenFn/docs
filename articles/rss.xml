<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>OpenFn Help Articles</title>
        <link>https://docs.openfn.org/articles</link>
        <description>OpenFn/docs Blog</description>
        <lastBuildDate>Mon, 19 Sep 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <copyright>Copyright © 2024 Open Function Group, LLC.</copyright>
        <item>
            <title><![CDATA[Secure by design: a roadmap to secure authentication and authorization]]></title>
            <link>https://docs.openfn.org/articles/2022/09/19/auth-security</link>
            <guid>https://docs.openfn.org/articles/2022/09/19/auth-security</guid>
            <pubDate>Mon, 19 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[_In order to ensure that Global Goods and Digital Public Goods can enable impact]]></description>
            <content:encoded><![CDATA[<p><em>In order to ensure that Global Goods and Digital Public Goods can enable impact
without doing any harm, it is crucial that their authentication and
authorization systems are secure from the outset. </em></p><p>We’ve put together a resource to help other Digital Public Goods and Global
Goods achieve just this. You can view and comment on the resource
<a href="https://docs.google.com/document/d/1QvOcOdk2iZCWnAVNiBbmhh-6Q2gapUhsMCUzJQNWqEU/edit?usp=sharing" target="_blank" rel="noopener noreferrer">here</a>,
or read on to learn why.</p><p>Digital health technologies have a critical role to play in both improving the
delivery of health services <em>and</em> making health systems more robust and
adaptable. Whilst this has been the consensus for a while, various factors such
as bureaucracy, lack of capacity, authority/ownership, budget or simply lack of
prioritization have hindered the adoption and implementation of such
technologies.</p><p>However, the COVID-19 pandemic has brought digital health systems back to the
top of the agenda, having forced governments to adapt their health systems and
processes in a short amount of time and confronted them with the fragility and
inflexibility of some of their existing systems. This has led to an increase in
funding for both new and existing health technologies.</p><p>At the same time, the recent pandemic also saw an increase in data breaches and
data leaks in the healthcare sector. Whilst these are a serious matter in any
system, the nature of the healthcare technologies means that the data they are
storing or managing almost always includes Personally Identifiable Information
(PII) which, if leaked, can have dramatic consequences for those they identify.</p><p>The higher the number of technologies and quantity of data stored in these, the
higher the risk of vulnerabilities and negative impact of a data breach or data
leak. If Global Goods are to make the most of this renewed interest and increase
in funding for digital health technologies, it is crucial for them to keep
security as a top priority to ensure that they ‘do no harm’, a
core<a href="https://digitalpublicgoods.net/standard/" target="_blank" rel="noopener noreferrer"> Digital Public Good</a> principle.</p><p>Several organizations have already put some thought into documenting security
best practices and standards. However, none situate these security decisions
within the wider context of a product development timeline or roadmap. This
requires individuals to regularly scan through long lists of security
recommendations to pick out and prioritize their implementation, increasing the
likelihood of an oversight or early-made product decisions which make it harder
to implement such security features down the line.</p><p>As product manager at Open Function Group, I myself have recently been reviewing
and analyzing numerous resources to identify and prioritize features required to
get to fully-secure authentication and authorization for our newest product
<a href="/documentation#openfn-v2-lightning-/">Lightning</a>–and make sure that nothing falls
through the cracks. I’ve also had the opportunity to gather insights from
Digital Public Good community forums (OpenMRS, DHIS2, OpenLMIS, etc) and speak
to other product managers and engineers from the Digital Public Goods community
to ask them about their learnings, and any tips they might have: Austin and
Morten from DHIS2, Dev and Biyeun from Dimagi.</p><p><strong>To more widely share these learnings, we have drafted this resource
documenting the specific security measures that should be considered at each
stage of product development <em>specifically with regards to authentication and
authorization. </em></strong>Our hope is that this article will help other product managers
in the Global Good (GG) and Digital Public Good (DPG) communities consider these
features into their backlog/roadmap from the outset and make sure they are
following a ‘secure by design’ approach. To inform our analysis, we analyzed
learnings from the wider DPG community, as well as recommendations from other
security experts and international standards, including GovStack, OpenHIE,
OWASP, NIST, and more.</p><p><strong>The resource can be found
<a href="https://docs.google.com/document/d/1QvOcOdk2iZCWnAVNiBbmhh-6Q2gapUhsMCUzJQNWqEU/edit?usp=sharing" target="_blank" rel="noopener noreferrer">here</a>.</strong></p>]]></content:encoded>
            <category>security</category>
            <category>authentication</category>
            <category>authorization</category>
        </item>
        <item>
            <title><![CDATA[Workflow Automation; Why do it yourself when a program can do it for you?]]></title>
            <link>https://docs.openfn.org/articles/2022/06/07/workflow-automation</link>
            <guid>https://docs.openfn.org/articles/2022/06/07/workflow-automation</guid>
            <pubDate>Tue, 07 Jun 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Do you think twice when you get an automatic SMS notification because your]]></description>
            <content:encoded><![CDATA[<p>Do you think twice when you get an automatic SMS notification because your
prescription is ready? (Neither do I.) This seamless experience is driven by
“workflow automation”, a key feature that OpenFn provides. The OpenFn
Integration Toolkit is a Digital Public Good (DPG) used by governments and NGOs
to boost efficiency through workflow automation. The automation that OpenFn
provides includes automatically sending SMSs, automating stock updates across
supply chain systems, tracking clinical visits, and helping plan vaccine
rollouts. We support our partners’ work by lifting the burden of manual data
transfers between platforms.</p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_S0QG"><p>This article
<a href="https://www.linkedin.com/pulse/workflow-automation-why-do-yourself-when-program-can-you-openfn/?trackingId=TnWiYNtf5QP4GfAj6R4meQ%3D%3D" target="_blank" rel="noopener noreferrer">originally appeared</a>
as a LinkedIn article from Open Function Group.</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-workflow-automation">What is workflow automation?<a href="#what-is-workflow-automation" class="hash-link" aria-label="Direct link to What is workflow automation?" title="Direct link to What is workflow automation?">​</a></h2><p>Workflow automation is an approach to making the flow of tasks across platforms
run independently. A prescription SMS notification feels seamless, but it
probably requires complex automation across multiple systems like clinical
registries, pharmacy stock databases, and SMS gateways. Tools like OpenFn run
“behind the scenes” to perform calculations and transfer relevant data to/from
different systems autonomously, minimising the risk of human error and
ultimately saving time and money that an agency would spend on manual data
transfers. The goal is to preserve data integrity, uphold data security, and
enforce compliance with policies and data standards.</p><p>Since 2014, OpenFn has been at the forefront of workflow automation in the
social sector, providing a platform to help governments and NGOs focus on the
human aspect of their work rather than wasting time trying to exchange data
between systems or perform calculations manually.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="myagro">MyAgro<a href="#myagro" class="hash-link" aria-label="Direct link to MyAgro" title="Direct link to MyAgro">​</a></h3><p><a href="https://www.myagro.org/" target="_blank" rel="noopener noreferrer">MyAgro</a>, an NGO helping West African farmers increase
their yield, uses OpenFn to power its SMS-based savings deposit system for
small-scale farmers. MyAgro distributes and tracks saving vouchers using the
<a href="https://www.dimagi.com/commcare/" target="_blank" rel="noopener noreferrer">CommCare</a> app. Smallholder farmers purchase
pre-paid myAgro saving scratch cards and text the one-time code to secure the
voucher credit in their account. Once the amount has been added to their
balance, a confirmation notification is sent to the farmer. MyAgro works with
the farmers to reach their savings goal, which they then use to pay for seeds,
fertilisers, and training courses. OpenFn:</p><p align="center"><img loading="lazy" src="https://user-images.githubusercontent.com/105651463/172341045-62a3eebd-98fb-4189-987f-06bbdb03ac30.png" class="img_ev3q"></p><ol><li>Syncs voucher codes from CommCare to Salesforce so the relevant offices can
track who purchased the saving vouchers.</li><li>Matches incoming SMSs against the database of vouchers to deposit correct
funds into the individual account.</li><li>Allocates savings to farmers’ accounts in Salesforce and updates the account
status.</li><li>Sends a confirmation SMS with updated account balances to farmers, so they
are aware of their credit.</li></ol><p>OpenFn helps myAgro reach more farmers with less administrative overhead by
automating these key steps. MyAgro calculated that even at their 2014 levels of
scale, OpenFn saved them 260+ hours per year and increased customer confidence
as they worked to serve poor farmers.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sinapis">Sinapis<a href="#sinapis" class="hash-link" aria-label="Direct link to Sinapis" title="Direct link to Sinapis">​</a></h3><p><a href="https://sinapis.org/" target="_blank" rel="noopener noreferrer">Sinapis</a>, an NGO that empowers entrepreneurs through
training courses, uses OpenFn to automate its payment collection process. Every
time a client’s new
<a href="https://www.vodafone.com/about-vodafone/what-we-do/consumer-products-and-services/m-pesa/globalmerchants" target="_blank" rel="noopener noreferrer">M-Pesa</a>
payment is registered in <a href="https://kopokopo.co.ke/" target="_blank" rel="noopener noreferrer">Kopo Kopo</a>, OpenFn:</p><p align="center"><img loading="lazy" src="https://user-images.githubusercontent.com/105651463/172341175-5505b647-93dc-44af-9143-00ebdd0b5bae.png" class="img_ev3q"></p><ol><li>Automatically matches incoming payments with existing Sinapis accounts.</li><li>Logs new payments and updated payment status in Salesforce to track
entrepreneurs’ charges.</li><li>Updates account balances to help staff monitor outstanding balances and
overdue fees.</li></ol><p>With OpenFn handling the routine data processing, Sinapis has more time to
support its entrepreneurs. Precious staff time can be spent delivering training,
the essential face-to-face coaching that transforms their clients’ fledgling
enterprises. Their team does not have to worry about the accuracy of payments
and account balances; the OpenFn implementation replaces error-prone manual data
entry with a systematised, intelligible, fully automated process.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dial">DIAL<a href="#dial" class="hash-link" aria-label="Direct link to DIAL" title="Direct link to DIAL">​</a></h3><p>The <a href="https://digitalimpactalliance.org/" target="_blank" rel="noopener noreferrer">Digital Impact Alliance (DIAL)</a>, an
organisation that works to overcome digital development barriers, wanted to
prototype a “building-blocks based approach” for their upcoming GovStack.global
project. They configured an HR workflow solution that connects mobile data
collection apps, databases, and payment apps using OpenFn. Every time an
organisation registers new workers via
<a href="https://docs.opendatakit.org/collect-intro/" target="_blank" rel="noopener noreferrer">ODK Collect</a>, OpenFn:</p><p align="center"><img loading="lazy" src="https://user-images.githubusercontent.com/105651463/172341214-06a1e74b-c1e3-45e4-83c8-4a60af5a9d2d.png" class="img_ev3q"></p><ol><li>Automatically registers new employees in an <a href="https://www.ihris.org/" target="_blank" rel="noopener noreferrer">iHRIS</a>
database to oversee all new hires.</li><li>Makes payments to workers via
<a href="https://www.google.com/aclk?sa=l&amp;ai=DChcSEwicha-ltsnnAhUB1N4KHY8hDEoYABAAGgJ3Yg&amp;sig=AOD64_27g900G2RtoQsW0km9iT4Oq262ag&amp;q=&amp;ved=2ahUKEwj8wKeltsnnAhVSxYUKHVcrBbUQ0Qx6BAgMEAE&amp;adurl=" target="_blank" rel="noopener noreferrer">Mifos</a>,
ensuring all wage transfers are direct.</li></ol><p>While it’s not in use at scale, this prototype is a powerful illustration of how
automation enables scalable, component-based solutions to become more than the
sum of their parts. The processes that DIAL implement with OpenFn help unlock
the true potential of these powerful underlying DPGs.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-the-big-picture-here">What’s the big picture here?<a href="#whats-the-big-picture-here" class="hash-link" aria-label="Direct link to What’s the big picture here?" title="Direct link to What’s the big picture here?">​</a></h2><p>OpenFn’s goal is to increase the efficiency and effectiveness of the social
sector. Why should health and humanitarian organisations waste precious
resources manually moving data across systems when workflow automation can do it
more safely and quickly? We want to ensure employees focus on using data to do
their work, not transferring data between systems and running rote calculations.</p><p>Saving organisations time and money is part of the picture, but we also deliver
better program outcomes through efficiency and effectiveness. Suppose OpenFn
securely automates the complex digital processes critical health and
humanitarian interventions require. Reducing error rates and security
vulnerabilities and getting higher quality data into the hands of a doctor
faster actually saves lives. Responsible automation leads to better health and
humanitarian outcomes, enabling larger-scale intervention delivery via
efficiency gains and improving service quality by getting accurate data into the
hands of patients, clinicians, and policymakers when they need it.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="call-to-action">Call to Action<a href="#call-to-action" class="hash-link" aria-label="Direct link to Call to Action" title="Direct link to Call to Action">​</a></h2><p>Think about your own experiences; have you found yourself in a situation where
manual data processing—some rote, mindless task—has gotten in the way of doing
the more exciting parts of your job? Whether you are in the health and
humanitarian space or just want to make your life easier, OpenFn is here for
you. Our open-source toolkit is available for everyone to automate tasks such as
sending SMS and email notifications or automating data cleaning and formatting
for faster reporting.</p><p>Head to <a href="http://docs.openfn.org/" target="_blank" rel="noopener noreferrer">docs.openfn.org</a> to learn more about
enterprise-grade automations with our DPG and check out
<a href="http://community.openfn.org/" target="_blank" rel="noopener noreferrer">community.openfn.org</a> to connect and collaborate
with like-minded social-sector integrators and OpenFn staff. We hope to see you
soon!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="about-open-function-group">About Open Function Group<a href="#about-open-function-group" class="hash-link" aria-label="Direct link to About Open Function Group" title="Direct link to About Open Function Group">​</a></h2><p>Open Function Group (OFG) is a global team of integration specialists and
developers of the OpenFn Integration Toolkit. As a
<a href="https://digitalpublicgoods.net/" target="_blank" rel="noopener noreferrer">DPG</a>, OpenFn’s core technology is free and
open-source. If you want more information about the Toolkit or to sign up for a
free plan on our associated SaaS application, visit <a href="https://www.openfn.org/" target="_blank" rel="noopener noreferrer">https://www.openfn.org/</a>.</p>]]></content:encoded>
            <category>automation</category>
            <category>solution</category>
        </item>
        <item>
            <title><![CDATA[How learning JavaScript helps me better understand OpenFn jobs]]></title>
            <link>https://docs.openfn.org/articles/2021/10/29/how-learning-javascript-helped-me-better-understand-jobs</link>
            <guid>https://docs.openfn.org/articles/2021/10/29/how-learning-javascript-helped-me-better-understand-jobs</guid>
            <pubDate>Fri, 29 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[OpenFn automation happens via jobs which define]]></description>
            <content:encoded><![CDATA[<p>OpenFn automation happens via <a href="/documentation/build/workflows">jobs</a> which define
specific steps ("operations") that OpenFn should perform. They're written in a
<a href="https://www.openfn.org/core" target="_blank" rel="noopener noreferrer">scripting language</a> that runs on top of (and has
full access to) <strong>Javascript</strong>. A basic understanding of Javascript will take
your job writing on OpenFn to the next level. To improve my limited knowledge of
JavaScript, I have been taking Codecademy's
<a href="https://www.codecademy.com/learn/introduction-to-javascript" target="_blank" rel="noopener noreferrer">Introduction to JavaScript Course</a>.</p><p>In this post we'll discuss:</p><ol><li>Arrow functions</li><li>Falsy values</li><li>Other short-hand notation</li></ol><p>Keep reading for all the important learnings I have taken from just the first
four modules!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-that-little--arrow">What is that little <code>=&gt;</code> arrow?<a href="#what-is-that-little--arrow" class="hash-link" aria-label="Direct link to what-is-that-little--arrow" title="Direct link to what-is-that-little--arrow">​</a></h2><p>Javascript allows us to create <em>functions</em> which take <em>arguments</em> and <em>do stuff</em>
with them. Most times, function declaration in Javascript looks like this:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">getAge</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">dateString</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">dateString</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> today </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Date</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> birthDate </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Date</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">dateString</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">var</span><span class="token plain"> age </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> today</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getFullYear</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-</span><span class="token plain"> birthDate</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getFullYear</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">var</span><span class="token plain"> m </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> today</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getMonth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-</span><span class="token plain"> birthDate</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getMonth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">m </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">||</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">m </span><span class="token operator" style="color:rgb(137, 221, 255)">===</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;&amp;</span><span class="token plain"> today</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getDate</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain"> birthDate</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">getDate</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    age</span><span class="token operator" style="color:rgb(137, 221, 255)">--</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> age</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This was simple enough for me to follow. We are declaring a function,
<code>getAge()</code>, which has the steps to calculate a person's age and can be easily
reused throughout the job.</p><p>But other times, function writing looks like this:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">getAge</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">dateString</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">dateString</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// and so on...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In OpenFn, you're often writing unnamed functions that take <code>state</code> as their
only argument and you use them right away. See how concise writing and using a
function can be with the arrow:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token function" style="color:rgb(130, 170, 255)">upsert</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'tbl_study'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'study_id'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">study_id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token parameter">state</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">studyIDMap</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">formType</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>These <strong><code>arrow functions</code></strong> confused me when reading through jobs. I've learned
that, for the most part, they can be thought of as short-hand notation which
removes the need to type out <code>function</code> for every function declaration.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>MDN has a great explanation
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener noreferrer">here</a>.
Tl;dr: "An arrow function expression is a compact alternative to a traditional
function expression, but is limited and can't be used in all situations."</p></div></div><p>Further, we can make the code even more concise by also removing the
parenthesis, curly braces, and the return keyword when certain criteria are met.
In the code above, the parenthesis are omitted because there are no parameters,
and the curly braces and return keyword are omitted because the function body is
composed of a single-line block. As you can see, there are a variety of ways to
write functions and this course is helping me better recognize them. Some key
terminology here is: <code>function expression</code>, <code>arrow function</code>,
<code>concise function</code>, <code>anonymous function</code>, and <code>implicit returns</code>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="falsy-values">Falsy values<a href="#falsy-values" class="hash-link" aria-label="Direct link to Falsy values" title="Direct link to Falsy values">​</a></h2><p>During the <a href="/adaptors/salesforce#mapping-and-design-considerations">mapping</a>
phase of integration design, we often discuss how each answer choice for
<strong>picklist</strong> values should map from the source system to the destination system.
Sometimes the mapping is simple but other times, there is an extensive list of
possible choices that can be found in the
<a href="/documentation/get-started/terminology#message">message</a> and not all are
relevant to the destination system. Then the question is, <strong>how should the job
handle values which are not explicitly mapped?</strong></p><p>Sometimes we hear clients say to "ignore" those values. <strong>But what does it
really mean to "ignore" a value?</strong> Should we set it to <code>0</code>? An empty string? How
about <code>null</code>, <code>undefined</code> or <code>NaN</code>? In Javascript these are all <code>falsy</code> values.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>MDN is great for falsy values too! Check their explanation out
<a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy" target="_blank" rel="noopener noreferrer">here</a>.</p></div></div><p>Determining what is really meant here is important and the value selected has
different implications depending on the system.</p><p>Take this sample mapping for different districts in Conakry. The value left of
the colon is from the source system and the value to the right is for the
destination system.</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> districtMapping </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">Ratoma</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'RT'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">Kaloum</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'KL'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">Dixinn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'DX'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">Matam</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'MA'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">Matoto</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'MT'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">Other</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword nil" style="font-style:italic">undefined</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>If the destination system is Salesforce, this mapping would not upload "Other"
to Salesforce. However if "Other" mapped to an empty string instead, this would
upload the empty string to Salesforce. <strong>This distinction is especially
important in cases where we are overwriting existing data.</strong> For instance, if a
student previously lived in Ratoma and then moved to an unknown district marked
as "Other", <code>undefined</code> <em>would not</em> update the student's district in Salesforce
but the empty string would. Both of these are falsy values but have different
meanings in Salesforce.</p><p>How about if the message includes a value for a district that <em>is not</em> in the
mapping? Such as "New York". Should the job default to <code>undefined</code>? Or <code>null</code>?</p><p>These questions are just a few examples of how understanding <code>falsy</code> values in
Javascript can make it easier to implement the best mapping for the real-world
use case.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="short-circuit-evaluation-template-literals-and-all-the-short-hand-that-used-to-confuse-me">Short-circuit evaluation, template literals, and all the short hand that used to confuse me<a href="#short-circuit-evaluation-template-literals-and-all-the-short-hand-that-used-to-confuse-me" class="hash-link" aria-label="Direct link to Short-circuit evaluation, template literals, and all the short hand that used to confuse me" title="Direct link to Short-circuit evaluation, template literals, and all the short hand that used to confuse me">​</a></h2><p><strong>Short-circuit evaluation</strong></p><p>When we are syncing forms to a database, we sometimes expect different versions
of the same form with fields present one version but not the other. One way to
mitigate this discrepancy is by submitting a dummy value for the field whenever
it is missing in the message. I just learned the fastest way to add this code to
my jobs! For example, the code below will ensure that <code>household_id</code> always has
a value in the destination system: if <code>survey_info/household_id</code> is present in
the message this will be the assigned value, otherwise it will assign the dummy
value <code>state.data.body._id</code>.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token literal-property property">household_id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">body</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(195, 232, 141)">'survey_info/household_id'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">||</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">body</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">_id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>Template literals</strong></p><p>Like the arrow discussed above, the "dollar sign" was another symbol that often
confused me. But template literals are actually very straightforward. They
increase the readability of the code and make it easier to see what the
resulting string will be. Wrap your template in the backtick (<!-- -->`<!-- -->) symbols and
then each variable in <code>${}</code>.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> sign </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'$'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token console class-name" style="color:rgb(255, 203, 107)">console</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">log</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">The </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">sign</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(195, 232, 141)"> isn't so confusing!</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="higher-order-functions--iterators">Higher-order functions &amp; iterators<a href="#higher-order-functions--iterators" class="hash-link" aria-label="Direct link to Higher-order functions &amp; iterators" title="Direct link to Higher-order functions &amp; iterators">​</a></h2><p>The most challenging module in the course covered <strong>higher-order functions</strong>.
These are defined as <strong>functions that accept other functions as arguments and/or
return functions as output.</strong> But why are these important and how are they used
in OpenFn jobs? It turns out we use them quite alot! The code below is an
example from an existing integration with the field names replaced.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> participantsToUpdate </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">json</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">filter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">data</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">idList</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">includes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> participantsToCreate </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">json</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">filter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token parameter">data</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">idList</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">includes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This code is using a built-in JavaScript method that <strong>helps us iterate on
arrays to manipulate elements and return values.</strong> The <code>.filter()</code> method is
being used to return a new array after filtering out certain elements from the
original array. We have declared two variables to store the new arrays:
<code>participantsToUpdate</code> and <code>participantsToCreate</code>. Participants whose ids are
existing in the destination system (or who are in the <code>idList</code> array) are added
to <code>participantsToUpdate</code>, and any remaining participants are added to
<code>participantsToCreate</code>. This filtering helped us perform the correct operations
on each participant type. For instance, later in the job, we use the filtered
arrays to only overwrite a participant's <code>reportNumber</code> field if it is a new
participant. <code>.filter()</code> is just one of many higher-order functions that power
OpenFn jobs.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="objects--job-mappings">Objects &amp; job mappings<a href="#objects--job-mappings" class="hash-link" aria-label="Direct link to Objects &amp; job mappings" title="Direct link to Objects &amp; job mappings">​</a></h2><p>The final lesson was on objects and key-value pairs--something used in almost
every OpenFn job! The result of the design and mapping phase of requirements
gathering is almost always a mapping document which includes key-value pairs in
plain English. These specifications are then translated to JavaScript via
<strong><em>objects</em></strong>. The code below is a snippet of an object which captures the
key-value pairs for states in the US.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> stateMapping </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token constant" style="color:rgb(130, 170, 255)">AK</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'ALASKA'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token constant" style="color:rgb(130, 170, 255)">AZ</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'ARIZONA'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token constant" style="color:rgb(130, 170, 255)">AR</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'ARKANSAS'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token constant" style="color:rgb(130, 170, 255)">CA</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'CALIFORNIA'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The value left of the colon is how the state is represented in the source
system, and the value right of the colon represents how OpenFn will send the
data to the destination system. This mapping process is key to integration
design. Learn more about mappings
<a href="/adaptors/salesforce#mapping-and-design-considerations">here</a>.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>MDN has more details on objects
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noopener noreferrer">here</a>.
Tl;dr: "The Object class represents one of JavaScript's data types. It is used
to store various keyed collections and more complex entities."</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="next-steps">Next steps<a href="#next-steps" class="hash-link" aria-label="Direct link to Next steps" title="Direct link to Next steps">​</a></h2><p>I'm well on my way to becoming a better job reader and writer. Here are some
next steps:</p><ol><li><p>Understand <code>fn(state)</code> and how <code>state</code> can be manipulated in OpenFn jobs.</p></li><li><p>Explore what's available on the JavaScript docs
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="noopener noreferrer">site</a>.</p></li><li><p>Sign up for the next level JavaScript course.</p></li></ol>]]></content:encoded>
            <category>javascript</category>
            <category>tips</category>
            <category>jobs</category>
            <category>learning</category>
        </item>
        <item>
            <title><![CDATA[Testing a React app, the blurred line between Unit, integration and E2E]]></title>
            <link>https://docs.openfn.org/articles/2021/10/22/testing-react-app-with-jest-hound</link>
            <guid>https://docs.openfn.org/articles/2021/10/22/testing-react-app-with-jest-hound</guid>
            <pubDate>Fri, 22 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Have you ever struggled to layout the strategy for testing your React App? Well,]]></description>
            <content:encoded><![CDATA[<p>Have you ever struggled to layout the strategy for testing your React App? Well,
you are not alone! Here a few hints from the lessons I learned during my
experience testing a
<a href="https://reactjs.org/" target="_blank" rel="noopener noreferrer">React</a>/<a href="https://redux.js.org/" target="_blank" rel="noopener noreferrer">Redux</a> app with a
<a href="https://www.phoenixframework.org/" target="_blank" rel="noopener noreferrer">Phoenix</a>/<a href="https://elixir-lang.org/" target="_blank" rel="noopener noreferrer">Elixir</a>
backend.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-blurred-line">The Blurred Line<a href="#the-blurred-line" class="hash-link" aria-label="Direct link to The Blurred Line" title="Direct link to The Blurred Line">​</a></h2><p>Because a React app is built on
<a href="https://reactjs.org/docs/react-component.html" target="_blank" rel="noopener noreferrer">components</a>, the basic UI units,
it is natural to think and organise your tests around components! And so unit
testing, in this case, would refer to "component testing", which may be
confusing at times, especially when the concept of unit testing is again applied
to testing functions such as Redux <code>reducers</code> and <code>action creators</code> or any other
JavaScript function in your application.</p><p>The other challenge that I often faced was whether to write tests for each
component in isolation or write a test for a feature that encapsulates a set of
related components. The later would be equivalent to writing what I would call
"integration tests".</p><p>Finally, one would say "well then you could have just written the tests in a way
that resemble the way the application is used"! This approach is commonly
recommended in the React community, but it quickly becomes really complex to
maintain the layers of separation between <strong><em>unit tests</em></strong>, <strong><em>integration
tests</em></strong> and <strong><em>end-to-end tests</em></strong>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-did-i-learn">What did I learn?<a href="#what-did-i-learn" class="hash-link" aria-label="Direct link to What did I learn?" title="Direct link to What did I learn?">​</a></h2><p>Given a React/Redux application, here is how I would organise my testing
strategy:</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="unit-tests">Unit Tests<a href="#unit-tests" class="hash-link" aria-label="Direct link to Unit Tests" title="Direct link to Unit Tests">​</a></h3><ul><li><p>In a React app, <strong>unit tests</strong> will largely apply to testing "helper
functions" and not to testing components, as justified in the next section.
Helper functions, in this case, would refer to functions that live outside the
components and are neither Redux action creators nor reducers. These functions
can be used inside components, action creators, reducers or other parts of
your application.</p></li><li><p>Writing unit tests for "helper functions" would ensure their signatures and
expected outputs are protected against regressions. This would also ensure
their use across components or other functions is consistent and as expected.</p></li><li><p>Where possible, each "helper function" must have its own <code>unit test</code>.</p></li><li><p>An example of a unit test would like:</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> sum </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">require</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'../../js/sum'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">test</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'adds 1 + 2 to equal 3'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">expect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">sum</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">toBe</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">3</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>Write a <em>thousand</em> of these.</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="integration-tests">Integration Tests<a href="#integration-tests" class="hash-link" aria-label="Direct link to Integration Tests" title="Direct link to Integration Tests">​</a></h3><ul><li><p>In the context of a React/Redux app, component tests can be thought of as
<strong>integration tests</strong>. This is because React components are built around
features such as <code>&lt;Signup /&gt;</code>, <code>&lt;Search /&gt;</code>, etc. So one React component can
be a mix of other components to achieve a UI feature set.</p></li><li><p>To test a component, write an <strong>integration test</strong> that covers the use of a
given component for a given UI feature.</p></li><li><p>If a component being tested dispatches a Redux <code>action</code>, this is the right
place to test those actions and their effect on the UI.</p></li><li><p>Pay attention to the concept of <em>feature isolation</em> vs <em>component isolation</em>
as it will help you write better integration tests and also easily mock
component contexts.</p></li><li><p>A classic example of <strong>feature isolation</strong> is when you have a <code>&lt;UserList /&gt;</code>
component which displays a list of users and has a <code>&lt;button /&gt;</code> to add a new
user. Writing a test for <code>&lt;UserList /&gt;</code> would be equivalent to testing a
feature.</p></li><li><p>In this example, one would be tempted to test the action of clicking on the
<code>&lt;AddUserButton /&gt;</code> and further test the <code>&lt;NewUser /&gt;</code> form... nope! This is
where we draw the line! Only test that the <code>&lt;UserList /&gt;</code> renders the mock
<code>users</code> in the list and that the <code>&lt;AddUserButton /&gt;</code> is present/enabled. The
<code>&lt;UserList /&gt;</code> feature ends there, otherwise you will be sliding into
<strong>End-to-End</strong> testing :)! The <code>&lt;User /&gt;</code> component, although it is invoked by
<code>&lt;UserList /&gt;</code> component, it is isolated enough to be tested in its own
integration test.</p></li><li><p>Testing components this way would make "context mocking" easier for
components.</p></li><li><p>Another important benefit for isolating testing context, as in the example
above, is that it will be easier to mock the <code>redux actions</code> and/or api calls
using tools such as <a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer">Jest</a> and
<a href="https://mswjs.io/" target="_blank" rel="noopener noreferrer">Mock Service Worker</a> (or "msw") as explained in the
<a href="#choosing-testing-tools">Choosing Tools</a> section.</p></li><li><p>The value of writing integration tests for components, in this way, ensures
that a given component renders the UI consistently, given all possible
combinations of contexts and interactions. This will also allow you to ensure
redux actions invoked by the component are called as expected and with the
correct arguments.</p></li><li><p>An example component integration test would look like:</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// ....other imports</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> setupServer </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'msw/node'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Tell jest to mock the module</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">jest</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">mock</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'../js/actions/UserActions'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">jest</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">requireActual</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'../js/actions/UserActions'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">saveUser</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> jest</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">fn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> saveUser </span><span class="token imports keyword module" style="font-style:italic">as</span><span class="token imports"> mockSaveUser </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'../js/actions/UserActions'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> server </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">setupServer</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">handlers</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Enable API mocking before tests</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">beforeAll</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> server</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">listen</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Reset any runtime handlers we may add during the tests</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">afterEach</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> server</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">resetHandlers</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Disable API mocking after the tests are done.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">afterAll</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> server</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">close</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">beforeEach</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    jest</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">clearAllMocks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">describe</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'&lt;AddUser/&gt;'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">test</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'create new user'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">getByPlaceholderText</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain">getByText</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">render</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token maybe-class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">defaultProps</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    userEvent</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">type</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">getByPlaceholderText</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'First Name'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'John'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    userEvent</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">type</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">getByPlaceholderText</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Last Name'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Doe'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    userEvent</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">click</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">getByText</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Save'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">expect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">mockSaveUser</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">toHaveBeenCalledTimes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">expect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">mockSaveUser</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">toHaveBeenCalledWith</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token literal-property property">firstName</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'John'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token literal-property property">lastName</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Doe'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>Write a <em>good couple</em> of these.</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="end-to-end-e2e-tests">End-to-End (e2e) Tests<a href="#end-to-end-e2e-tests" class="hash-link" aria-label="Direct link to End-to-End (e2e) Tests" title="Direct link to End-to-End (e2e) Tests">​</a></h3><ul><li><p>In a React/Redux App, this would mean testing a <em>full flow</em> of a given
feature. <strong>end-to-end tests</strong> would require launching the entire application,
including the backend, to run a given test.</p></li><li><p>Note that <strong>end-to-end tests</strong> are different from <strong>integration tests</strong> as
they require the entire App to run and render the full flow to your component
under test.</p></li><li><p>With this understanding, consider writing <strong>e2e</strong> tests <em>per workflow</em>.</p></li><li><p>An example <strong>e2e workflow</strong> is the "Viewing and adding users" workflow.</p></li><li><p>The e2e test for this workflow would require a test runner to launch the app,
log-in, navigate to the users list page, verify existing users are in the
list, click on the Add New User button and confirm that the new user has been
added to the list.</p></li><li><p>As you can see, e2e tests have more dependencies and require that you setup
your testing environment in way that closely simulates your real application
usage.</p></li><li><p>An example e2e test for a React/Redux App with a Phoenix/Elixir backend, using
<code>Hound</code> as a test runner looks like this:</p></li></ul><div class="language-elixir codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-elixir codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">defmodule OpenFn.UsersTest do</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  setup do</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    user = insert(:user, confirmed_at: DateTime.utc_now())</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    {:ok, user: user }</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  end</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  @tag :integration</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  test "Sign-up.", %{user: user} do</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    navigate_to("/sign-up")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    form = find_element(:id, "sign_up_form")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    form</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    |&gt; find_within_element(:id, "first-name")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    |&gt; fill_field("John")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    form</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    |&gt; find_within_element(:id, "last-name")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    |&gt; fill_field("Doe")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    form</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    |&gt; find_within_element(:id, "email")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    |&gt; fill_field("doe@gmail.com")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    form</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    |&gt; find_within_element(:id, "save-button")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    |&gt; click</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    assert page_title() === ~s/Welcome to my page/</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    end</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Write <em>only a few</em> of these.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="choosing-testing-tools">Choosing Testing Tools<a href="#choosing-testing-tools" class="hash-link" aria-label="Direct link to Choosing Testing Tools" title="Direct link to Choosing Testing Tools">​</a></h2><p>There are many testing tools out there, but for a typical <em>React/Redux</em> app the
following tools should help you accomplish the above tasks:</p><ol><li><a href="https://jestjs.io/docs/getting-started" target="_blank" rel="noopener noreferrer">Jest</a> as test runner for <strong>unit</strong>
and <strong>integration</strong> tests.</li><li><a href="https://testing-library.com/docs/" target="_blank" rel="noopener noreferrer">React Testing Library</a> used along with
Jest as an "assertion library" for integration tests.</li><li><a href="https://mswjs.io/docs/getting-started/install" target="_blank" rel="noopener noreferrer">MSW</a> used along with Jest as
a REST API mocking library.</li><li><a href="https://hexdocs.pm/hound/readme.html" target="_blank" rel="noopener noreferrer">Hound</a> as a test runner for <strong>e2e</strong>
tests in Elixir/Phoenix apps.
<a href="https://developers.google.com/web/tools/puppeteer" target="_blank" rel="noopener noreferrer">Puppeteer</a> can also be
used along with Jest.<ul><li>If Puppeteer is used, it will work seamlessly with Jest but only in
headless browser mode. It also reduces on tech stack since you will only
need Jest.</li><li>Hound gives you the ability to run your <strong>e2e</strong> tests both in <code>headless</code>
and <code>browser</code> mode.</li></ul></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="final-thoughts-and-next-steps">Final thoughts and next steps<a href="#final-thoughts-and-next-steps" class="hash-link" aria-label="Direct link to Final thoughts and next steps" title="Direct link to Final thoughts and next steps">​</a></h2><p>Testing a React App can be really hard, but worth it! By building
<code>Aria-accessible</code> components ahead of time, you save yourself 💰 and good
health! A few more hints would be:</p><ul><li>Build clean, isolated and plugable components for your better testing
experience. "God components" can be a <em>pain</em> to test!</li><li>Using test runners such as Jest, that use <em>emulated</em> web browsers (e.g.,
<code>jsdom</code>) rather than a real browser come with their own challenges in
rendering and traversing complex DOM trees, especially if you are using UI
libraries such as <a href="https://mui.com/" target="_blank" rel="noopener noreferrer">MUI</a>.</li><li>If using Jest for <strong>integration tests</strong>, I would recommend the components
under test have as few dependencies as possible to avoid the complexity
involved in mocking http requests and waiting for asynchronous DOM rendering.</li></ul><p>What would I do differently? Here are my few thoughts:</p><ul><li>Organise and document detailed test cases for manual "click testing".</li><li>Identify and clearly isolate components for <strong>integration tests</strong>.</li><li>Do not <em>delete</em> slow tests, instead re-write your component to be faster.
Respect the linter's advice, always!</li><li>Use a commonly supported frontend testing stack such as Jest, Msw, or
Puppeteer for easier setup and community support.</li><li>Setup your test runner to use a test database. It helps, especially during
<strong>e2e</strong> testing.</li><li>Always write <strong><em>all the three types</em></strong> of tests, whenever applicable.</li></ul><p>All this stuff for what?</p><ul><li>Well because regressions can be much more expensive to your organisation!
Writing high quality and thoroughly tested software will save you 💰 and help
guarantee a maintainable codebase and a progressive software application.</li></ul><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Still looking for the legend's advice?</div><div class="admonitionContent_S0QG"><p>Gotcha, here you go...</p><ol><li>Swallow your pride and be humble: <em>always</em> do <strong>manual testing!</strong></li><li>Click test your way through the <strong>manual test cases</strong> for every new
deployment, catching regressions.</li><li><em>Lock in</em> your fixes and new features as <strong>unit tests</strong>, <strong>integration
tests</strong>, and <strong>end-to-end tests</strong>.</li></ol></div></div><p>Happy testing,</p><p>Chaiwa</p>]]></content:encoded>
            <category>how-to</category>
            <category>tips</category>
            <category>testing</category>
            <category>browser-testing</category>
            <category>react</category>
            <category>elixir</category>
        </item>
        <item>
            <title><![CDATA[Moving from Webpack to esbuild on Phoenix]]></title>
            <link>https://docs.openfn.org/articles/2021/10/15/webpack-to-esbuild-part1</link>
            <guid>https://docs.openfn.org/articles/2021/10/15/webpack-to-esbuild-part1</guid>
            <pubDate>Fri, 15 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[We're very happy users of Elixir and Phoenix at OpenFn, given that we've been]]></description>
            <content:encoded><![CDATA[<p>We're very happy users of Elixir and Phoenix at OpenFn, given that we've been
using it continuously for about 6 years - upgrades and all. Our front-end
toolchain, albeit far from out of date (Webpack <code>5.52.1</code> today) has left some
room for improvement.</p><blockquote><p>This is a post written on what we call 'Slow Fridays', where we explore and
think about stuff we're curious about. The deal is some artifact at the end of
the day. So while this post is not complete - I believe part two is warranted.</p></blockquote><p>Phoenix 1.6 started to include esbuild by <a href="#ref1">default</a>. The main reasons
cited were the amount of support the team had to continuously give for a
toolchain that although necessary is not under the control of the framework
teams control.</p><p>Back in the day, Phoenix used brunch to do front end builds - despite not being
the most common bundler at the time. The objective I assume was to provide
something that is easy to get going with and lowers the barrier to entry for
Phoenix. We actually switched brunch out for webpack before webpack got into
Phoenix in order to more easily use new libraries and newer ES syntax.</p><p>It wasn't without its challenges, and still is. Webpack is wonderfully
powerful - but it does do <em>a lot</em>, and it's really easy to stumble onto plugins
that are either order dependent or mutually exclusive.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="so-whats-this-about-esbuild">So what's this about esbuild<a href="#so-whats-this-about-esbuild" class="hash-link" aria-label="Direct link to So what's this about esbuild" title="Direct link to So what's this about esbuild">​</a></h2><p>It's a bundler/compiler for JS/TS projects that is written in Go, along with
being faster by the simple fact it's natively compiled it also leverages
concurrency. To compare <em>why</em> esbuild is faster than NodeJS on face value is
unfair in my opinion. Although having similar objectives, they are wildly
different in implementation and in features.</p><p>So <strong>speed</strong> is the big selling point. But thinking back to other bundlers, what
made us switch (thinking of gulp, grunt, mixing in babel, browserify etc). Those
changes were never about speed, at least a drop in build time was nice - a bit of
caching goes a long way. The changes were about being able to use the syntax and
libraries we wanted with as little fuss as possible.</p><p>Webpack <em>can</em> do almost anything. I'm not convinced esbuild can match that, and
as an open-source maintainer I'd argue it shouldn't break its original goals to
match Webpack.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="exploring-the-caveats">Exploring the caveats<a href="#exploring-the-caveats" class="hash-link" aria-label="Direct link to Exploring the caveats" title="Direct link to Exploring the caveats">​</a></h2><p>I started breaking down what our current bundle setup actually does, after all
if we were just bundling plain JS I'd probably be using rollup and terser. Going
through our <code>webpack.config.js</code> file I can see that it:</p><ul><li>Conditionally provide sourcemaps depending on the environment.</li><li>Uses babel to parse js/jsx files<br>At the same time cherry picks lodash imports<a href="#lodash"><sup>*</sup></a>.</li><li>Parse <code>import</code>s for <code>.css</code> files through <code>style-loader</code> and <code>css-loader</code><br>Injecting the styles onto the dom.</li><li>Detect <code>require</code> statements to images, copy them to an assets folder<br>and replace the statement with a url to image.</li><li>Can watch files (excluding <code>node_modules</code>) in development.</li><li>Splits files that come from <code>node_modules</code> into a <code>vendor.js</code> bundle.</li></ul><p>That's a lot more than just building something, there's some implicit behaviour
here.</p><ul><li>The interaction between <code>style-loader</code> and <code>css-loader</code> results in extra
functions and behaviour being introduced, it's not producing a <code>.css</code> file.<blockquote><p>I'm personally not a big fan of apps injecting styles, but I think I get why
people do it. Maybe I'm old-school and like to have my stylesheets delivered
in a few files (or even one).</p></blockquote></li><li>The splitting doesn't know about <code>app.js</code>, it puts everything that resolves to
<code>node_modules</code> in <code>vendor.js</code>. Subtle but worth pointing out.</li></ul><a name="lodash"><sup>*</sup></a>Could probably ignore this and refactor some files and check that tree-shaking is working properly.<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-we-need-esbuild-to-provide">What we need esbuild to provide<a href="#what-we-need-esbuild-to-provide" class="hash-link" aria-label="Direct link to What we need esbuild to provide" title="Direct link to What we need esbuild to provide">​</a></h2><p>Like I mentioned before, webpack is super versatile and it would be
short-sighted to get esbuild to do everything it does.</p><p>So I'm approaching this with the idea that I code will need some changes, the
less the better - I've always firmly believed the kinds of restrictions smaller
tools provide can make things neater and more portable.</p><ul><li>✅ <strong>Provide source maps</strong><br>Supported out of the box. <a href="https://esbuild.github.io/api/#sourcemap" target="_blank" rel="noopener noreferrer">docs</a></li><li>✅ <strong>Watching files</strong><br>Yup. <a href="https://esbuild.github.io/api/#watch" target="_blank" rel="noopener noreferrer">docs</a></li><li>🆗 <strong>Build our css</strong> (and vendored css)<br>Compiling CSS is supported, however it doesn't (as far as I can tell) doesn't
replace <code>style-loader</code> and how it injects CSS into the DOM.</li><li>✅ <strong>Copy image assets referenced in JS</strong><br>Indeed it can, using the <code>file</code> loader.
<a href="https://esbuild.github.io/content-types/#external-file" target="_blank" rel="noopener noreferrer">docs</a></li><li>✅ <strong>Can split our files</strong><br>I picked a confusing green checkbox to illustrate that while esbuild does
support file splitting - it appears to have some caveats, primarily that it
only works with <code>esm</code> output files. We don't ship ES Modules to the browser,
but seems like a good moment to try given the primary targets for our web
front end getting module support in 2019 <sup><a href="#esm">2</a></sup>.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="giving-it-a-go">Giving it a go<a href="#giving-it-a-go" class="hash-link" aria-label="Direct link to Giving it a go" title="Direct link to Giving it a go">​</a></h2><p>I've tried to go over the process as methodically as possible, after all this
isn't a new codebase nor am I alone on this. It's always important to understand
who's going to be working with this, and respect the varying skill sets and
focuses of our peers.</p><p>So we know what we want, but can any of this work? Let's give it a go with the
simplest of steps:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">./node_modules/.bin/esbuild js/app.js --bundle --outfile=out.js                                    </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> &gt; js/app.js:58:2: error: Unexpected "&lt;"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    58 │   &lt;React.StrictMode&gt;</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       ╵   ^</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">1 error</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Bang! Right, that one makes sense to me, it doesn't know what JSX is yet. I'm
gonna take a wild guess and say it won't know about the CSS or our referenced
images.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">./node_modules/.bin/esbuild js/app.js \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        --loader:.js=jsx \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        --loader:.png=file \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        --loader:.jpg=file \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        --loader:.jpeg=file \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        --bundle \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        --outdir=out</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> &gt; js/marketing/ProductsList.js:53:40: error: Unexpected ":"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    53 │     const displayList = products.filter(::this.includesText);</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       ╵                                         ^</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> &gt; js/marketing/Banner.js:13:4: warning: Duplicate key "background" in object literal</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    13 │     background: `-webkit-linear-gradient(to left, ${theme.palette.banner.right}, ${theme.palette.banner.left})`,</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       ╵     ~~~~~~~~~~</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Nice! Two things worth mentioning here:</p><ol><li>We're using some non-standard ES syntax here: <code>::</code>, let's replace that with
the equivalent <code>includesText.bind(this)</code>.</li><li>Some duplicate keys in our theme objects, looks like a warning but worth
cleaning up.</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">./node_modules/.bin/esbuild js/app.js \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        --loader:.js=jsx \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        --loader:.png=file \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        --loader:.jpg=file \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        --loader:.jpeg=file \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        --bundle \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        --outdir=out</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  out/app.js                               8.0mb ⚠️</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  out/commcare-dhis2-JKJLM3MQ.png        471.0kb</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  ...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  out/app.css                             85.1kb</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  ...and 145 more output files...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">⚡ Done in 651ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Jeepers! 651ms! That's nuts.</p><p>We can see it's copied our images and css into the build folder. Note that we're
not doing any bundle splitting right now and from the looks of it</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">... \ </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">&gt;   --minify</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  out/app.js                               3.4mb ⚠️</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  ...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">⚡ Done in 611ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>That's better, wow. It's kinda difficult to not be amazed. For context, a
minified and split production build takes about 34s with webpack and that's on my
i7 desktop machine, and 197s (3+ mins) on CI/CD.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's next?<a href="#whats-next" class="hash-link" aria-label="Direct link to What's next?" title="Direct link to What's next?">​</a></h2><p>So our 'can we actually do this' seems to have gone pretty well so far. I'm
really excited about what this will give us in the end.</p><p>But a shell command doth not a replacement for webpack make. We still need to:</p><ol><li>Get Phoenix to use esbuild and watch our files as we work.</li><li>Ensure that our html templates serve the correct files in dev &amp; production.<br>Including our CSS that is no longer injected into the DOM.</li><li>Split at least our vendored modules into their own bundle.</li><li>Make sure sourcemaps generate correctly for when we upload them to Sentry.</li><li>Have some kind of cache-busting naming scheme for production builds.</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="resources">Resources<a href="#resources" class="hash-link" aria-label="Direct link to Resources" title="Direct link to Resources">​</a></h2><ul><li><a href="https://fly.io/blog/phoenix-moves-to-esbuild-for-assets/" target="_blank" rel="noopener noreferrer">FYI: Phoenix drops webpack and npm for esbuild</a> <a name="ref1"><sup>1</sup></a></li><li><a href="https://caniuse.com/es6-module" target="_blank" rel="noopener noreferrer">JavaScript modules via script tag</a> <a name="esm"><sup>2</sup></a></li></ul>]]></content:encoded>
            <category>how-to</category>
            <category>js</category>
            <category>webpack</category>
            <category>build</category>
            <category>phoenix</category>
            <category>ci/cd</category>
        </item>
        <item>
            <title><![CDATA[Improving Multistage Docker Builds using Buildx]]></title>
            <link>https://docs.openfn.org/articles/2021/10/08/improving-multistage-docker-builds-using-buildx</link>
            <guid>https://docs.openfn.org/articles/2021/10/08/improving-multistage-docker-builds-using-buildx</guid>
            <pubDate>Fri, 08 Oct 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[So you're using docker's multi-stage builds and noticed that your build times]]></description>
            <content:encoded><![CDATA[<p>So you're using docker's multi-stage builds and noticed that your build times
aren't nearly as quick as you expected?</p><p>As many teams who spend more and more time using docker, it's quite common to
get into multi-stage builds; usually resulting in significantly smaller images.</p><p>However this comes with a pretty significant dilemma with caching. Even when
using the <code>--cache-from</code> flag when building, docker only caches the last image.</p><p>One proposed solution<sup><a href="#ref1">1</a></sup>, is to pull, build and push each
individual stage. Coming with tight coupling between the shape of your
Dockerfile and your build process/scripts.</p><p>The other solution uses Docker Buildx which the document describes as:</p><blockquote><p>Docker Buildx is a CLI plugin that extends the docker command with the full
support of the features provided by Moby BuildKit builder toolkit. It provides
the same user experience as docker build with many new features like creating
scoped builder instances and building against multiple nodes concurrently.</p></blockquote><p>While that sounds pretty cool, it doesn't really touch on caching. This actually
took me a while to find out that it would in fact do caching very differently.
In fact it's a very different experience using it, and has lots of really cool
features that further detach you from the local docker state allowing you to
build in environments that are stateless - such as Google CloudBuild without
having to wire up some kind of persistence or file caching scheme.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="buildx">Buildx<a href="#buildx" class="hash-link" aria-label="Direct link to Buildx" title="Direct link to Buildx">​</a></h2><p>We're only going to scratch the surface of Buildx, and with that let's get the
absolute minimum working; build our image locally.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="local-cache">Local Cache<a href="#local-cache" class="hash-link" aria-label="Direct link to Local Cache" title="Direct link to Local Cache">​</a></h3><p>First things first we need to create a builder, and select it for use. This is
important as without creating a buildx builder (and setting it as the default),
buildx will use the <code>docker</code> driver instead of the <code>docker-container</code> driver
which we want in order to take advantage of cache exporting.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">docker buildx create --name mybuilder --use</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>You only need to run this once, except in the case of CloudBuild where each
invocation is a new node.</p></blockquote><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">docker buildx build \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  --cache-from=type=local,src=/tmp/buildx-cache \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  --cache-to=type=local,dest=/tmp/buildx-cache \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  --load \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  .</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>While the <code>--cache-*</code> options aren't specifically required when running <code>build</code>,
as <code>buildx</code> does manage its own local cache (distinct from the regular docker
cache), it's there to emphasise the options that cache can be provided via the
CLI options.</p><p>This is about as close as you get to a regular docker build, with the
significant difference being that you have to specify where to cache from and
to.</p><p>The <code>--load</code> flag is to tell buildx to set the output to the local docker
daemon. Without that you won't actually get a resulting image to run. However,
depending on your use case, this could be seen as a convenience - if you're
wanting to run your tests inside your build; a resulting image isn't
particularly useful.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="remote-cache">Remote Cache<a href="#remote-cache" class="hash-link" aria-label="Direct link to Remote Cache" title="Direct link to Remote Cache">​</a></h3><p>Now comes to the part I'm most interested in, caching in a stateless/remote
environment. Multipart builds for us at OpenFn are essential, since we use
Elixir and like other compiled languages there is a lot to be gained by only
shipping the stuff you're going to run; and no language is safe from requiring
several times more 'stuff' in order to build our apps.</p><p>Buildx supports a
<a href="https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#-export-build-cache-to-an-external-cache-destination---cache-to" target="_blank" rel="noopener noreferrer">handful of different types</a>
of caching sources and destinations. We're going to be using the <code>registry</code>
type, where you point the cache at a repository reference (repo/image:tag
style).</p><blockquote><p>One thing to note is that Google Container Registry does not support the
metadata/manifest format that buildx uses, so if you're using Google Cloud you
will need to start using Artifact Registry.</p></blockquote><p><strong>Inline</strong></p><p>Push the image and the cache together:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">--cache-from=type=registry,ref=$IMAGE_NAME \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">--cache-to=type=inline \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This comes with the constraint that cache mode is always <code>min</code>, which only
exports/caches the resulting layers; which is still better than the plain docker
build caching but I think having the intermediary layers is generally a win. We
want to avoid a single line change invalidating an entire build step.</p><p><strong>Registry</strong></p><p>Resulting image and cache are separated:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">--cache-from=type=registry,ref=$IMAGE_NAME-build-cache \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">--cache-to=type=registry,ref=$IMAGE_NAME-build-cache,mode=max \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Again coming back to the cache mode, here being <code>max</code>; all intermediary laters
are exported to the cache image as well.</p><p>I have opted to create <em>two</em> images, one for caching and another for the
resulting image used to deploy. This gains us a much more granular cache and the
ability to more easily manage the cache image - like deleting the whole thing
when wanting to invalidate the cache. Not to mention I'm fairly sure the size of
our images that get pulled on kubernetes would get significantly larger with
many more layers.</p><p>It feels like a safer bet to have lean images for kubernetes to pull, and chunky
cache images specifically for speeding up build.</p><p>Depending on your setup, pulling large images can get <em>seriously</em> expensive in a
reasonably active deployment environment - like on AWS ECS without using
PrivateLink.</p><blockquote><p>It appears the <code>moby/buildkit</code> documentation also demonstrates
<a href="https://github.com/moby/buildkit#registry-push-image-and-cache-separately" target="_blank" rel="noopener noreferrer">this</a>
approach.</p></blockquote><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">IMAGE_NAME=us-east4-docker.pkg.dev/&lt;project-name&gt;/platform/app \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">docker buildx build \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  -t $IMAGE_NAME:latest \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  --cache-from=type=registry,ref=$IMAGE_NAME-build-cache \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  --cache-to=type=registry,ref=$IMAGE_NAME-build-cache,mode=max \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  --push \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  --progress=plain \</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  .</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This implies that the cache image is named with the suffix <code>-build-cache</code>:<br>
<code>us-east4-docker.pkg.dev/&lt;project-name&gt;/platform/app[-build-cache]</code>.</p><p>The <code>--push</code> argument tells buildx to push the resulting image to the registry.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tips">Tips<a href="#tips" class="hash-link" aria-label="Direct link to Tips" title="Direct link to Tips">​</a></h2><p><strong>Clearing the local cache</strong></p><p>As mentioned before, buildx has its own cache and in order to clear the cache
while debugging and readying a Dockerfile for remote building you'll probably
need to reach for <code>docker buildx prune</code>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="closing-thoughts">Closing thoughts<a href="#closing-thoughts" class="hash-link" aria-label="Direct link to Closing thoughts" title="Direct link to Closing thoughts">​</a></h2><p>Using buildx has been a really pleasant experience, having personally attempted
using it a few times over the last 3 years; the most recent one being the first
time I felt confident getting it into production. As with any sufficiently
flexible build tooling, the errors and issues you can run into range from
complete gibberish, genuinely concerning inconsistencies to architectural
choices that you haven't fully caught up on; requiring an ever growing list of
changes you need to make to your own build process.</p><p>Our initial observations have been great, reasonable changes on our build have
gone from 28 minutes to around 9 minutes.</p><p>While I have encountered a few confusing cache invalidations, especially when
building locally, exporting the cache to a repository and then having CloudBuild
use the image cache. And occasionally locally having what feels like <em>really</em>
aggressive caching on intermediate steps, leading me to pruning the local cache.</p><p>But overall, these issues aren't necessarily buildx issues and more likely a
combination of building docker images in general except with many more steps
accounted for by the cache.</p><p>It's kinda hard to see now what the exact issues I had with it in the past, but
hey!</p><p>Buildx has given me what I 'expected' with docker multi-stage builds, and having
the cache in a repository completely side-steps having to attach a shared volume
or copying from a storage bucket.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="resources">Resources<a href="#resources" class="hash-link" aria-label="Direct link to Resources" title="Direct link to Resources">​</a></h2><ul><li><a href="https://pythonspeed.com/articles/faster-multi-stage-builds/" target="_blank" rel="noopener noreferrer">Multi-stage builds #3: Speeding up your builds</a><a name="ref1"><sup>1</sup></a></li><li><a href="https://docs.docker.com/buildx/working-with-buildx/" target="_blank" rel="noopener noreferrer">Docker Buildx</a></li><li><a href="https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#buildx-build" target="_blank" rel="noopener noreferrer">buildx build reference</a></li><li><a href="https://github.com/moby/buildkit#registry-push-image-and-cache-separately" target="_blank" rel="noopener noreferrer">mody/buildkey Registry cache exporter</a></li></ul>]]></content:encoded>
            <category>how-to</category>
            <category>docker</category>
            <category>ci/cd</category>
        </item>
        <item>
            <title><![CDATA[Wrapping my head around jobs]]></title>
            <link>https://docs.openfn.org/articles/2021/07/05/wrapping-my-head-around-jobs</link>
            <guid>https://docs.openfn.org/articles/2021/07/05/wrapping-my-head-around-jobs</guid>
            <pubDate>Mon, 05 Jul 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Jobs are business processes turned into functional-style scripts. What does that]]></description>
            <content:encoded><![CDATA[<p>Jobs are business processes turned into functional-style scripts. What does that
mean, how should you approach writing jobs?</p><p>First, this is how <em>I</em> think about jobs and what we do at Open Function Group to
try to make our job code as readable, future-proof, and concise as possible.
There are a million different ways to approach writing jobs. This is one.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="it-all-starts-with-state">It all starts with <code>state</code><a href="#it-all-starts-with-state" class="hash-link" aria-label="Direct link to it-all-starts-with-state" title="Direct link to it-all-starts-with-state">​</a></h2><p>If a job is a set of instructions for a chef (a recipe?) then the initial
<code>state</code> is all of the ingredients they need tied up in a perfect little bundle.
It usually looks something like this:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"configuration"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"hostUrl"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://moh.kenya.gov.ke/dhis2"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"username"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"taylor"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"password"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"very-secret"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"data"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"type"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"registration"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"patient"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"age"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">24</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"gender"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"M"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"nationalId"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"321cs7"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This might be the initial <code>state</code> for a real-time, message-triggered job. Some
source system generated a new patient payload and sent that payload to OpenFn.
The data from our source system will wind up in <code>state.data</code>. Now if my job is
meant to take this new patient registration information and use it to create a
new record in the national health record system, I'll also need to provide my
robot-chef here with a credential so they can access that system. The credential
I've specified will get put into <code>state.configuration</code> and now our "raw
ingredients" are all ready for our robot chef.</p><p>Note that even if this job was initiated by a cron trigger (e.g., "Hey chef,
prepare this recipe every Tuesday at 7pm") or by a flow/catch trigger (e.g.,
"Hey chef, prepare this recipe only when you <em>fail</em> to make banana pancakes") it
will have an initial state.</p><p><strong>Every job, and every operation inside that job (think "step" in a recipe) is
called with <code>state</code> and returns <code>state</code> when it's done.</strong></p><p>Initial state for a cron triggered job might look like this:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"configuration"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"hostUrl"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://moh.kenya.gov.ke"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"apiKey"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"abc123"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"data"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"lastProcessedId"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">321</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And for a fail triggered job like this:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"configuration"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"hostUrl"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://moh.kenya.gov.ke"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"apiKey"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"abc123"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"data"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"lastProcessedId"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">321</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"error"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(195, 232, 141)">"Required field missing"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"Patient Surname"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"Line 43"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>No matter what, jobs start with state. See
<a href="/documentation/jobs/state">"Initial and final state for runs"</a> for a detailed
breakdown.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="it-ends-with-state-too">It ends with <code>state</code> too<a href="#it-ends-with-state-too" class="hash-link" aria-label="Direct link to it-ends-with-state-too" title="Direct link to it-ends-with-state-too">​</a></h2><p>Now that we've got it in our heads that <code>state</code> is the raw ingredients you hand
to your chef when you ask them to prepare a recipe, let's look at the recipe.
Boiled down (excuse the pun) a job for loading those patients into the national
health record system might look like this:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token function" style="color:rgb(130, 170, 255)">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/insuranceRegistrations'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">post</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/patients'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">someData </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">post</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/visits'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">someData </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We're telling our chef to take those raw ingredients (login info for our
national health system and a chunk of information about a newly registered
patient) and do the following:</p><ol><li>Find out whether this person already has a national health insurance number</li><li>Add this person to the patient registry (making use of some insurance data
from step 1)</li><li>Add a visit record with information about this initial visit (making use of
patient registry data from step 2)</li></ol><p>When all of this is done, we'll not only have a new patient and visit logged in
the national health registry, but we'll also return a final <code>state</code> object with
information about what we've done that can be used in subsequent jobs. Imagine
that we want to make a cash transfer to this patient so that they can take a cab
to the next visit—we might create a job with the Mpesa adaptor that takes the
final state of this first job as its <em>initial state</em>. In this way, jobs are
composable.</p><p>But what about the complexity inside our job—in order to complete step 2, we
need some data from the insurance registry and we only get that data in step 1.
Crucially, each operation (again, think "step" in a recipe) takes state and
returns state. In effect, the OpenFn execution pipeline simply calls all of your
action methods <em>with state</em>, passing it along from one operation to the next,
waiting for each to finish and using the output from the first as the input for
the second.</p><p>While you may write your <code>get</code>, <code>post</code>, <code>post</code> job as it's show above, the way
it's handled by OpenFn is actually more like:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/insurance'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">useDataFromState </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">then</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">state2</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">post</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/patients'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">useDataFromState2 </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">state2</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">then</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">state3</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">post</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/visits'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">useDataFromState3 </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">state3</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Each of these operations returns a function which <em>takes state</em> and returns
state. This means that <em>within</em> a job, you are essentially modifying <code>state</code>,
creating/manipulating records in external systems, and returning <code>state</code>.</p><p>It opens up a really interesting world of possibility for data manipulation,
cleaning, or transformation. Consider what we might do <em>after</em> we get data from
the insurance registry but <em>before</em> we create that patient in the national
patient registry:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token function" style="color:rgb(130, 170, 255)">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/insuranceRegistrations'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">fn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">state</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token console class-name" style="color:rgb(255, 203, 107)">console</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">log</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// let's look at the response from the insurance API.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">people</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">filter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">p</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> p</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access maybe-class-name">HasActiveInsurance</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// and modify the payload to only retain those with active insurance</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// before returning state for our create patients operation.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">post</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/patients'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">someData </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">post</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/visits'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">someData </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We might even need to do some manipulation <em>before</em> we send a <code>get</code> request to
the insurance registry. That's no problem:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token function" style="color:rgb(130, 170, 255)">fn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">state</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">registrationType</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">age</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">18</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">?</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Adult'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Minor'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// before returning state for our create patients operation.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/insuranceRegistrations'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">query</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">type</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'registrationType'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">fn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">state</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">people</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">filter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">p</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> p</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access maybe-class-name">HasActiveInsurance</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">post</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/patients'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">someData </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">post</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/visits'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">someData </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Here, we've added a step to modify the initial <code>state</code> before we send that first
<code>get</code> request to the insurance API. We determine if the new patient is a minor,
and then use that newly calculated data to apply a query to the insurance API
request.</p><p>Using <code>fn(state =&gt; state)</code> or <code>alterState(state =&gt; state})</code> is incredibly
useful, because it allows us to separate our data manipulation, calculation, and
raw Javascript (which will be harder for low-tech users to understand) from our
external actions. Let's explore that some more.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="keeping-external-actions-clean">Keeping external actions clean<a href="#keeping-external-actions-clean" class="hash-link" aria-label="Direct link to Keeping external actions clean" title="Direct link to Keeping external actions clean">​</a></h2><p>Inside each operation we could do some data manipulation... all of these
operations, across the many different language packages, allow for inline data
manipulation like this:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token function" style="color:rgb(130, 170, 255)">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/insuranceRegistrations'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">query</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token parameter">state</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token console class-name" style="color:rgb(255, 203, 107)">console</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">log</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"I'm doing some fancy stuff here."</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">type</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">age</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">18</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">?</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Adult'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Minor'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">post</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/patients'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">body</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token parameter">state</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">state</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">data</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">firstName</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">state</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">data</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">lastName</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>But if you're interacting with both technical and non-technical users, it makes
for harder to read jobs. Consider the following instead:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Perform calculations...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">fn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">state</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Create several new calculated attributes...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">type</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">age</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">18</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">?</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Adult'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Minor'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">fullName</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">state</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">data</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">firstName</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">state</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">data</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">lastName</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Get insurance data...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/insuranceRegistrations'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">query</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">type</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'type'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Create new patient...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">post</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'/api/patients'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">body</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'fullName'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Since we often have non-developers creating the external operations like <code>get</code>
and <code>post</code> above, this pattern makes our handoff easier. The business analyst
can say "I need to have a registration <code>type</code> field available for use when
querying the insurance registry." A developer might respond, "Great! How do you
want to calculate it... I've got all of Javascript at my fingertips." That dev
can then make as many API calls as they'd like, perform as many
<code>map.reduce(...)</code> calls as their heart desires to complete that calculation...
so long as they make sure the hand off <code>state</code> to the business analyst's
operation with a valid <code>state.data.type</code> attribute.</p><p>A final benefit of this approach is that it becomes much easier to generate job
scripts from Google Sheets. Our implementation team frequently works with
non-technical clients to generate field maps that look like this:</p><table><thead><tr><th>Path to Source Data</th><th>Destination Field</th><th align="right">Auto-generated syntax (using concat)</th></tr></thead><tbody><tr><td>patient.fullName</td><td>name</td><td align="right">field('name', dataValue('patient.fullName')),</td></tr><tr><td>patient.age</td><td>age</td><td align="right">field('age', dataValue('patient.age')),</td></tr><tr><td>???</td><td>type</td><td align="right">plz help us calculate 'type' based on x, y, z</td></tr><tr><td>patient.sex</td><td>gender</td><td align="right">field('gender', dataValue('patient.sex')),</td></tr></tbody></table><p>We can then copy and paste the syntax generated in that final column directly
into OpenFn and update the bits that need some sort of custom code, writing an
<code>fn(state)</code> block or an <code>alterState(state)</code> block before the external action.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-up">Wrapping up<a href="#wrapping-up" class="hash-link" aria-label="Direct link to Wrapping up" title="Direct link to Wrapping up">​</a></h2><p>Some key takeaways here:</p><ol><li><p>Jobs start and end with <code>state</code> — some raw ingredients that will be used in a
recipe.</p></li><li><p>Jobs are lists of <code>operations</code> — steps in a recipe that <em>each</em> take <code>state</code>,
<em>do some stuff</em>, and then return <code>state</code>.</p></li><li><p>As you move through the steps in a job, you are modifying <code>state</code>. Each
subsequent step begins with the final state from the previous step.</p></li><li><p>It may be useful to keep all your custom Javascript data cleaning,
manipulation, etc., in a separate operation (e.g., <code>fn(state)</code> or
<code>alterState(state)</code>) so that your external actions are clean and easy to
follow.</p></li></ol><p>Finally, taking a close look at how developers write those <code>fn(state)</code> steps
tells us a lot about what the job execution pipeline is really doing:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// here, "fn" is a function that takes state and returns state</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">fn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">state</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token console class-name" style="color:rgb(255, 203, 107)">console</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">log</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"I'm doing some cool stuff."</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">//  I might create some new attribute...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">myNewThing</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// And ALWAYS return state for the next operation to use...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>I hope this gives you sense of how I think about structuring jobs and building
data pipelines or automation flows on OpenFn. We recognize that this stuff is
complex, and are pushing our new documentation regularly, so please do get in
touch if you think there are ways we could improve this type of
walk-through/helper article.</p><p>Happy integrating,</p><p>Taylor</p>]]></content:encoded>
            <category>how-to</category>
            <category>tips</category>
            <category>jobs</category>
        </item>
        <item>
            <title><![CDATA[Forms and Cases: CommCare and event-based integration]]></title>
            <link>https://docs.openfn.org/articles/2021/05/24/commcare-events</link>
            <guid>https://docs.openfn.org/articles/2021/05/24/commcare-events</guid>
            <pubDate>Mon, 24 May 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[This is a quick one, but I just got off an exciting call with an organization]]></description>
            <content:encoded><![CDATA[<p>This is a quick one, but I just got off an exciting call with an organization
that's going to set up some jobs to move data into Salesforce from CommCare and
realized that despite this being one of our more common integration
requirements, we haven't done a 'tips' article for this type of project. Until
now.</p><p>So here goes. While this is by no means an exhaustive project planning template,
here are a few things to keep in mind if you're planning to implement a CommCare
to Salesforce integration on your own.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="most-people-use-data-forwarding-in-commcare">Most people use "Data Forwarding" in CommCare<a href="#most-people-use-data-forwarding-in-commcare" class="hash-link" aria-label="Direct link to Most people use &quot;Data Forwarding&quot; in CommCare" title="Direct link to Most people use &quot;Data Forwarding&quot; in CommCare">​</a></h2><p>First, most people make use of CommCare's "Data Forwarding" feature to send form
submissions and changes in cases (creation, update, closure, etc.) to OpenFn in
real-time. You can read about that
<a href="/adaptors/commcare#webhook-forward-cases-andor-forms-from-commcare-to-openfn-using-rest-service">here</a>
but the key consideration at this planning stage is <em>when</em> you'll be performing
operations—<code>create(...)</code>, <code>update(...)</code>, <code>upsert(...)</code>, <code>query(...)</code>,
<code>(bulk(...)</code>, etc.—in Salesforce and what data you'll have access to.</p><p>Each time a form submission comes into CommCare, we'll get a copy of that
submission at OpenFn and can use that data to create or modify some records in
Salesforce.</p><p>Likewise, each time a case gets updated (or created or closed) we'll get a copy
of the case with all the case "properties" and we can use that data to <em>do some
stuff</em> in Salesforce.</p><p>If you are using "Form Forwarding", the <code>trigger</code> you'd create in OpenFn might
look like this <code>{"form":{"@name":"ART Adherence Self-Reporting Tool"}}</code> and it
would trigger your <code>job</code> any time an "ART Adherence Self-Reporting Tool"
submission arrived from CommCare, giving that job access to all of the data
inside that submission.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="working-with-the-data-that-comes-from-commcare">Working with the data that comes from CommCare<a href="#working-with-the-data-that-comes-from-commcare" class="hash-link" aria-label="Direct link to Working with the data that comes from CommCare" title="Direct link to Working with the data that comes from CommCare">​</a></h2><p>Assuming you're using making use of case management, the data that arrives from
CommCare will look something like this:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"__query_params"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"app_id"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"some-long-id"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"app_id"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"some-long-id"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"archived"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">false</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"attachments"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"1621866020043.jpg"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"content_type"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"image/jpeg"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"length"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">16423</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"url"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://www.commcarehq.org/a/your-project/api/form/attachment/some-uuid/1621866020043.jpg"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"form.xml"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"content_type"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"text/xml"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"length"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2727</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"url"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://www.commcarehq.org/a/your-project/api/form/attachment/some-uuid/form.xml"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"build_id"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"0ec83881cd0e420dad5c24ed3a5452fe"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"domain"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"your-project"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"edited_by_user_id"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token null keyword" style="font-style:italic">null</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"edited_on"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token null keyword" style="font-style:italic">null</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"form"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"#type"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"data"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"@name"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"ART Adherence Self-Reporting Tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"@uiVersion"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"@version"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2783"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"@xmlns"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"http://openrosa.org/formdesigner/59E1207B-969F-402D-9EEE-675504036F78"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"administrative"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"coach_verification"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"check_here"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"visit_notes"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">""</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"vist_notes_to_save"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"case"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"@case_id"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"1ec51ee9-5aef-4bd2-b7eb-7599856251bc"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"@date_modified"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2021-05-24T14:20:28.693000Z"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"@user_id"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"332e893dcd1b413686621bd80aae0cd3"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"@xmlns"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"http://commcarehq.org/case/transaction/v2"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"update"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token property">"consent_received"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"yes"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token property">"home_visit_notes"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"meta"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"@xmlns"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"http://openrosa.org/jr/xforms"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"appVersion"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"CommCare Android, version \"2.51.2\"(463994). App v2798. CommCare Version 2.51.2. Build 463994, built on: 2021-03-17"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"app_build_version"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2798</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"commcare_version"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2.51.2"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"deviceID"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"commcare_a39f55a5-c744-4e33-8e01-d17e7698894f"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"drift"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"0"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"geo_point"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token null keyword" style="font-style:italic">null</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"instanceID"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"130c68c5-7d17-4086-8a85-27d7d7da2216"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"timeEnd"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2021-05-24T14:20:28.693000Z"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"timeStart"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2021-05-24T14:18:46.856000Z"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"userID"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"332e893dcd1b413686621bd80aae0cd3"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"username"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"some-chw"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"participant_information"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"participant_id"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"007"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"name"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"taylor downs"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"gender"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"male"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"guardian_information"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token property">"guardians_name"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"Fake Data"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token property">"guardians_phone_number"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"8675309"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token property">"guardians_signature"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"1621866020043.jpg"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token property">"relationship_to_participant"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"father"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"current_medications"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token property">"name"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"generic-1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token property">"active"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token property">"name"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"fakelyn-notrealiol"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token property">"active"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">false</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token property">"name"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"sasstra-zenica"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token property">"active"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">false</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token property">"name"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"ibuprofen"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token property">"active"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"tested_for_hiv_status_tested_for_hiv"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"OK"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"visit_information"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"consent_given"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"yes"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"date_consent_given"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2021-05-23"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token property">"visit_date"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2021-05-23"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"id"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"130c68c5-7d17-4086-8a85-27d7d7da2216"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"indexed_on"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2021-05-24T14:20:39.045971"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"initial_processing_complete"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"is_phone_submission"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"metadata"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"appVersion"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"CommCare Android, version \"2.51.2\"(463994). App v2798. CommCare Version 2.51.2. Build 463994, built on: 2021-03-17"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"app_build_version"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2798</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"commcare_version"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2.51.2"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"deviceID"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"commcare_a39f55a5-c744-4e33-8e01-d17e7698894f"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"drift"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"0"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"geo_point"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token null keyword" style="font-style:italic">null</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"instanceID"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"130c68c5-7d17-4086-8a85-27d7d7da2216"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"location"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token null keyword" style="font-style:italic">null</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"timeEnd"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2021-05-24T14:20:28.693000Z"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"timeStart"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2021-05-24T14:18:46.856000Z"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"userID"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"332e893dcd1b413686621bd80aae0cd3"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"username"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"some-chw"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"problem"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token null keyword" style="font-style:italic">null</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"received_on"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2021-05-24T14:20:37.976363Z"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"resource_uri"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">""</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"server_modified_on"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2021-05-24T14:20:38.111789Z"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"type"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"data"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"uiversion"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"version"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"2783"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is a big blob of <code>JSON</code>—the body of the message that's received at OpenFn
when this particular form ("ART Adherence Self-Reporting Tool") is submitted in
CommCare—will be handed off to the job to start processing. The question is,
what should we do?</p><p>When setting up for a self-service implementation on OpenFn, the most important
thing you can do at this moment is carefully enumerate the data entry process
that you'd like a real human to follow. You can translate it to a job script
later.</p><p>You'll need to write this up for your own case, but in this fictional example,
here's the data entry process.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-instructions-for-our-worker">The instructions for our worker<a href="#the-instructions-for-our-worker" class="hash-link" aria-label="Direct link to The instructions for our worker" title="Direct link to The instructions for our worker">​</a></h2><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>Right from the start, notice that we're being incredibly explicit with these
instructions! We're using the "API Name" (instead of just the "label", which
might be ambiguous) of every field we want filled out in Salesforce and we're
using the specific "path" to the data we want this person to enter from
CommCare.</p><p><strong>Why are we being so specific?</strong> Because eventually, a computer will need to
interpret this—and they're <em>terrible</em> with ambiguity!</p></div></div><ol><li>Every time a messaged is received with
<code>{"form":{"@name":"ART Adherence Self-Reporting Tool"}}</code> in the body (this is
our trigger)</li><li>Log into Salesforce and create a new participant with the <code>participant_id</code>
you find in the <code>form.participant_information</code> section as their
<code>Participant_Code__c</code>. (If one already exists in Salesforce with that code,
then update the existing record instead.)</li><li>Fill out the following fields in Salesforce based on the CommCare data in
this message:<ul><li><code>Name__c</code> with the data from <code>form.participant_information.name</code></li><li><code>Sex__c</code> with the data from <code>form.participant_information.gender</code></li><li><code>CommCare_Case_ID__c</code> with the data from <code>form.case.@case_id</code></li></ul></li><li>After you've created (or updated) this participant in Salesforce, create a
record of the visit with the <code>instanceID</code> from the <code>metadata</code> section as the
unique identifier <code>Visit_Code__c</code>. (Again, if there's already a visit with
that ID please update the existing record.)</li><li>Fill out the following fields for the visit with data from CommCare"<ul><li><code>Date__c</code> with <code>form.visit_information.visit_date</code>.</li><li><code>Consented__c</code> with <code>form.visit_information.consent_given</code>.</li><li>Always set <code>Test_Status__c</code> to <code>true</code>, regardless of what's in the message
from CommCare.</li><li>And relate this record with the <code>Community_Health_Worker</code> by their username
in <code>form.metadata.username</code>.</li></ul></li><li>Finally, add a record for each medication listed in the
<code>form.participant_information.current_medications</code> array—matching on a unique
ID formed by a combination of the medication <code>name</code> and the <code>participant_id</code>
so that we can update existing medication records if they're present.</li><li>Fill out the following fields for the medication:<ul><li><code>Generic_Name__c</code> with <code>name</code></li><li><code>Status__c</code> with <code>active</code></li><li>And relate this record with the participant you created or updated in step
2 via the <code>participant_id</code> field.</li></ul></li></ol><p>Phew... that's the task. It's just a fictional example and things could be much
more straightforward, or much more complicated than this, but it's important to
remember that if you can get to this level of <strong>precision and granularity</strong> in
your data entry process, a tool like OpenFn can automate this for you in a
flash.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="translating-this-into-an-openfn-project">Translating this into an OpenFn project<a href="#translating-this-into-an-openfn-project" class="hash-link" aria-label="Direct link to Translating this into an OpenFn project" title="Direct link to Translating this into an OpenFn project">​</a></h2><p>If you're streaming data in from CommCare and you've got your Salesforce system
all set up so that this data entry person can complete the above steps (are all
the objects and fields created? are the right fields marked as "unique" and set
to be used as an "external id" in the Salesforce administration section? have
you turned on data forwarding in CommCare?) then it's time to turn them into an
OpenFn project!</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>A quick plug: <strong>Did you know that there's an
<a href="https://community.openfn.org" target="_blank" rel="noopener noreferrer">OpenFn community forum</a></strong> where you can post
stuff like the "steps" above and get help from other OpenFn users and staff
converting these steps into a real, working, OpenFn job?</p><p>Well, you do know! Check it out at
<a href="https://community.openfn.org" target="_blank" rel="noopener noreferrer">community.openfn.org</a></p></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="create-a-salesforce-credential">Create a Salesforce credential<a href="#create-a-salesforce-credential" class="hash-link" aria-label="Direct link to Create a Salesforce credential" title="Direct link to Create a Salesforce credential">​</a></h3><p>We don't need a CommCare credential, since they'll send data to us. Create a
Salesforce credential that will allow the OpenFn worker to log into your
Salesforce system.</p><p>Read more about credentials <a href="/documentation/build/credentials">here</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="create-a-message-filter-trigger">Create a message-filter trigger<a href="#create-a-message-filter-trigger" class="hash-link" aria-label="Direct link to Create a message-filter trigger" title="Direct link to Create a message-filter trigger">​</a></h3><ul><li>Select <code>Message Filter</code> for the <code>type</code></li><li>Enter <code>{"form":{"@name":"ART Adherence Self-Reporting Tool"}}</code> for the
<code>inclusion criteria</code></li></ul><p>Read more about triggers <a href="/documentation/build/triggers">here</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="create-the-job">Create the job<a href="#create-the-job" class="hash-link" aria-label="Direct link to Create the job" title="Direct link to Create the job">​</a></h3><ul><li>Give it a name</li><li>Select the trigger you just created</li><li>Select the <code>salesforce</code> adaptor</li><li>Select the credential you just created</li></ul><p>And convert the instructions above to "operations" by using the inline help
provided by the Salesforce adaptor:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Use upsert to create or update a participant based on their participant code.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">upsert</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token string" style="color:rgb(195, 232, 141)">'Participant__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token string" style="color:rgb(195, 232, 141)">'Participant_Code__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">field</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token string" style="color:rgb(195, 232, 141)">'Participant_Code__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'form.participant_information.participant_id'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">field</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Name__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'form.participant_information.name'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">field</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Sex__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'form.participant_information.gender'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">field</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'CommCare_Case_ID__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'form.case[@case_id]'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Then upsert a visit using the visit code.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">upsert</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token string" style="color:rgb(195, 232, 141)">'Visit__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token string" style="color:rgb(195, 232, 141)">'Visit_Code__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">field</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Visit_Code__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'metadata.instanceID'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">field</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Date__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'form.visit_information.visit_date'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">field</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Consented__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'form.visit_information.consent_given'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Always set status to true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">field</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Test_Status__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// And related this visit to the participant we just created by their "code"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">relationship</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token string" style="color:rgb(195, 232, 141)">'Participant__r'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token string" style="color:rgb(195, 232, 141)">'Participant_Code__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'form.participant_information.participant_id'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// And finally for EACH mediation listed, create a medication record with a status</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token function" style="color:rgb(130, 170, 255)">each</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">merge</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">dataPath</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'form.participant_information.current_medications[*]'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token function" style="color:rgb(130, 170, 255)">field</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'pID'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'form.participant_information.participant_id'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">upsert</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">'Medication_Tx__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">'Medication_Tx_ID__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token function" style="color:rgb(130, 170, 255)">field</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token maybe-class-name">Medication_Tx_ID__c</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token parameter">state</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Here, inside the medications array we've "scoped" state so that</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// state.data, for each item in the array, looks like this:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// { pID: 007, name: "sasstra-zenica", active: false }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// We will concatenate the participant ID with the medication name.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">pID</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token function" style="color:rgb(130, 170, 255)">field</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Generic_Name__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'name'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token function" style="color:rgb(130, 170, 255)">field</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Status__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'status'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token function" style="color:rgb(130, 170, 255)">relationship</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Participant__r'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Participant_Code__c'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">dataValue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'pID'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now, every time this job runs (which is every time a CommCare form is submitted)
your OpenFn worker will upsert a <code>Participant</code>, upsert a <code>Visit</code>, and upsert a
whole list of <code>Medications</code> in Salesforce.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's next<a href="#whats-next" class="hash-link" aria-label="Direct link to What's next" title="Direct link to What's next">​</a></h2><p>Well, in our little example you'd turn the job "on" (setting it to on the
inbound messages from CommCare) and let it run. Whenever there was a failure
(maybe your Salesforce admin added a new required field on the
custom<code>Medication</code> object) you'd get an email and you'd have to come back to
OpenFn to update your job, including that new field.</p><p>If you're in the process of designing your CommCare and Salesforce systems at
the moment, this back-and-forth will be pretty common. Keep in mind that you
want as much simplicity as possible in those end-user systems because... well
because <em>humans</em> have the interact with them every day!</p><p>So long as your processes are well defined, OpenFn can handle a bit of
complexity (data cleaning, transformation, complex logical flows, etc.) but you
should never make sacrifices to the user experience in CommCare and
Salesforce—that's a quick way to lose adoption.</p><p>So, ideally, you've designed your workflows in CommCare and Salesforce to make
your users happy and get them the information they need to do their jobs well
and <em>then</em> you come back to OpenFn and spell out our data entry instructions
like we've done above.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-final-thought">A final thought<a href="#a-final-thought" class="hash-link" aria-label="Direct link to A final thought" title="Direct link to A final thought">​</a></h2><p>The two most important resources you've got at your disposal if you're setting
this all up on your own are:</p><ol><li>this site (docs.openfn.org), and</li><li>the <a href="https://community.openfn.org" target="_blank" rel="noopener noreferrer">forum</a> (community.openfn.org)</li></ol><p>Read through the
<a href="/documentation/tutorials/tutorial">"What is an integration"</a>,
<a href="/documentation/get-started/terminology">"OpenFn Concepts"</a>, and
<a href="/documentation/build/workflows">"Build"</a> sections if you're a thorough,
background-first kind of learner. If you crave snippets and sample job code,
head directly to the <a href="/adaptors/library">Job Library</a> to see how other OpenFn
users are creating their jobs.</p><p>Either way, keep the community posted on your progress in the forum—you'll find
lots of helpful folks willing to lend you a hand in your integration journey.</p>]]></content:encoded>
            <category>how-to</category>
            <category>tips</category>
        </item>
        <item>
            <title><![CDATA[Sync Like You Mean It: Thinking Through System “Syncing” Protocols]]></title>
            <link>https://docs.openfn.org/articles/2021/02/17/syncing-options</link>
            <guid>https://docs.openfn.org/articles/2021/02/17/syncing-options</guid>
            <pubDate>Wed, 17 Feb 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[“Syncing” is getting two systems to a state of harmony. This might mean keeping]]></description>
            <content:encoded><![CDATA[<p>“Syncing” is getting two systems to a state of harmony. This might mean keeping
a list of patients up to date, though modifications can be made in either
system. It might mean copying transactions from one system to another on a
nightly basis. It might mean a lot of things, but the key concept is that when
you sync systems, you’re asking them to work together while simultaneously
respecting both software systems’ independence.</p><p>In this post we’ll discuss two different syncing protocols to consider when
designing your data integration. These include:</p><ol><li><strong>Real-time, or event-based, syncs</strong></li><li><strong>Scheduled syncs</strong></li></ol><p>For a
<a href="https://www.openfn.org/spotlight/2021-02-09-interoperability-for-case-referrals" target="_blank" rel="noopener noreferrer">recent project in Cambodia</a>,
OpenFn is being used by social workers to automate case referrals between the
software systems Primero and OSCaR. In the design phase, we evaluated these two
syncing options. Below, we'll explain what each one is, the differences between
them and which option we chose in the end.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="real-timeevent-based-syncs">Real Time/Event Based Syncs<a href="#real-timeevent-based-syncs" class="hash-link" aria-label="Direct link to Real Time/Event Based Syncs" title="Direct link to Real Time/Event Based Syncs">​</a></h3><p>The first option considered for this integration was the real-time/event based
sync. This type of sync is triggered whenever a specified event takes place in a
system. With this approach, whenever a case is referred in Primero (via the user
interface, i.e., when a real case-worker clicks the “refer” button) OpenFn
receives a small payload with case data and transmits it to OSCaR and vice
versa.</p><p><img loading="lazy" alt="Real_Time_Sync" src="/assets/images/syncs1-ea2cb66ff0b77bf6d05e49e59af62c63.png" width="1710" height="716" class="img_ev3q"></p><p>Because of their instantaneous nature, real time/event based syncs are great for
integrations that involve mobile payments or sms messages to recipients. Really,
anything that needs to be done “now”! Additionally, depending on your data
volumes real time syncs might save you money because you’re only using resources
when specific events take place. For instance, in the above example, a run is
triggered by a referral, so if there are only 10 case referrals/month, you'd
only process 10 runs each month.</p><p>This type of sync is great because it’s instantaneous, typically quite
straightforward to set up, doesn’t require any “state mangagement” on OpenFn,
and allows for the reprocessing of individual events. There are, however,
drawbacks.</p><p>For instance, what happens if the app that’s sending notifications to OpenFn
fails to send? What if AWS or GCP goes down, taking half of the internet with
it? If Primero “thinks” it sent the referral, OpenFn never receives it, that
case might not get referred to Oscar!</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="scheduled-syncs">Scheduled Syncs<a href="#scheduled-syncs" class="hash-link" aria-label="Direct link to Scheduled Syncs" title="Direct link to Scheduled Syncs">​</a></h3><p><img loading="lazy" alt="Schedule_Dependent_Sync" src="/assets/images/syncs2-c01d653dc6deb4939ad55425e02ba993.png" width="1710" height="946" class="img_ev3q"></p><p>The second option considered, a bi-directional schedule dependent sync, solves
for the issue discussed above. On a scheduled basis (every 5 minutes, for
example) OpenFn checks with Primero and Oscar to see if case referrals need to
be transmitted between the two systems and then refers the case if required. In
the unlikely event that any of the software systems involved crash, the
stability provided by the bi-directional sync means that all data is preserved
and eventually makes it to its destination safely.</p><p>The major drawback here is complexity. We had to use 4 jobs instead of 2, and
the job that is responsible for “pulling” data that’s been updated since the
time of the last successful sync has to keep “state”—or some sort of working
memory of what it’s done in the past. When pulling modified cases from Primero,
OpenFn now only pulls cases modified on or after <code>YYYY-MM-DD HH:MM:SS</code> where
<code>YYYY-MM-DD HH:MM:SS</code> is the time of the last successful, round-trip
synchronization. OpenFn has built-in functionality to handle exactly this
requirement, but not all ETL systems do and it’s a design implication that must
be considered.</p><p>Ultimately, for the project in Cambodia, we decided that this sync option is the
right choice because data integrity is more important than the speed of this
data flow. That’s a crucial point to understand—the organizations operating in
Cambodia decided that for this particular use case, being able to guarantee
eventual syncing was more important than having real-time syncing.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="both-sync-options-have-their-pros-and-cons">Both Sync Options Have Their Pros and Cons<a href="#both-sync-options-have-their-pros-and-cons" class="hash-link" aria-label="Direct link to Both Sync Options Have Their Pros and Cons" title="Direct link to Both Sync Options Have Their Pros and Cons">​</a></h3><p>Both options definitely have their use-cases and OpenFn's platform versatility
enables your team to decide which type of sync is right for your project.</p><p>As always, we are here to help with any questions as you think through which
sync option makes the most sense for your project.</p>]]></content:encoded>
            <category>how-to</category>
            <category>tips</category>
        </item>
        <item>
            <title><![CDATA[Our Servers or Yours: Thinking through deployment options]]></title>
            <link>https://docs.openfn.org/articles/2021/02/03/hosted-or-local-deployment</link>
            <guid>https://docs.openfn.org/articles/2021/02/03/hosted-or-local-deployment</guid>
            <pubDate>Wed, 03 Feb 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Zandile is a program manager at an iNGO and she needs to use CommCare, DHIS2,]]></description>
            <content:encoded><![CDATA[<p>Zandile is a program manager at an iNGO and she needs to use CommCare, DHIS2,
and OpenFn for an upcoming public health project. She understands that all three
pieces of software can be deployed locally, or accessed as SaaS (Software as a
Service).</p><p>Essentially, Zandile needs to decide if she would like to run the software on
someone else’s servers (SaaS), or on her organization’s own servers (deployed
locally). Before making a decision she outlines the basic, non-technical
considerations for both options.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-saas">What is SaaS?<a href="#what-is-saas" class="hash-link" aria-label="Direct link to What is SaaS?" title="Direct link to What is SaaS?">​</a></h2><p>SaaS is software that is installed and <em>runs</em> on computers maintained by
software professionals, rather than on your own computer. While those computers
might be anywhere in the world, typically you'll access and <em>use</em> this software via
the Internet.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="some-benefits-of-saas">Some benefits of SaaS<a href="#some-benefits-of-saas" class="hash-link" aria-label="Direct link to Some benefits of SaaS" title="Direct link to Some benefits of SaaS">​</a></h3><p>With SaaS, the software vendor is responsible for the expenses of managing and
monitoring all of the technical components and issues associated with the
software. This means that Zandile’s iNGO will not be responsible for updating
the software to ensure compliance with new security regulations, maintaining the
servers, backing up the data, purchasing and managing uninterrupted power
supplies, and providing a team of physical security guards to protect the
computers and data therein against physical theft.</p><p>Going the SaaS route is often faster and more secure, because you do not need to
develop expertise in "DevOps" or hire IT and physical security specialists. This
option also provides the greatest amount of flexibility &amp; scalability– because
the SaaS provider is able to deliver more or less computing power, storage, and
bandwidth—right when it’s needed.</p><p>Having smaller setup costs (you don't have to grow a software delivery company
of your own) often makes this a more economical choice for many, though SaaS
will always come with some sort of ongoing fee—a price per month or year that
goes to the vendor to compensate for the time and money they'll spend to ensure
your software works properly.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-local-deployment">What is Local Deployment?<a href="#what-is-local-deployment" class="hash-link" aria-label="Direct link to What is Local Deployment?" title="Direct link to What is Local Deployment?">​</a></h2><p>Unlike the SaaS option, local deployment means installing and running software
on your own computers—typically on your organization’s servers.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="some-benefits-of-local-deployment">Some benefits of Local Deployment<a href="#some-benefits-of-local-deployment" class="hash-link" aria-label="Direct link to Some benefits of Local Deployment" title="Direct link to Some benefits of Local Deployment">​</a></h3><p>If a SaaS provider doesn't offer hosting in your country and your government
doesn't allow your data to reside on foreign servers (i.e., you're not allowed
to use things like Gmail, WhatsApp or Facebook for communicating sensitive
information) then local deployment allows you to use tools like CommCare, DHIS2,
and OpenFn while adhering to government data sovereignty regulations.</p><p>Local deployment also provides your organization with complete ownership of the
end-to-end system. Your IT team will be personally responsible for ensuring that
the software works, is maintained, is secure, etc. If your organization does not
already have an IT team in place, then this can become a costly headache, but
for a large organization with embedded IT experience, local deployment often
makes sense.</p><p>Ultimately, being able to directly hire and fire the people who are responsible
for your software's proper functioning can be very useful. It means you have
complete responsibility for whether or not the solution succeeds.</p><p>If you've already got the teams in place (security, DevOps, etc.) then this
option can be more economical in the long run. With a very good DevOps team,
maintaining an extra piece of software might only occupy 20% of a
full-time-employee's salary. For your security guards, if the software is
installed in the same physical location it's possible that your costs won't
increase at all. While there will be very high setup costs, over time you may
realize cost savings by running an efficient software delivery unit within your
organization that spreads its focus around a number of projects.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="zandiles-decision">Zandile's Decision<a href="#zandiles-decision" class="hash-link" aria-label="Direct link to Zandile's Decision" title="Direct link to Zandile's Decision">​</a></h2><p>In this fictional case, data residency is a concern—her data is sensitive or
contains PII—and CommCare, DHIS2 and OpenFn do not provide hosting in the
country she's located. Zandile's organization has a large, experienced IT team
that has managed high-availability software projects for many years... they're
pros. While they anticipate that the setup costs will be quite high (around
$60000 and several months for this set of deployments) they plan on using this
software for the next 5 years and have determined that they'll recoup a
significant portion of that setup cost by not having to pay license fees for
SaaS. They go with local deployment.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="which-deployment-option-is-best-for-your-organization">Which Deployment Option is Best for your organization?<a href="#which-deployment-option-is-best-for-your-organization" class="hash-link" aria-label="Direct link to Which Deployment Option is Best for your organization?" title="Direct link to Which Deployment Option is Best for your organization?">​</a></h2><p>The answer is: "it depends", but if your organization has never managed local
software deployments, then we recommend going the SaaS approach. SaaS systems,
like the one OpenFn and CommCare offer, are simply going to be more secure, more
stable, and more scalable for the money.</p><p>Crucially, you can always start with SaaS (most tools even offer a free tier)
and then decide later to invest in the big startup costs of a local deployment
if the license fees for the SaaS feel high enough to make local deployment more
economical over the long term. After a few months or years on the SaaS, you'll
likely be in a better position to know if you want to continue using the
software for 5-10 years.</p><p>Should you need any help with your decision though please do not hesitate to
contact OpenFn.</p>]]></content:encoded>
            <category>how-to</category>
            <category>tips</category>
        </item>
        <item>
            <title><![CDATA[Tracked entity instances in DHIS2]]></title>
            <link>https://docs.openfn.org/articles/2020/12/09/upsert-in-dhis2</link>
            <guid>https://docs.openfn.org/articles/2020/12/09/upsert-in-dhis2</guid>
            <pubDate>Wed, 09 Dec 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[tl;dr: Lots of our users want to upsert tracked entity instances in dhis2, but]]></description>
            <content:encoded><![CDATA[<p>tl;dr: Lots of our users want to upsert tracked entity instances in dhis2, but
upserts aren’t supported by a standard DHIS2 API endpoint. We built one in our
dhis2 adaptor: it’s composed of existing APIs and a bit of logic 🤔. Now you can
<code>upsert</code> tracked entity instances to DHIS2 👍 ✅.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-bit-more">A bit more...<a href="#a-bit-more" class="hash-link" aria-label="Direct link to A bit more..." title="Direct link to A bit more...">​</a></h2><p>An “UPSERT” is a portmanteau of the database functions UPDATE and INSERT. It’s
critical to handle upserts properly when integrating systems. As of version 35
of the API, DHIS2 does not allow for an administrator to upsert tracked entity
instances (“TEIs”). OpenFn’s own
<a href="https://github.com/chaiwa-berian" target="_blank" rel="noopener noreferrer">Chaiwa Berian</a> has come up with a solution
that highlights the utility of helper functions in our dhis2 adaptor. By
combining various DHIS2 APIs through an upsertTEI function in OpenFn, DHIS2
users can now perform upserts to TEIs.</p><p>If you’re curious, check out his implementation
<a href="https://github.com/OpenFn/language-dhis2/blob/master/src/Adaptor.js#L347" target="_blank" rel="noopener noreferrer">here</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="even-more">Even more!<a href="#even-more" class="hash-link" aria-label="Direct link to Even more!" title="Direct link to Even more!">​</a></h2><p>A tracked entity instance in DHIS2 is a type of entity that can be tracked
through the system. It can be anything from a person to a commodity like a
medicine. If I am a database administrator presiding over two different systems
that are connected to one another, let’s call them “System A” and “System B,” I
would like for any updates made to the TEI of a user named “Jim Smith” in System
A to also appear in Jim’s record in System B. Before upserts came about, doing
so was difficult because of the possibility of duplicate record creation.
Because an upsert simultaneously UPDATES and INSERTS, it prevents duplicates.</p><p>Upserts are important and good because they cut down on the risk of duplicate
data entry and they also allow for transactions to be retried over and over to
ensure data integrity. That last bit is called “idempotency” and you can read
about it <a href="https://blog.openfn.org/allow-yourself-to-fail/" target="_blank" rel="noopener noreferrer">over here</a>.</p><p>Please don’t hesitate to reach out to one of OpenFn’s implementation specialists
if you’d like to learn more.</p><p>— Taylor</p><p><a href="https://openfn.org/signup" target="_blank" rel="noopener noreferrer">Sign up</a>{: .btn} to set up a project today,
absolutely free.</p><p><a href="mailto:admin@openfn.org" target="_blank" rel="noopener noreferrer">Reach out</a>{: .btn} for more information.</p>]]></content:encoded>
            <category>how-to</category>
            <category>tips</category>
        </item>
        <item>
            <title><![CDATA[Product News: Enhanced Scheduled/Periodic Job Control]]></title>
            <link>https://docs.openfn.org/articles/2020/07/14/cron-is-better-than-a-timer</link>
            <guid>https://docs.openfn.org/articles/2020/07/14/cron-is-better-than-a-timer</guid>
            <pubDate>Tue, 14 Jul 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Hi all, this is a quick one from the product team at]]></description>
            <content:encoded><![CDATA[<p>Hi all, this is a quick one from the product team at
<a href="https://openfn.org/" target="_blank" rel="noopener noreferrer">OpenFn</a> — we've made a major upgrade to how timed/period
jobs work.</p><p>In the past, if you weren't using OpenFn to drive some real-time (or
"event-based") automation, you'd need to set up an "interval trigger." Like the
photo above, this was essentially a sand timer. Set your trigger to <code>10</code> seconds
and your job fetches data from DHIS2, some regional public health data set, or
whatever, then cleans, transforms, and loads it into some other system.</p><p>For the most part, this has got the job done for the last 5 years, but as our
NGO and government clients came up with increasingly specific requirements on
not only how often but <em>when</em> a crucial job gets executed, we began finding
ourselves creating little customizations for them on a once-off basis. We're
happy to annouce that as of <code>v1.75</code> (released today), you can now schedule jobs
to run based on <code>cron</code> expressions, giving you incredible control over when your
tasks get executed.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="scheduling-is-better-than-timing">Scheduling is better than timing.<a href="#scheduling-is-better-than-timing" class="hash-link" aria-label="Direct link to Scheduling is better than timing." title="Direct link to Scheduling is better than timing.">​</a></h3><p>Using <code>cron</code>, you can choose to run a job every minute by typing <code>* * * * *</code>.</p><p>Or maybe you've got a batch sync that you want to take place while your users
are asleep—why not run it every night at 11pm with <code>23 * * * *</code>.</p><p>What if you've got to submit reuqests for medical inventory only during the
onset of flu season? Simply type <code>0 0 1 2-4 *</code> and your job will run at midnight
the 1st of the month, from February through April.</p><p>You can still run jobs at the click of a button and create timers with
expressions like <code>*/10 * * * *</code> for "every 10 minutes", but scheduling with cron
gives OpenFn.org users so much more control over how they run their
organizations. (And that's a good thing.)</p><p>If you're keen on learning by doing but don't have an OpenFn account yet,
<a href="https://www.openfn.org/signup" target="_blank" rel="noopener noreferrer">sign up for free</a> or mess around with cron
expressions at <a href="https://crontab.guru" target="_blank" rel="noopener noreferrer">crontab.guru</a>,
a brilliant site to quickly build complex cron expressions.</p><p>That's all from product for today. Speak soon.</p><p>Taylor</p>]]></content:encoded>
            <category>annoucement</category>
            <category>tips</category>
        </item>
        <item>
            <title><![CDATA[Allow Yourself to Fail]]></title>
            <link>https://docs.openfn.org/articles/2020/07/02/allow-yourself-to-fail</link>
            <guid>https://docs.openfn.org/articles/2020/07/02/allow-yourself-to-fail</guid>
            <pubDate>Thu, 02 Jul 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Hi all, this is a very short post with a simple message: design for failure.]]></description>
            <content:encoded><![CDATA[<p>Hi all, this is a very short post with a simple message: design for failure.
Even if you've never heard of
<a href="https://www.microsoft.com/en-us/sql-server" target="_blank" rel="noopener noreferrer">MSSQL</a> (or
<a href="https://azure.microsoft.com/en-us/" target="_blank" rel="noopener noreferrer">Azure</a>, or Microsoft?), I want to talk for
one moment about the importance of upserts and a funny developer term called
"idempotence."</p><p>We just extended our
<a href="https://github.com/OpenFn/language-mssql" target="_blank" rel="noopener noreferrer">language-mssql adaptor</a> with a custom
function that allows upserts (an <code>upsert</code> is when you either insert a new record
or update an existing record based on some identifier). Before, you'd need to
write something tedious like:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token function" style="color:rgb(130, 170, 255)">sql</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">query</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">MERGE my_table AS [Target]</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token template-string string" style="color:rgb(195, 232, 141)">          USING (SELECT '8675309' AS some_unique_id, 'writing_blog_posts' AS skill) AS [Source]</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token template-string string" style="color:rgb(195, 232, 141)">          ON [Target].some_unique_id = [Source].some_unique_id</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token template-string string" style="color:rgb(195, 232, 141)">          WHEN MATCHED THEN</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token template-string string" style="color:rgb(195, 232, 141)">            UPDATE SET [Target].some_unique_id=8675309, [Target].skill='writing_blog_posts'</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token template-string string" style="color:rgb(195, 232, 141)">          WHEN NOT MATCHED THEN</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token template-string string" style="color:rgb(195, 232, 141)">            INSERT (some_unique_id, skill) VALUES ([Source].some_unique_id, [Source].skill);</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>whereas now you can simply write:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token function" style="color:rgb(130, 170, 255)">upsert</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'my_table'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'some_unique_id'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">some_unique_id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">8675309</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">skill</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'writing blog posts'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>For an operation to be idempotent means that it can be repeated time and time
again without producing an unintended result. This is SUPER important for
creating S3 (<strong>S</strong>ecure, <strong>S</strong>table and <strong>S</strong>calable—more on that
<a href="https://openfn.org/trust" target="_blank" rel="noopener noreferrer">here</a>) integrations because it provides you with two
"get-out-of-jail-free" cards.</p><ol><li><p>If a destination application fails, if a connection times out, or if (for
whatever reason) you're not sure if the <code>job</code> was completed (say... making a
payment to CHW) then an idempotent operation can be RETRIED without fear of
making a double-payment.</p></li><li><p>If you make some change to how your <code>job</code> works, make some modification to
one of your destination systems, or just because you want to be <em>extra extra
sure</em> that all the data in a 9 month survey made it to the national public
health reporting system, you can <em>REPROCESS</em> every single message that's come
through OpenFn at the click of a button, without having to worry about
duplicates.</p></li></ol><p>So... when clients let me mess around with their jobs, I <em>always</em> recommend we
design for idempotence. It's common sense when you're passing messages between
two different systems that are bound to evolve, go offline, have a bad day, etc</p><p>— Taylor</p><p><a href="https://openfn.org/signup" target="_blank" rel="noopener noreferrer">Sign up</a>{: .btn} to set up a project today,
absolutely free.</p><p><a href="mailto:admin@openfn.org" target="_blank" rel="noopener noreferrer">Reach out</a>{: .btn} for more information.</p>]]></content:encoded>
            <category>how-to</category>
            <category>tips</category>
        </item>
        <item>
            <title><![CDATA[To Automate or Not to Automate? Ask Yourself These 3 Questions.]]></title>
            <link>https://docs.openfn.org/articles/2020/06/24/three-questions-to-ask</link>
            <guid>https://docs.openfn.org/articles/2020/06/24/three-questions-to-ask</guid>
            <pubDate>Wed, 24 Jun 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Automation can save time, unlock critical resources, and enable scale–but it]]></description>
            <content:encoded><![CDATA[<p>Automation can save time, unlock critical resources, and enable scale–but it
typically requires investment to set up. Wondering whether you should automate
your processes? Ask yourself these 3 questions.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="our-partners-use-openfn-automation-solutions-to-drive-efficiency-and-scale-their-processes-delivering-integrated-digital-systems-that-work-better-faster-and-together">Our partners use <a href="https://openfn.org" target="_blank" rel="noopener noreferrer">OpenFn</a> automation solutions to drive efficiency and scale their processes, delivering integrated digital systems that work better, faster, and together.<a href="#our-partners-use-openfn-automation-solutions-to-drive-efficiency-and-scale-their-processes-delivering-integrated-digital-systems-that-work-better-faster-and-together" class="hash-link" aria-label="Direct link to our-partners-use-openfn-automation-solutions-to-drive-efficiency-and-scale-their-processes-delivering-integrated-digital-systems-that-work-better-faster-and-together" title="Direct link to our-partners-use-openfn-automation-solutions-to-drive-efficiency-and-scale-their-processes-delivering-integrated-digital-systems-that-work-better-faster-and-together">​</a></h3><p>To date, we have worked with 43 social sector organizations that operate across
sectors–from health, education, and agriculture, to livelihoods and emergency
response. Over the last 6 years, OpenFn has been implemented worldwide for a
wide range of use cases, including building real-time data monitoring systems,
streamlining data cleaning pipelines, securely exchanging sensitive information,
and automating routine processes like uploading indicator results, sending
SMS/email alerts, making mobile payments,
<a href="https://openfn.org/solutions" target="_blank" rel="noopener noreferrer">and more</a>.</p><p>By connecting any app, OpenFn can integrate and automate all apps within a
digital ecosystem. However, a question that we frequently ask our partners is:</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="just-because-you-can-automateshould-you">Just because you <em>can</em> automate—<em>should</em> you?<a href="#just-because-you-can-automateshould-you" class="hash-link" aria-label="Direct link to just-because-you-can-automateshould-you" title="Direct link to just-because-you-can-automateshould-you">​</a></h4><p>While integration and automation have the potential to enable scale and save
time and money (we’ve learned this from our
<a href="https:openfn.org/clients" target="_blank" rel="noopener noreferrer">partners</a>), solutions require investment to set up
and maintain. These costs sometimes outweigh expected efficiency gains and
service outcomes. Therefore, when evaluating the cost-benefit of investing in
automation and integration solutions, we at Open Function Group typically ask 3
key questions.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-security--will-automation-limit-the-exposure-of-sensitive-data">1. Security — Will automation limit the exposure of sensitive data?<a href="#1-security--will-automation-limit-the-exposure-of-sensitive-data" class="hash-link" aria-label="Direct link to 1. Security — Will automation limit the exposure of sensitive data?" title="Direct link to 1. Security — Will automation limit the exposure of sensitive data?">​</a></h4><p>Can the exposure of sensitive data be limited by integrating with secure API
endpoints (rather than relying on human beings to interact with those data, for
example)? Or by automating a data cleaning process?</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-accuracy--will-automation-increase-data-accuracy-and-reduce-data-entry-errors">2. Accuracy — Will automation increase data accuracy and reduce data entry errors?<a href="#2-accuracy--will-automation-increase-data-accuracy-and-reduce-data-entry-errors" class="hash-link" aria-label="Direct link to 2. Accuracy — Will automation increase data accuracy and reduce data entry errors?" title="Direct link to 2. Accuracy — Will automation increase data accuracy and reduce data entry errors?">​</a></h4><p>Can the process take place more reliably by limiting the opportunity for human
error (in automating data manipulation or simple algorithmic work, for example)?</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-speed--will-automation-increase-the-speed-of-impact">3. Speed — Will automation increase the speed of impact?<a href="#3-speed--will-automation-increase-the-speed-of-impact" class="hash-link" aria-label="Direct link to 3. Speed — Will automation increase the speed of impact?" title="Direct link to 3. Speed — Will automation increase the speed of impact?">​</a></h4><p>Can the process be done more quickly via automation and is there value in having
it done faster? (The answer to the first part is almost always yes, but
sometimes there's not actually lots of value generated by doing something
faster.)</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="if-you-find-yourself-answering-yes-to-these-questions-it-may-be-time-to-consider-automating-critical-processes-at-your-organization">If you find yourself answering “yes” to these questions, it may be time to consider automating critical processes at your organization.<a href="#if-you-find-yourself-answering-yes-to-these-questions-it-may-be-time-to-consider-automating-critical-processes-at-your-organization" class="hash-link" aria-label="Direct link to If you find yourself answering “yes” to these questions, it may be time to consider automating critical processes at your organization." title="Direct link to If you find yourself answering “yes” to these questions, it may be time to consider automating critical processes at your organization.">​</a></h4><p>Tasks that meet these 3 criteria, take a lot of time to complete or are very
repetitive, and/or involve moving data between apps are typically great
candidates for automation.</p><p>If you find yourself answering “no”, then it may not be worth the investment in
automation... at least not yet. This is especially true if these processes are
still in flux or require a lot of human involvement to complete. That said, now
may be a good time to refine your existing workflows, think about how your
processes might change at scale, and consider what <em>new</em> processes, services, or
outcomes could be unlocked by automation.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="delegate-your-busywork-to-openfn-and-try-it-today">Delegate your busywork to OpenFn, and try it today!<a href="#delegate-your-busywork-to-openfn-and-try-it-today" class="hash-link" aria-label="Direct link to Delegate your busywork to OpenFn, and try it today!" title="Direct link to Delegate your busywork to OpenFn, and try it today!">​</a></h3><p>If you want to try out automation for your organization,
<a href="https://www.openfn.org/signup" target="_blank" rel="noopener noreferrer">sign up</a> for OpenFn, free of charge. Check out
<a href="https://docs.openfn.org/" target="_blank" rel="noopener noreferrer">our documentation</a> and
<a href="http://www.openfn.org" target="_blank" rel="noopener noreferrer">website</a> to learn how to get started.</p><p>Having trouble setting up your first automation "job"? Email us at
<a href="mailto:admin@openfn.org" target="_blank" rel="noopener noreferrer">admin@openfn.org</a> for support. Our team is always
happy to assist and help you evaluate the total cost of ownership of automation
solutions.</p>]]></content:encoded>
            <category>tips</category>
        </item>
        <item>
            <title><![CDATA[How Information Is Organized... In Organizations]]></title>
            <link>https://docs.openfn.org/articles/2020/06/16/how-information-is-organized</link>
            <guid>https://docs.openfn.org/articles/2020/06/16/how-information-is-organized</guid>
            <pubDate>Tue, 16 Jun 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Does your organization's information have an underlying structure? Try this exercise using boxes and crow's feet.]]></description>
            <content:encoded><![CDATA[<h4 class="anchor anchorWithStickyNavbar_LWe7" id="does-your-organizations-information-have-an-underlying-structure-try-this-exercise-using-boxes-and-crows-feet">Does your organization's information have an underlying structure? Try this exercise using boxes and crow's feet.<a href="#does-your-organizations-information-have-an-underlying-structure-try-this-exercise-using-boxes-and-crows-feet" class="hash-link" aria-label="Direct link to Does your organization's information have an underlying structure? Try this exercise using boxes and crow's feet." title="Direct link to Does your organization's information have an underlying structure? Try this exercise using boxes and crow's feet.">​</a></h4><p>This article was originally posted by Taylor Downs, Head of Product, on
<a href="https://medium.com/@taylordowns2000" target="_blank" rel="noopener noreferrer">The OpenFn Founder's blog</a> as "The power
of crow's feet."</p><p>It’s Saturday Morning in Cape Town and I’ve just spent an hour talking about how
a non-profit is organized. I thought I was getting into a technical
discussion—I’ve been doing system architecture discussions for years—but what we
ended up talking about was how this NGO thinks.</p><p>This engagement is largely about mapping an already existing “people &amp; paper”
based system to technology. Vera Solutions will build a system for this client
using Open Data Kit for field data collection and Salesforce.com for the
management “back-end”. Because we’re not explicitly being asked to help redesign
processes at this organization, the client is “telling us how things are”, then
expecting us to create a relational database model that facilitates
business-as-usual, only in a more efficient, digital way. Seems reasonable.</p><p>This organization runs multiple programs focusing on a handful of strategic
objectives. They coordinate various activities in their target communities and
report on those activities against numerous (sometimes overlapping) indicators.
Sound familiar? As we get to the 3rd explanation of these programs, and the 11th
iteration of the system schema, it hits me…</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="drawing-a-relational-object-model-sounds-technical-but-its-actually-an-exercise-in-clear-communication-and-everyone-can-benefit-from-it">Drawing a "relational object model" sounds technical, but it's actually an exercise in clear communication... and everyone can benefit from it.<a href="#drawing-a-relational-object-model-sounds-technical-but-its-actually-an-exercise-in-clear-communication-and-everyone-can-benefit-from-it" class="hash-link" aria-label="Direct link to Drawing a &quot;relational object model&quot; sounds technical, but it's actually an exercise in clear communication... and everyone can benefit from it." title="Direct link to Drawing a &quot;relational object model&quot; sounds technical, but it's actually an exercise in clear communication... and everyone can benefit from it.">​</a></h3><p>When we—human beings—wrestle with complex problems (like managing lots of
programs, other humans, community stakeholders, etc.) we have the capacity to
trick ourselves into thinking that we have wrapped our heads around a system
(for clinic registration, for after-school education, etc.) when, in fact, we’re
engaging in mental hand-waving and are simply ‘papering-over’ sections which are
secretly not just complicated, but totally incongruous with other parts of the
system. We can make ourselves believe that our logic is sound because we want it
to be sound, when in reality the organization might be held together by good
people, not good, clear, defined processes. By learning a couple of key
concepts, it’s possible for non-technical people to articulate their thoughts
clearly using “boxes” and “crow’s feet” and see whether or not there is an
underlying structure to their organization’s information.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="by-forcing-yourself-to-reduce-complex-systems-to-sketches-containing-only-two-elements-youll-be-able-to-detect-important-conflicts-and-confusions-in-how-you-think-about-your-organization-that-you-might-otherwise-miss">By forcing yourself to reduce complex systems to sketches containing only two elements, you’ll be able to detect important conflicts and confusions in how you think about your organization that you might otherwise miss.<a href="#by-forcing-yourself-to-reduce-complex-systems-to-sketches-containing-only-two-elements-youll-be-able-to-detect-important-conflicts-and-confusions-in-how-you-think-about-your-organization-that-you-might-otherwise-miss" class="hash-link" aria-label="Direct link to By forcing yourself to reduce complex systems to sketches containing only two elements, you’ll be able to detect important conflicts and confusions in how you think about your organization that you might otherwise miss." title="Direct link to By forcing yourself to reduce complex systems to sketches containing only two elements, you’ll be able to detect important conflicts and confusions in how you think about your organization that you might otherwise miss.">​</a></h3><p>If you can’t diagram the information structure in your organization using boxes
and crow’s feet, it’s a smell that something isn’t quite right (or at least that
something isn’t easily scalable… more on this later!). Let me show you the tools
in the toolbox and then wrap up by waxing poetic on people, processes, and
technology.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="boxes-and-crows-feet">Boxes and crow's feet<a href="#boxes-and-crows-feet" class="hash-link" aria-label="Direct link to Boxes and crow's feet" title="Direct link to Boxes and crow's feet">​</a></h3><p>![]({{ site.baseurl }}/assets/images/box5.png)</p><p>The box is my favorite. It represents an entity in your data system. Entities
(like <code>teachers</code>) have attributes (like <code>name</code>, <code>phone number</code>, <code>date of birth</code>,
<code>gender</code>, etc.) Some people like thinking of entities as simple forms. The
“Teacher Registration Form” will ask for the teacher’s name, phone number,
gender, etc. These are the fields on your teacher entity. By submitting one of
these forms, you’ll add a new teacher to your database. If you’re an Excel
person, the attributes are columns in your <code>teachers</code> table.</p><p>![]({{ site.baseurl }}/assets/images/crowsfeet2.png)</p><p>The crow’s foot is my second favorite. It’s used to show relationships between
entities. We know that teachers are related to the sessions that they conduct.
(And <code>session</code> might be another entity, with fields like <code>date</code>,
<code>subject taught</code>, and <code>venue</code>, to name just a few.) The crow’s foot allows us to
specify exactly how they are related. On that session entity, we’ll need to
specify the name (or ID) of the teacher who led it. On the teacher entity,
however, there won’t be a field to specify the name or ID of the session…
because a single teacher can lead MANY sessions. This is a one-to-many
relationship. The crow’s foot (that little three-pronged fella) denotes the
many. One teacher can have many sessions. One session, however, can only have
one teacher. See the diagram below.</p><p>![]({{ site.baseurl }}/assets/images/objectmodel3.png)</p><p>If we focus just on <code>teacher</code> and <code>session</code> and think back to MS Excel, we can
envision a <code>teachers</code> table and a <code>sessions</code> table. Let’s put them on different
sheets in the same workbook. On the <code>teachers</code> table, there is no column for
<code>session</code>, but on the <code>sessions</code> table, there <em>is</em> a column for <code>teacher ID</code>.
We’ve just established a one-to-many relationship.</p><p>Next time, we’ll talk about what’s going with the <code>attendance</code> entity above.
It’s sometimes called a “junction object” or a “join table”, and it’s what
allows MANY students to be related to MANY sessions. I’ll write more on this
next time, but there is no magic going on, no technicalities here. The way that
many students are related to many sessions is through this Real World Concept
that we call <code>attendance</code>. Attendance is what happens when a student shows up at
a session. It’s so important to get the language right in these discussions, and
make sure that you’re talking about real-world concepts.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="relational-object-models-with-lots-of-confusing-terms-are-not-technical-they-are-bad">Relational object models with lots of confusing terms are not "technical". They are "bad."<a href="#relational-object-models-with-lots-of-confusing-terms-are-not-technical-they-are-bad" class="hash-link" aria-label="Direct link to Relational object models with lots of confusing terms are not &quot;technical&quot;. They are &quot;bad.&quot;" title="Direct link to Relational object models with lots of confusing terms are not &quot;technical&quot;. They are &quot;bad.&quot;">​</a></h3><p>Remember that as you start to put pen to paper. And allow yourselves time (and
multiple drafts) to get the boxes and terminology right. Understanding
relational object modelling is an incredibly powerful way to organize a company.
As I said before, if you can’t model it with boxes and arrows, it’s a smell that
something might not be conceptually sound.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="a-disclaimer-and-some-thoughts-on-scaling">A disclaimer and some thoughts on scaling:<a href="#a-disclaimer-and-some-thoughts-on-scaling" class="hash-link" aria-label="Direct link to A disclaimer and some thoughts on scaling:" title="Direct link to A disclaimer and some thoughts on scaling:">​</a></h3><p>Some organizations do amazing work without good conceptual systems. They rely on
humans, instinct, improvisation, nouse, and other not-so-clearly-defined things.
They might do really great work. They might get the job done. But they need to
be well aware of their condition and face it head on. If you can’t systematize
your program implementation processes, then you need to focus tremendous effort
on finding and retaining the right people.</p><p>A friend once told me that “people are not scalable.” I couldn’t agree more, and
defend my earlier stance that if your organization’s information structure can’t
be defined with boxes and crow’s feet, it may be very hard for you to scale
responsibly. However, if you can create a ruthlessly efficient, world-class
“people operations” system (recruitment, training, management, compensation, HR,
etc.) that ensures you’ve always got the right people to figure things out you
might be better off than those operating a well defined assembly-line with
interchangeable parts. Alas, the middle way is probably the best.</p><p>That’s all for now. More soon.</p><p><em>Need help organizing or scaling your organization's information or process
flows? Contact our team of ICT4D specialists at <a href="mailto:support@openfn.org" target="_blank" rel="noopener noreferrer">support@openfn.org</a>.</em></p>]]></content:encoded>
            <category>how-to</category>
            <category>tips</category>
        </item>
    </channel>
</rss>