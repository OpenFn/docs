"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[34720],{28453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>r});var s=t(96540);const a={},i=s.createContext(a);function o(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),s.createElement(i.Provider,{value:e},n.children)}},75948:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"library/jobs/auto/async-and-array-dot-map","title":"Using async and array.map","description":"\ud83d\udcdc This job is an official example from OpenFn.","source":"@site/adaptors/library/jobs/auto/async-and-array-dot-map.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/async-and-array-dot-map","permalink":"/adaptors/library/jobs/auto/async-and-array-dot-map","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Using async and array.map","sidebar_label":"\ud83d\udcdc Using async and array.map","id":"async-and-array-dot-map","keywords":["library","job","expression","http","map","post","async","await","Promise"]},"sidebar":"adaptors","previous":{"title":"\ud83d\udcdc Extract Kobo data from API to send to OpenFn Inbox","permalink":"/adaptors/library/jobs/auto/getKoboData"},"next":{"title":"\ud83d\udcdc Chaining HTTP Requests","permalink":"/adaptors/library/jobs/auto/complex-http-request-chains"}}');var a=t(74848),i=t(28453);const o={title:"Using async and array.map",sidebar_label:"\ud83d\udcdc Using async and array.map",id:"async-and-array-dot-map",keywords:["library","job","expression","http","map","post","async","await","Promise"]},r=void 0,c={},l=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function d(n){const e={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.p,{children:["\ud83d\udcdc ",(0,a.jsx)("em",{children:"This job is an official example from OpenFn."})]}),"\n",(0,a.jsx)(e.h2,{id:"metadata",children:"Metadata"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Name: Using async and array.map"}),"\n",(0,a.jsxs)(e.li,{children:["Adaptor: ",(0,a.jsx)(e.a,{href:"https://www.github.com/openfn/language-http",children:(0,a.jsx)(e.code,{children:"@openfn/language-http"})})]}),"\n",(0,a.jsxs)(e.li,{children:["Adaptor Version: ",(0,a.jsx)(e.a,{href:"https://www.github.com/openfn/language-http",children:(0,a.jsx)(e.code,{children:"latest"})})]}),"\n",(0,a.jsx)(e.li,{children:"Created date unknown"}),"\n",(0,a.jsx)(e.li,{children:"Updated date unknown"}),"\n",(0,a.jsxs)(e.li,{children:["Score: ",(0,a.jsx)("b",{children:"100"})," (an ",(0,a.jsx)(e.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.code,{children:"map"}),", ",(0,a.jsx)(e.code,{children:"post"}),", ",(0,a.jsx)(e.code,{children:"async"}),", ",(0,a.jsx)(e.code,{children:"await"}),", ",(0,a.jsx)(e.code,{children:"Promise"})]}),"\n",(0,a.jsx)(e.h2,{id:"expression",children:"Expression"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:"fn(state => {\n  console.log('Here we will await the result of a LOT of async operations.');\n\n  console.log('First we needed to break large arrays into smaller chunks.');\n  function chunk(arr, chunkSize) {\n    var R = [];\n    for (var i = 0, len = arr.length; i < len; i += chunkSize)\n      R.push(arr.slice(i, i + chunkSize));\n    return R;\n  }\n\n  const clinicSets = chunk(state.data.Clinic, 10);\n  const patientSets = chunk(state.data.Patient, 10);\n  const visitSets = chunk(state.data.Visit, 10);\n  const deletedVisitSets = chunk(state.data.VisitDeleted, 10);\n\n  console.log('Then we define a bunch of different async functions.');\n  const postClinics = async cs => {\n    return post(state.configuration.inboxUrl, {\n      body: { clinics: cs },\n    })(state);\n  };\n\n  const postPatients = async ps => {\n    return post(state.configuration.inboxUrl, {\n      body: { patients: ps },\n    })(state);\n  };\n\n  const postVisits = async vs => {\n    return post(state.configuration.inboxUrl, {\n      body: { visits: vs },\n    })(state);\n  };\n\n  const postDeletedVisits = async dvs => {\n    return post(state.configuration.inboxUrl, {\n      body: { deletedVisits: dvs },\n    })(state);\n  };\n\n  console.log(\n    'Then we define a single function that wraps them all up and waits for all the individual functions to resolve.'\n  );\n  async function makePosts() {\n    return Promise.all([\n      ...clinicSets.map(item => postClinics(item)),\n      ...patientSets.map(item => postPatients(item)),\n      ...visitSets.map(item => postVisits(item)),\n      ...deletedVisitSets.map(item => postDeletedVisits(item)),\n    ]);\n  }\n\n  console.log(\n    'Then we return that function, forcing our next operation to await the result of this one.'\n  );\n  return makePosts();\n});\n\nfn(state => {\n  console.log('I show up AFTER those async functions are resolved.');\n  return state;\n});\n\n"})})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}}}]);