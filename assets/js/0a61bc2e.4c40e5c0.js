"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[27431],{18879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"getting-started/terminology","title":"OpenFn Concepts","description":"All across the OpenFn Integration Toolkit, the iPaaS, and this documentation","source":"@site/versioned_docs/version-legacy/getting-started/terminology.md","sourceDirName":"getting-started","slug":"/getting-started/terminology","permalink":"/documentation/legacy/getting-started/terminology","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/versioned_docs/version-legacy/getting-started/terminology.md","tags":[],"version":"legacy","frontMatter":{"title":"OpenFn Concepts"},"sidebar":"docs","previous":{"title":"Lightning Quick-Start (v2)","permalink":"/documentation/legacy/build/lightning-quick-start"},"next":{"title":"Implementation Checklist","permalink":"/documentation/legacy/getting-started/implementation-checklist"}}');var i=t(74848),a=t(28453);const o={title:"OpenFn Concepts"},r=void 0,d={},l=[{value:"Project",id:"project",level:2},{value:"Job",id:"job",level:2},{value:"Adaptor",id:"adaptor",level:3},{value:"Operation",id:"operation",level:3},{value:"Trigger",id:"trigger",level:2},{value:"Credential",id:"credential",level:2},{value:"Message",id:"message",level:2},{value:"Inbox",id:"inbox",level:3},{value:"Run",id:"run",level:2},{value:"Activity History",id:"activity-history",level:3},{value:"Related Runs and Messages",id:"related-runs-and-messages",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["All across the OpenFn Integration Toolkit, the iPaaS, and this documentation\nsite you'll find some OpenFn-specific terminology that's important to\nunderstand. This page is your reference guide\u2014a glossary of the most important\n",(0,i.jsx)(n.em,{children:"OpenFn-specific"})," words and what they mean."]}),"\n",(0,i.jsxs)(n.admonition,{title:"Keep In Mind",type:"tip",children:[(0,i.jsx)(n.p,{children:"As you read about the terms below, remember that in order to make OpenFn perform\nsome sort of data integration work you'll always need to specify:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"What"})," to do (e.g., update patient data in some system)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"When"})," to do it (e.g., at 7am every day)"]}),"\n",(0,i.jsxs)(n.li,{children:["and ",(0,i.jsx)(n.strong,{children:"How"})," to log in (e.g., go to ",(0,i.jsx)(n.code,{children:"example.com"})," and use ",(0,i.jsx)(n.code,{children:"abc123"})," as the\nsecurity token)"]}),"\n"]}),(0,i.jsx)(n.p,{children:"With this in mind, let's check out the key terms."})]}),"\n",(0,i.jsxs)(n.p,{children:["Please note that if you're looking for a glossary for generic terms used in\ndata-integration (rather than this ",(0,i.jsx)(n.em,{children:"OpenFn-specific"})," stuff) head over to the\n",(0,i.jsx)(n.a,{href:"/documentation/legacy/getting-started/glossary",children:"Glossary for Integration"})," page in the\nDesign section. Otherwise, read on!"]}),"\n",(0,i.jsx)(n.h2,{id:"project",children:"Project"}),"\n",(0,i.jsxs)(n.p,{children:["A project is an administrative grouping in OpenFn. In\n",(0,i.jsx)(n.a,{href:"https://github.com/OpenFn/microservice",children:"OpenFn/microservice"}),", it corresponds to a\n",(0,i.jsx)(n.a,{href:"/documentation/legacy/portability#proposal-v2-latest",children:(0,i.jsx)(n.code,{children:"project.yaml"})})," file. On the\nplatform, it's got an owner, a billing plan, and a bunch of\ncollaborators\u2014different users that have been granted access to the project. In\neither case, a project contains jobs, triggers, credentials, and everything you\nneed to run an integration with OpenFn."]}),"\n",(0,i.jsx)(n.h2,{id:"job",children:"Job"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Jobs are the ",(0,i.jsx)(n.strong,{children:'"what to do"'})," part of automation!"]})}),"\n",(0,i.jsxs)(n.p,{children:["OpenFn automation centers around ",(0,i.jsx)(n.a,{href:"/documentation/legacy/build/jobs",children:"jobs"}),", which define\nthe specific series of operations (i.e., tasks) that OpenFn should perform. Jobs\ncan be executed at certain times, when message arrive from outside systems, or\nwhen ",(0,i.jsx)(n.em,{children:"other jobs"})," succeed or fail. Think of jobs as a set of instructions you\nmight give a data entry staff member (e.g., Please create a new Patient record\nin OpenMRS when a form containing a newly registered client is received from\nCommCare, export data to DHIS2 every week on Friday 11pm, send SMS with payment\nconfirmation number when payment confirmation message is received etc.)."]}),"\n",(0,i.jsxs)(n.admonition,{title:"Jobs are Reusable",type:"note",children:[(0,i.jsxs)(n.p,{children:["Jobs are fully configurable and reusable. They can also be chained together to\ncreate ",(0,i.jsx)(n.a,{href:"/documentation/legacy/jobs/multiple-operations",children:"multi-step automation"})," flows,\ntwo-way syncs, and to keep data consistent between multiple applications (using\nmulti-app Saga patterns). You can read more on two-way syncing below."]}),(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.h3,{id:"adaptor",children:"Adaptor"}),(0,i.jsxs)(n.p,{children:["OpenFn ",(0,i.jsx)(n.a,{href:"/adaptors",children:"adaptors"})," are open-source modules that\nprovide your jobs with the features they need to communicate with a particular\nsystem's API. Some examples are ",(0,i.jsx)(n.code,{children:"language-dhis2"}),", ",(0,i.jsx)(n.code,{children:"language-commcare"}),",\n",(0,i.jsx)(n.code,{children:"language-salesforce"}),", ",(0,i.jsx)(n.code,{children:"language-postgresql"}),", etc. There are more than 50 active\nadaptors at the moment, and anyone is free to build or enhance them."]}),(0,i.jsx)(n.h3,{id:"operation",children:"Operation"}),(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.a,{href:"/documentation/legacy/jobs/operations",children:"operation"})," is the sub-task inside a job. For\nexample, a job for loading data to DHIS2 might include 3 separate operations:"]}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:'Create a new "program".'}),"\n",(0,i.jsx)(n.li,{children:'Create many new "tracked entity instances".'}),"\n",(0,i.jsx)(n.li,{children:"Enroll those tracked entity instances in the program."}),"\n"]}),(0,i.jsx)(n.h2,{id:"trigger",children:"Trigger"}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Triggers are the ",(0,i.jsx)(n.strong,{children:'"when to do it"'})," part of automation!"]})})]})]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"/documentation/legacy/build/triggers",children:"trigger"})," determines ",(0,i.jsx)(n.strong,{children:"when"})," to run a job\nautomatically. A trigger could be set up to run a job when a message arrives\n(this is known as a ",(0,i.jsx)(n.code,{children:"message filter"})," trigger), on a cron schedule (a ",(0,i.jsx)(n.code,{children:"cron"}),"\ntrigger) or based on the success or failure of ",(0,i.jsx)(n.em,{children:"another"})," job(a ",(0,i.jsx)(n.code,{children:"flow"})," or ",(0,i.jsx)(n.code,{children:"catch"}),'\ntrigger). A simple cron trigger might specify to run a job at "7am every\nweekday".']}),"\n",(0,i.jsx)(n.h2,{id:"credential",children:"Credential"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Credentials are the ",(0,i.jsx)(n.strong,{children:'"How to log in"'})," part of automation!"]})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"/documentation/legacy/build/credentials",children:"credential"})," is used to log in to a\ndestination system (e.g., Salesforce username, password & login URL) so that a\njob can run. Via OpenFn's security model, they are separated from the jobs\nthemselves to ensure that stored usernames and passwords (which are all\nencrypted) do not get leaked or accessed by the wrong people."]}),"\n",(0,i.jsx)(n.h2,{id:"message",children:"Message"}),"\n",(0,i.jsxs)(n.p,{children:["A message is a chunk of data that's been received by your inbox. (Technically,\nit's an HTTP request.) It might trigger a job run, and it contains the ",(0,i.jsx)(n.code,{children:"body"}),"\nand ",(0,i.jsx)(n.code,{children:"headers"})," of the HTTP request that was made to your inbox."]}),"\n",(0,i.jsx)(n.h3,{id:"inbox",children:"Inbox"}),"\n",(0,i.jsxs)(n.p,{children:["Your project's ",(0,i.jsx)(n.a,{href:"/documentation/legacy/build/inbox",children:"inbox"})," contains all of the messages\nthat have been sent to your project. Messages are stored payloads or data (e.g.,\nan incoming SMS, a submitted CommCare form) that were sent via HTTP post to your\ninbox."]}),"\n",(0,i.jsx)(n.admonition,{title:"Inbox URL",type:"info",children:(0,i.jsx)(n.p,{children:'Click the link icon in the top right of the "Inbox" page to copy your inbox URL.\nYou can then use this URL to send data to OpenFn.'})}),"\n",(0,i.jsx)(n.h2,{id:"run",children:"Run"}),"\n",(0,i.jsx)(n.p,{children:"A run is each individual execution of a job. Imagine that a job is configured to\ncreate a new patient in OpenMRS whenever a case is opened in CommCare. Over the\nnext week, if 5 cases are opened in CommCare, you\u2019ll see 5 different runs of\nthis one job. If 4 runs are successful and one has failed, you\u2019ll see 4 new\npatients in OpenMRS, and your system administrator will have been notified that\none of those patients couldn\u2019t be created (or whatever more robust\nerror-handling you\u2019ve set up will take place.)"}),"\n",(0,i.jsx)(n.p,{children:"Runs have start times, end times, logs and exit codes that indicate when they\ntook place, what they did, and whether or not they succeeded."}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.p,{children:"There\u2019s not always a 1-to-1 mapping between runs and the real-world things\nyou\u2019re working with. I might define a job that gets all updated event data from\nDHIS2 for the last 2 weeks and publishes it to a public map using CartoDB. This\njob will be triggered at specified time intervals, every 2 weeks in this case,\nand after a month, we\u2019ll only see 2 runs in OpenFn (that\u2019s one run every two\nweeks). Each run will have succeeded or failed, and each one might have\nprocessed thousands of events from DHIS2."}),(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.h3,{id:"activity-history",children:"Activity History"}),(0,i.jsx)(n.p,{children:'On the platform, the Activity History section provides a list of all of the runs\nthat have taken place in a project. ("Activity History" is to "Run" and "Inbox"\nis to "Message".)'}),(0,i.jsx)(n.h2,{id:"related-runs-and-messages",children:"Related Runs and Messages"}),(0,i.jsxs)(n.p,{children:["Given the many-to-one relationship between ",(0,i.jsx)(n.code,{children:"runs"})," and ",(0,i.jsx)(n.code,{children:"messages"}),", OpenFn\nprovides an interface for viewing a messages ",(0,i.jsx)(n.strong,{children:'"job-state"'}),". This is a\ncalculation that can be useful for organizations that need to understand if a\ngiven message has ",(0,i.jsx)(n.em,{children:"eventually"})," been handled successfully."]}),(0,i.jsxs)(n.p,{children:['A job state is defined as the result ("success", "failure", or "in progress") of\nthe ',(0,i.jsx)(n.em,{children:"last"})," run (ordered by the time it was finished, rather than when it was\ninserted into the runs table) for a given message-job combination."]}),(0,i.jsx)(n.p,{children:"If two runs for the same message-job combination finished at the same time, it's\nordered by their start time, and then finally by their primary key. In reality,\nsince the same message-job combination can only be used to create a run once\nevery 10 seconds, this will almost never occur."}),(0,i.jsxs)(n.admonition,{title:"A Job state example",type:"info",children:[(0,i.jsx)(n.p,{children:'Consider a message which should trigger both a case referral job and a payment\njob. Two runs will get created when the message arrives, with the referral\nsucceeding and the payment failing. Navigating to the inbox, you\'d see two\n"job-states" for that single message:'}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Referral (success - run 1)"}),"\n",(0,i.jsx)(n.li,{children:"Payment (failure - run 2)"}),"\n"]}),(0,i.jsx)(n.p,{children:"If an administrator then made some sort of change, re-ran the failed payment job\nfor that message, and this third run succeeded, you'd still only see 2\n\"job-states\" in the inbox, but they'd both be successful:"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Referral (success - run 1)"}),"\n",(0,i.jsx)(n.li,{children:"Payment (success - run 3)"}),"\n"]}),(0,i.jsx)(n.p,{children:"Browsing to the receipt inspector would show all three runs for this single\nmessage."})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(96540);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);