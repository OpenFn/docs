"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[36949],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(96540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}},30701:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"library/jobs/auto/Upsert-Register-Event-2021-04-30","title":"Upsert Register Event","description":"This job was provided by an OpenFn.org user via the job library API.","source":"@site/adaptors/library/jobs/auto/Upsert-Register-Event-2021-04-30.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/Upsert-Register-Event-2021-04-30","permalink":"/adaptors/library/jobs/auto/Upsert-Register-Event-2021-04-30","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Upsert Register Event","sidebar_label":"Upsert Register Event","id":"Upsert-Register-Event-2021-04-30","keywords":["library","job","expression","salesforce","alterState","dataValue","field","fields","join","map","relationship","upsert"]},"sidebar":"adaptors","previous":{"title":"Upsert Register Skills plus Club","permalink":"/adaptors/library/jobs/auto/Upsert-Register-Skills-plus-Club-2021-04-30"},"next":{"title":"Upsert Register Participant","permalink":"/adaptors/library/jobs/auto/Upsert-Register-Participant-2021-04-28"}}');var a=n(74848),s=n(28453);const i={title:"Upsert Register Event",sidebar_label:"Upsert Register Event",id:"Upsert-Register-Event-2021-04-30",keywords:["library","job","expression","salesforce","alterState","dataValue","field","fields","join","map","relationship","upsert"]},o=void 0,l={},c=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("em",{children:"This job was provided by an OpenFn.org user via the job library API."}),"\n",(0,a.jsx)(t.h2,{id:"metadata",children:"Metadata"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Name: Upsert Register Event"}),"\n",(0,a.jsxs)(t.li,{children:["Adaptor: ",(0,a.jsx)(t.a,{href:"https://www.github.com/openfn/language-salesforce",children:(0,a.jsx)(t.code,{children:"@openfn/language-salesforce"})})]}),"\n",(0,a.jsxs)(t.li,{children:["Adaptor Version: ",(0,a.jsx)(t.a,{href:"https://www.github.com/openfn/language-salesforce/releases/tag/v2.7.4",children:(0,a.jsx)(t.code,{children:"v2.7.4"})})]}),"\n",(0,a.jsx)(t.li,{children:"Created over 4 years ago"}),"\n",(0,a.jsx)(t.li,{children:"Updated 6 months ago"}),"\n",(0,a.jsxs)(t.li,{children:["Score: ",(0,a.jsx)("b",{children:"0"})," (an ",(0,a.jsx)(t.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"alterState"}),", ",(0,a.jsx)(t.code,{children:"dataValue"}),", ",(0,a.jsx)(t.code,{children:"field"}),", ",(0,a.jsx)(t.code,{children:"fields"}),", ",(0,a.jsx)(t.code,{children:"join"}),", ",(0,a.jsx)(t.code,{children:"map"}),", ",(0,a.jsx)(t.code,{children:"relationship"}),", ",(0,a.jsx)(t.code,{children:"upsert"})]}),"\n",(0,a.jsx)(t.h2,{id:"expression",children:"Expression"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"alterState((state) => {\n  \n  function clean(str) {\n    if (!!str)\n      return str\n        .split('_')\n        .map(word => {\n          let new_word = word.toString().toLowerCase();\n          return new_word.slice(0, 1).toUpperCase() + new_word.slice(1);\n        })\n        .join(' ');\n  }\n  \n  const coachFieldNames = ['Coach_A__r','Coach_B__r','Coach_C__r','Coach_D__r']\n \n  state.data.destinationCoachFields = state.data.form.event_information.coaches\n  .split(' ')\n  .reduce(\n    (accumulator, currentValue, currentIndex) => [\n      ...accumulator,\n      (currentIndex < coachFieldNames.length && !!currentValue\n        ? relationship(coachFieldNames[currentIndex], 'CommCare_Ext_ID__c', currentValue)\n        : []),\n    ],\n    []\n  );\n  \n  const eventtype = state.data.form.event_information.event_type; \n  \n  const recordtype = eventtype==='community_health_event' || eventtype==='soccer_tournament' ? 'Testing Event' : 'Malaria Testing Event'; \n  console.log(recordtype)\n  \n  state.data.recordtype = recordtype; \n  \n  return state; \n}); \n\nupsert(\n  'Event__c',\n  'CommCare_Case_ID__c',\n  state=>({\n  ...fields(\n    field('Name', dataValue('form.event_information.Event_Name')),\n    relationship('RecordType', 'Name', dataValue('recordtype')),\n    field('CommCare_Ext_ID__c', state => {\n      var event = dataValue('form.event_information.Event_Name')(state);\n      return event ? event.replace(/\\//gi, '') : event;\n      }),\n    field('CommCare_Case_ID__c', dataValue('form.case.@case_id')),\n    field('Business_Unit__c', state => {\n      const bu = dataValue('form.event_information.business_unit')(state); \n      return bu==='65680f0c4c144b03ad0f86bdc46c1ebc' ? 'GRS Zambia' : \n      bu==='04d98397e28046118fade28ced6b65cb' ? 'GRS Zimbabwe' : \n      bu==='ed125ab19ec34aacab79585e59eb76f4' ? 'GRS Partnerships': undefined ; \n    }),\n    relationship('Site__r','CommCare_Ext_ID__c', dataValue('form.event_information.site')),\n    relationship('Venue__r', 'CommCare_Ext_ID__c',dataValue('form.event_information.Venue')),\n    field('Date__c', dataValue('form.event_information.event_date')),\n    field('Event_Type__c', dataValue('recordtype')),\n    field('Testing_Event_Type__c', state => {\n      const type = dataValue('form.event_information.event_type')(state); \n      return type.includes('malaria') ? 'Malaria Testing Event (General Event)' : 'Other';\n    }),\n    field('Coordinator__c', dataValue('form.event_information.event_coordinator')),\n  ),\n  ...fields(...state.data.destinationCoachFields)\n  })\n);\n\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);