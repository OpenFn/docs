"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[72969],{28453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>i});var s=a(96540);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},44783:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"packages/mssql-readme","title":"mssql developer readme","description":"Source//github.com/OpenFn/adaptors/tree/main/packages/mssql","source":"@site/adaptors/packages/mssql-readme.md","sourceDirName":"packages","slug":"/packages/mssql-readme","permalink":"/adaptors/packages/mssql-readme","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"mssql developer readme","id":"mssql-readme","keywords":["adaptor","readme","mssql"]},"sidebar":"adaptors","previous":{"title":"Changelog","permalink":"/adaptors/packages/mssql-changelog"},"next":{"title":"Functions","permalink":"/adaptors/packages/msupply-docs"}}');var t=a(74848),r=a(28453);const l={title:"mssql developer readme",id:"mssql-readme",keywords:["adaptor","readme","mssql"]},i="mssql Adaptor developer README.md",o={},d=[{value:"Documentation",id:"documentation",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Sample expression",id:"sample-expression",level:3},{value:"sql query",id:"sql-query",level:2},{value:"Find a single value for a table",id:"find-a-single-value-for-a-table",level:2},{value:"Insert one single record",id:"insert-one-single-record",level:2},{value:"Insert or Update using a unique column as a key",id:"insert-or-update-using-a-unique-column-as-a-key",level:2},{value:"Insert or Update if a value exist in the record",id:"insert-or-update-if-a-value-exist-in-the-record",level:2},{value:"Insert Many records",id:"insert-many-records",level:2},{value:"Insert or Update Many records",id:"insert-or-update-many-records",level:2},{value:"Describe a table from mssql",id:"describe-a-table-from-mssql",level:2},{value:"Create a table in the database",id:"create-a-table-in-the-database",level:2},{value:"Alter a table in the database",id:"alter-a-table-in-the-database",level:2},{value:"Development",id:"development",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"mssql-adaptor-developer-readmemd",children:"mssql Adaptor developer README.md"})}),"\n",(0,t.jsxs)(n.p,{children:["Source: ",(0,t.jsx)(n.a,{href:"https://github.com/OpenFn/adaptors/tree/main/packages/mssql",children:"https://github.com/OpenFn/adaptors/tree/main/packages/mssql"})]}),"\n",(0,t.jsx)(n.h1,{id:"language-mssql",children:"Language MSSQL"}),"\n",(0,t.jsx)(n.p,{children:"Language Pack for connecting to Azure SQL Server via OpenFn."}),"\n",(0,t.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,t.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["View all the required and optional properties for ",(0,t.jsx)(n.code,{children:"state.configuration"})," in the\nofficial\n",(0,t.jsx)(n.a,{href:"https://docs.openfn.org/adaptors/packages/mssql-configuration-schema/",children:"configuration-schema"}),"\ndefinition."]}),"\n",(0,t.jsx)(n.h3,{id:"sample-expression",children:"Sample expression"}),"\n",(0,t.jsx)(n.h2,{id:"sql-query",children:"sql query"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"sql({\n  query: `\n    SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\n    WHERE TABLE_TYPE = 'BASE TABLE'\n    AND TABLE_CATALOG='my-demo'\n  `,\n});\n\nsql({\n  query: `SELECT * FROM Household`,\n  options: {\n    writeSql: true, // Keep to true to log query (otherwise make it false).\n    execute: true, // keep to false to not alter DB\n  },\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"find-a-single-value-for-a-table",children:"Find a single value for a table"}),"\n",(0,t.jsxs)(n.p,{children:["This helper function allows to build a specific query where ",(0,t.jsx)(n.code,{children:"sql"})," would not be\nbest suited. It returns a single value and not a promise. An example of usage\nwould be in building a mapping object with a value from a lookup table."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"fn(async state => {\n  const user = {\n    id: 1,\n    name: 'Mamadou',\n    user_id: await findValue({\n      uuid: 'id',\n      relation: 'users',\n      where: { first_name: 'Mama%' },\n      operator: { first_name: 'like' }, // operator is optional. \"=\" is used by default.\n    })(state),\n  };\n\n  return upsert(...)(state);\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"insert-one-single-record",children:"Insert one single record"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"insert(\n  'SomeDB.dbo.SupplierTest',\n  {\n    SupplierNumber: 1,\n    Name: dataValue('name'),\n    Address: 'Nunya Bihz-Nash',\n  },\n  {\n    // The optional `options` argument allows for global string replacement with\n    // NULL. This is useful if you want to map an undefined value (e.g., x.name)\n    // to NULL. It can be a single string or an array of strings.\n    // It DEFAULTS to \"'undefined'\", and can be turned off w/ `false`.\n    setNull: \"'undefined'\",\n    logValues: true,\n  }\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"insert-or-update-using-a-unique-column-as-a-key",children:"Insert or Update using a unique column as a key"}),"\n",(0,t.jsx)(n.p,{children:"This function insert or update depending on the existence of a record in the\ndatabase."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"upsert(\n  'SomeDB.dbo.Supplier',\n  'SupplierNumber',\n  {\n    SupplierNumber: 1,\n    Name: dataValue('name'),\n    Address: 'Now I can tell!',\n  },\n  // Do NOT replace any instances of 'undefined' in the final SQL statement.\n  { setNull: false, logValues: true }\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"insert-or-update-if-a-value-exist-in-the-record",children:"Insert or Update if a value exist in the record"}),"\n",(0,t.jsxs)(n.p,{children:["This function will upsert a record only if the logical given is true. In this\ncase we check if ",(0,t.jsx)(n.code,{children:"dataValue('name')"})," exists."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"upsertIf(\n  dataValue('name'),\n  'users',\n  'user_id',\n  {\n    name: 'Elodie',\n    id: 7,\n  },\n  // Replace any occurence of '' and 'undefined' to NULL\n  {\n    setNull: [\"''\", \"'undefined'\"],\n    writeSql: true,\n    execute: false,\n    logValues: true,\n  }\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"insert-many-records",children:"Insert Many records"}),"\n",(0,t.jsxs)(n.p,{children:["This function allows the insert of a set of records inside a table all at once.\nPass ",(0,t.jsx)(n.code,{children:"logQuery"})," option to ",(0,t.jsx)(n.code,{children:"true"})," to display the query."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Note that insertMany takes a function which returns an array\u2014this helps\n// enforce that each item in the array has the same keys.\ninsertMany(\n  'SomeDB.dbo.Supplier',\n  state =>\n    state.data.supplierArray.map(s => {\n      return {\n        SupplierNumber: s.id,\n        Name: s.name,\n        Address: s.address,\n      };\n    }),\n  { writeSql: true, logValues: true }\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"insert-or-update-many-records",children:"Insert or Update Many records"}),"\n",(0,t.jsx)(n.p,{children:"This function inserts or updates many records all at once depending on their\nexistence in the database."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Note that insertMany takes a function which returns an array\u2014this helps\n// enforce that each item in the array has the same keys.\nupsertMany(\n  'SomeDB.dbo.Supplier',\n  'SupplierNumber',\n  state =>\n    state.data.supplierArray.map(s => {\n      return {\n        SupplierNumber: s.id,\n        Name: s.name,\n        Address: s.address,\n      };\n    }),\n  { writeSql: true, execute: false, logValues: true }\n);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In case we need to check on multiple columns before upserting, we can have an\narray of ",(0,t.jsx)(n.code,{children:"uuids"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"upsertMany(\n  'SomeDB.dbo.Supplier',\n  ['SupplierNumber', 'SupplierCode'],\n  state =>\n    state.data.supplierArray.map(s => {\n      return {\n        SupplierNumber: s.id,\n        Name: s.name,\n        Address: s.address,\n        SupplierCode: s.code,\n      };\n    }),\n  { writeSql: true, execute: false, logValues: true }\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"describe-a-table-from-mssql",children:"Describe a table from mssql"}),"\n",(0,t.jsx)(n.p,{children:"This function is used to fetch the list of columns of a given table in the\ndatabase."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describeTable('users', { writeSql: false, execute: true });\n"})}),"\n",(0,t.jsx)(n.h2,{id:"create-a-table-in-the-database",children:"Create a table in the database"}),"\n",(0,t.jsxs)(n.p,{children:["This function allows to create a table in a database from a given array of\ncolumns. The key ",(0,t.jsx)(n.code,{children:"identity"})," can be use for a column to auto-generate a value."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"insertTable('users', state =>\n  state.data.map(column => ({\n    name: column.name,\n    type: column.type,\n    required: true, // optional\n    unique: false, // optional - set to true for unique constraint\n  }))\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"alter-a-table-in-the-database",children:"Alter a table in the database"}),"\n",(0,t.jsx)(n.p,{children:"This function allows to add new columns to a table. Beware of the fact that you\ncannot add new columns with names that already exist in the table."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"modifyTable(\n  'users',\n  state =>\n    state.data.map(newColumn => ({\n      name: newColumn.name,\n      type: newColumn.type,\n      required: true, // optional\n      unique: false, // optional - set to true for unique constraint\n    })),\n  { writeSql: false, execute: true }\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"development",children:"Development"}),"\n",(0,t.jsxs)(n.p,{children:["Clone the ",(0,t.jsx)(n.a,{href:"https://github.com/OpenFn/adaptors",children:"adaptors monorepo"}),". Follow the\n",(0,t.jsx)(n.code,{children:"Getting Started"})," guide inside to get set up."]}),"\n",(0,t.jsxs)(n.p,{children:["Run tests using ",(0,t.jsx)(n.code,{children:"pnpm run test"})," or ",(0,t.jsx)(n.code,{children:"pnpm run test:watch"})]}),"\n",(0,t.jsxs)(n.p,{children:["Build the project using ",(0,t.jsx)(n.code,{children:"pnpm build"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["To just build the docs run ",(0,t.jsx)(n.code,{children:"pnpm build docs"})]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);