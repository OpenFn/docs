"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[32840],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(96540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}},52583:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>_});const s=JSON.parse('{"id":"library/jobs/auto/Upsert-Attendance-Skillz-Plus-Club-2021-05-24","title":"Upsert Attendance Skillz Plus Club","description":"This job was provided by an OpenFn.org user via the job library API.","source":"@site/adaptors/library/jobs/auto/Upsert-Attendance-Skillz-Plus-Club-2021-05-24.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/Upsert-Attendance-Skillz-Plus-Club-2021-05-24","permalink":"/adaptors/library/jobs/auto/Upsert-Attendance-Skillz-Plus-Club-2021-05-24","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Upsert Attendance Skillz Plus Club","sidebar_label":"Upsert Attendance Skillz Plus Club","id":"Upsert-Attendance-Skillz-Plus-Club-2021-05-24","keywords":["library","job","expression","salesforce","dataValue","each","field","fields","lastReferenceValue","map","query","relationship","upsert","Array"]},"sidebar":"adaptors","previous":{"title":"Upsert Coach Support Visit CSV","permalink":"/adaptors/library/jobs/auto/Upsert-Coach-Support-Visit-CSV-2021-04-28"},"next":{"title":"Upsert ART Adherence Self-Reporting Tool","permalink":"/adaptors/library/jobs/auto/Upsert-ART-Adherence-Self-Reporting-Tool-2021-04-30"}}');var a=t(74848),r=t(28453);const i={title:"Upsert Attendance Skillz Plus Club",sidebar_label:"Upsert Attendance Skillz Plus Club",id:"Upsert-Attendance-Skillz-Plus-Club-2021-05-24",keywords:["library","job","expression","salesforce","dataValue","each","field","fields","lastReferenceValue","map","query","relationship","upsert","Array"]},c=void 0,o={},_=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("em",{children:"This job was provided by an OpenFn.org user via the job library API."}),"\n",(0,a.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Name: Upsert Attendance Skillz Plus Club"}),"\n",(0,a.jsxs)(n.li,{children:["Adaptor: ",(0,a.jsx)(n.a,{href:"https://www.github.com/openfn/language-salesforce",children:(0,a.jsx)(n.code,{children:"@openfn/language-salesforce"})})]}),"\n",(0,a.jsxs)(n.li,{children:["Adaptor Version: ",(0,a.jsx)(n.a,{href:"https://www.github.com/openfn/language-salesforce/releases/tag/v2.7.4",children:(0,a.jsx)(n.code,{children:"v2.7.4"})})]}),"\n",(0,a.jsx)(n.li,{children:"Created about 4 years ago"}),"\n",(0,a.jsx)(n.li,{children:"Updated 5 months ago"}),"\n",(0,a.jsxs)(n.li,{children:["Score: ",(0,a.jsx)("b",{children:"0"})," (an ",(0,a.jsx)(n.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"dataValue"}),", ",(0,a.jsx)(n.code,{children:"each"}),", ",(0,a.jsx)(n.code,{children:"field"}),", ",(0,a.jsx)(n.code,{children:"fields"}),", ",(0,a.jsx)(n.code,{children:"lastReferenceValue"}),", ",(0,a.jsx)(n.code,{children:"map"}),", ",(0,a.jsx)(n.code,{children:"query"}),", ",(0,a.jsx)(n.code,{children:"relationship"}),", ",(0,a.jsx)(n.code,{children:"upsert"}),", ",(0,a.jsx)(n.code,{children:"Array"})]}),"\n",(0,a.jsx)(n.h2,{id:"expression",children:"Expression"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"query(\n  `SELECT Participant_Identification_Number_PID__c from Person__c where Participant_Identification_Number_PID__c  = '${state.data.form.attendance_list.update_participant_cases.item[0]['@id']}'`\n);\n\nfn(state => {\n  const PID = lastReferenceValue('records[0].Participant_Identification_Number_PID__c')(state);\n\n  if (!PID) {\n    console.log(\n      `Participant not found with Participant_Identification_Number_PID__c: ${state.data.form.attendance_list.update_participant_cases.item[0]['@id']}`\n    );\n    return state;\n  }\n  return execute(\n    // Set state.references to event record\n    query(\n      `SELECT Id, Name, CommCare_Ext_ID__c FROM Event__c WHERE CommCare_Case_ID__c = '${state.data.form.case['@case_id']}'`\n    ),\n    // Organise data and keep it safe\n    fn(state => {\n      function objectToArray(object) {\n        if (!object) return [];\n        return !Array.isArray(object) ? [object] : object;\n      }\n\n      const eventName = lastReferenceValue('records[0].CommCare_Ext_ID__c')(state);\n      state.data.eventName = eventName;\n\n      state.data.form.attendance_list.update_participant_cases.item = objectToArray(\n        state.data.form.attendance_list.update_participant_cases.item\n      );\n\n      state.data.form.attendance_list.update_participant_cases.item =\n        state.data.form.attendance_list.update_participant_cases.item.map(item => ({\n          ...item,\n          CommCare_Ext_ID__c: `${item['@id']}-${eventName}`,\n          event_case_id: state.data.form.case['@case_id'],\n        }));\n\n      //  Keep our data safe\n      state.items = state.data.form.attendance_list.update_participant_cases.item;\n\n      // Reset references\n      state.references = [];\n\n      return state;\n    }),\n    // Set state.references to an array of attendance records for each participant\n    beta.each(\n      '$.items[*]',\n      query(\n        state => `SELECT CommCare_Ext_ID__c, Session_1__c, Session_2__c, Session_3__c, Session_4__c, Session_5__c, Session_6__c, Session_7__c, Session_8__c, Session_9__c, Session_10__c, Session_11__c, Session_12__c, Session_13__c, Session_14__c, Session_15__c, Session_16__c, Session_17__c, Session_18__c, Session_19__c, Session_20__c, Session_21__c, Session_22__c, Session_23__c,Session_24__c, Session_25__c, Session_26__c, Session_27__c, Session_28__c\n         FROM Attendance__c\n         WHERE CommCare_Ext_ID__c = '${state.data.CommCare_Ext_ID__c}'\n         `\n      )\n    ),\n    // Calculate dynamic fields\n    fn(state => {\n      state.items = state.items.map(item => {\n        const record = state.references.find(rec =>\n          rec.records[0] ? rec.records[0].CommCare_Ext_ID__c === item.CommCare_Ext_ID__c : true\n        ).records[0];\n\n        function getSessionValue(present) {\n          if (!present) return 'U';\n          switch (present.toString().toLowerCase()) {\n            case 'yes':\n              return 'X';\n            case 'no':\n              return 'A';\n            case '':\n              return 'N';\n            default:\n              return 'U';\n          }\n        }\n\n        function getSessionFieldName(record) {\n          if (!record || Object.keys(record).length === 0) {\n            return 'Session_1__c';\n          }\n\n          const fieldName = Object.entries(record)\n            .filter(rec => rec[1] === null && rec[0] !== 'CommCare_Ext_ID__c')\n            .sort(function (a, b) {\n              return a[0].split('_')[1] - b[0].split('_')[1];\n            })[0][0];\n\n          return fieldName;\n        }\n\n        const sessionValue = getSessionValue(item.attendance_session);\n        const sessionDate = item.date;\n        const sessionFieldName = getSessionFieldName(record);\n        const sessionDateFieldName = `Session_${sessionFieldName.split('_')[1]}_Date__c`;\n\n        return {\n          ...item,\n          dynamicFields: {\n            [sessionFieldName]: sessionValue,\n            [sessionDateFieldName]: sessionDate,\n          },\n        };\n      });\n\n      //  Reset state.references\n      state.references = [];\n\n      return state;\n    }),\n\n    // Upsert\n    beta.each(\n      '$.items[*]',\n      upsert('Attendance__c', 'CommCare_Ext_ID__c', state => ({\n        ...fields(\n          field('CommCare_Ext_ID__c', dataValue('CommCare_Ext_ID__c')),\n          relationship('Person_Attendance__r', 'Participant_Identification_Number_PID__c', dataValue('@id')),\n          relationship('Event__r', 'CommCare_Case_ID__c', dataValue('event_case_id'))\n        ),\n        ...state.data.dynamicFields,\n      }))\n    )\n  )(state);\n});\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);