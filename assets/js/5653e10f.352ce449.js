"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[85186],{18057:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"library/jobs/auto/02b-Initiate-Payments-2019-11-19","title":"02b/ Initiate Payments","description":"This job was provided by an OpenFn.org user via the job library API.","source":"@site/adaptors/library/jobs/auto/02b-Initiate-Payments-2019-11-19.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/02b-Initiate-Payments-2019-11-19","permalink":"/adaptors/library/jobs/auto/02b-Initiate-Payments-2019-11-19","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"02b/ Initiate Payments","sidebar_label":"02b/ Initiate Payments","id":"02b-Initiate-Payments-2019-11-19","keywords":["library","job","expression","http","alterState","dataPath","each","map","post"]},"sidebar":"adaptors","previous":{"title":"Failed Payment Notification","permalink":"/adaptors/library/jobs/auto/Failed-Payment-Notification-2021-04-23"},"next":{"title":"01c/ Create person_position record","permalink":"/adaptors/library/jobs/auto/01c-Create-person_position-record-2019-12-13"}}');var s=t(74848),r=t(28453);const i={title:"02b/ Initiate Payments",sidebar_label:"02b/ Initiate Payments",id:"02b-Initiate-Payments-2019-11-19",keywords:["library","job","expression","http","alterState","dataPath","each","map","post"]},o=void 0,d={},p=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("em",{children:"This job was provided by an OpenFn.org user via the job library API."}),"\n",(0,s.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Name: 02b/ Initiate Payments"}),"\n",(0,s.jsxs)(n.li,{children:["Adaptor: ",(0,s.jsx)(n.a,{href:"https://www.github.com/openfn/language-http",children:(0,s.jsx)(n.code,{children:"@openfn/language-http"})})]}),"\n",(0,s.jsxs)(n.li,{children:["Adaptor Version: ",(0,s.jsx)(n.a,{href:"https://www.github.com/openfn/language-http",children:(0,s.jsx)(n.code,{children:"latest"})})]}),"\n",(0,s.jsx)(n.li,{children:"Created almost 6 years ago"}),"\n",(0,s.jsx)(n.li,{children:"Updated over 5 years ago"}),"\n",(0,s.jsxs)(n.li,{children:["Score: ",(0,s.jsx)("b",{children:"0"})," (an ",(0,s.jsx)(n.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"alterState"}),", ",(0,s.jsx)(n.code,{children:"dataPath"}),", ",(0,s.jsx)(n.code,{children:"each"}),", ",(0,s.jsx)(n.code,{children:"map"}),", ",(0,s.jsx)(n.code,{children:"post"})]}),"\n",(0,s.jsx)(n.h2,{id:"expression",children:"Expression"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// @trigger 'when 2a succeeds'\n// @credential 'ihris-mifos-combined'\n// @adaptor 'http'\n// -----------------------------------------------------------------------------\n\n// Hang 'payees' on state so that operations which replace \"response\" don't\n// overwrite these data. QUESTION: Why pluck body[0] instead of body[*]? What\n// happens if there are multiple payees? Is that first item in the body array an\n// array itself?\nalterState(state => {\n  state.data = { payees: state.response.body[0] };\n  state.saved_config = state.configuration;\n  return state;\n});\n\n// ===========================================================================\n// Make payment requests in Mifos with the reponse, either in bulk or by\n// iterating through the array of registrants and making a separate request\n// for each one ==============================================================\neach(\n  dataPath('payees[*]'),\n  post(\n    `${state.configuration.mifosUrl}/channel/transactions`,\n    {\n      authentication: state.configuration.mifosAuth,\n      headers: {\n        'content-type': 'application/json',\n        'X-Tenant-Identifier': 'tn07',\n      },\n      // Can we send an array of payments to make in a single request?\n      // body: state.data.registrants.map(r => {\n      //   console.log(`Initiating payment for ${r.name}.`);\n      //   return {\n      //     payer: { msisdn: state.configuration.mifosAcct },\n      //     payee: { msisdn: r.phone },\n      //     amount: r.amount,\n      //   };\n      // }),\n      body: state => {\n        return {\n          payer: {\n            partyIdInfo: {\n              partyIdType: 'MSISDN',\n              partyIdentifier: '27710203999',\n            },\n          },\n          payee: {\n            partyIdInfo: {\n              partyIdType: 'MSISDN',\n              partyIdentifier: state.data.msisdn,\n            },\n          },\n          amountType: 'SEND',\n          transactionType: {\n            scenario: 'PAYMENT',\n            initiator: 'PAYER',\n            initiatorType: 'CONSUMER',\n          },\n          amount: {\n            currency: 'USD',\n            amount: state.data.salary / 52,\n          },\n        };\n      },\n    },\n    state => {\n      const today = new Date();\n      const currPayee = state.references[0];\n      state.data.person_payment = {\n        'form[person_payments][0][0][fields][id]': 'person_payments|0',\n        'form[person_payments][0][0][fields][parent]':\n          'person|' + currPayee.person_id,\n        'form[person_payments][0][0][fields][date][day]': today.getDate(),\n        'form[person_payments][0][0][fields][date][month]':\n          today.getMonth() + 1,\n        'form[person_payments][0][0][fields][date][year]': today.getFullYear(),\n        'form[person_payments][0][0][fields][amount]': currPayee.salary / 52,\n        'form[person_payments][0][0][fields][transactionId]':\n          state.data.body.transactionId,\n        'form[person_payments][0][0][fields][status]':\n          state.data.body.transactionId ? 'initiated' : 'failed',\n      };\n      // =====================================================================\n      // Create \"initiated\" payments in iHRIS with their mifos external IDs ==\n      post(\n        `${state.saved_config.ihrisUrl}/manage/person_payments`,\n        {\n          authentication: state.configuration.ihrisAuth,\n          formData: state => {\n            state.data.person_payment.submit_type = 'confirm';\n            console.log('PaymentData: ' + state.data.person_payment);\n            return state.data.person_payment;\n          },\n        },\n        post(`${state.saved_config.ihrisUrl}/manage/person_payments`, {\n          authentication: state.configuration.ihrisAuth,\n          formData: state => {\n            state.references[1].person_payment.submit_type = 'save';\n            return state.references[1].person_payment;\n          },\n          options: {\n            successCodes: [302],\n          },\n        })\n      )(state);\n    }\n  )\n);\n\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(96540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);