"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[45894],{2070:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>o,frontMatter:()=>l,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"packages/postgresql-docs","title":"postgresql@7.0.0","description":"describeTable(tableName, [options], callback)","source":"@site/adaptors/packages/postgresql-docs.md","sourceDirName":"packages","slug":"/packages/postgresql-docs","permalink":"/adaptors/packages/postgresql-docs","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"postgresql@7.0.0","id":"postgresql-docs","keywords":["adaptor","postgresql","describeTable","findValue","insert","insertMany","insertTable","modifyTable","sql","upsert","upsertIf","upsertMany"]},"sidebar":"adaptors","previous":{"title":"Overview","permalink":"/adaptors/postgresql"},"next":{"title":"Configuration","permalink":"/adaptors/packages/postgresql-configuration-schema"}}');var r=s(74848),d=s(28453);const l={title:"postgresql@7.0.0",id:"postgresql-docs",keywords:["adaptor","postgresql","describeTable","findValue","insert","insertMany","insertTable","modifyTable","sql","upsert","upsertIf","upsertMany"]},i=void 0,c={},a=[{value:"Functions",id:"functions",level:2},{value:"describeTable",id:"describetable",level:3},{value:"findValue",id:"findvalue",level:3},{value:"insert",id:"insert",level:3},{value:"insertMany",id:"insertmany",level:3},{value:"insertTable",id:"inserttable",level:3},{value:"modifyTable",id:"modifytable",level:3},{value:"sql",id:"sql",level:3},{value:"upsert",id:"upsert",level:3},{value:"upsertIf",id:"upsertif",level:3},{value:"upsertMany",id:"upsertmany",level:3}];function h(e){const t={code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("dl",{children:[(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#describetable",children:"describeTable(tableName, [options], callback)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#findvalue",children:"findValue([filter])"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#insert",children:"insert(table, record, [options], callback)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#insertmany",children:"insertMany(table, records, [options], callback)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#inserttable",children:"insertTable(tableName, columns, [options], callback)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#modifytable",children:"modifyTable(tableName, columns, [options], callback)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#sql",children:"sql(sqlQuery, [options], callback)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#upsert",children:"upsert(table, uuid, record, [options], callback)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#upsertif",children:"upsertIf(logical, table, uuid, record, [options], callback)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#upsertmany",children:"upsertMany(table, uuid, data, [options], callback)"})})]}),"\n",(0,r.jsx)(t.p,{children:"This adaptor exports the following from common:"}),"\n",(0,r.jsxs)("dl",{children:[(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#alterstate",children:"alterState()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#arraytostring",children:"arrayToString()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#as",children:"as()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#combine",children:"combine()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#datapath",children:"dataPath()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#datavalue",children:"dataValue()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#datefns",children:"dateFns"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#each",children:"each()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#field",children:"field()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#fields",children:"fields()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#fn",children:"fn()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#fnif",children:"fnIf()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#group",children:"group()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#lastreferencevalue",children:"lastReferenceValue()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#merge",children:"merge()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#sourcevalue",children:"sourceValue()"})})]}),"\n",(0,r.jsx)(t.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(t.h3,{id:"describetable",children:"describeTable"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"describeTable(tableName, [options], callback) \u21d2 Operation"})}),"\n",(0,r.jsx)(t.p,{children:"List the columns of a table in a database."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"tableName"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The name of the table to describe"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"Optional options argument"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.writeSql]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.execute]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to execute the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"callback"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"function"})}),(0,r.jsx)(t.td,{children:"(Optional) callback function"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Example"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"describeTable('clinic_visits')\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"findvalue",children:"findValue"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"findValue([filter]) \u21d2 value"})}),"\n",(0,r.jsx)(t.p,{children:"Fetch a uuid key given a condition"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[filter]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"A filter object with the lookup table, a uuid and the condition"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[filter.uuid]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The uuid value to search for in the specified relation."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[filter.relation]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The name of the relation to search for the uuid value."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[filter.where]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"An object that contains key-value pairs to filter the search results."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[filter.operator]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"An object that contains key-value pairs to specify the type of comparison to perform on the where clause."})]})]})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Example"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"findValue({\n   uuid: 'id',\n   relation: 'users',\n   where: { first_name: 'Mamadou' },\n   operator: { first_name: 'like' }\n })\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"insert",children:"insert"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"insert(table, record, [options], callback) \u21d2 Operation"})}),"\n",(0,r.jsx)(t.p,{children:"Insert a record"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"table"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The target table"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"record"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"Payload data for the record as a JS object or function"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"Optional options argument"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.setNull]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"A string value that specifies the behavior for inserting null values."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.logValues]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the inserted values to the console. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.writeSql]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.execute]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to execute the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"callback"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"function"})}),(0,r.jsx)(t.td,{children:"(Optional) callback function"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Example"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"insert('users', { name: 'Elodie', id: 7 }, { setNull: \"'NaN'\", logValues: true });\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"insertmany",children:"insertMany"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"insertMany(table, records, [options], callback) \u21d2 Operation"})}),"\n",(0,r.jsx)(t.p,{children:"Insert many records, using the keys of the first as the column template"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"table"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The target table"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"records"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"array"})}),(0,r.jsx)(t.td,{children:"An array or a function that takes state and returns an array"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"Optional options argument"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.setNull]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"A string value that specifies the behavior for inserting null values."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.logValues]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the inserted values to the console. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.writeSql]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.execute]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to execute the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"callback"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"function"})}),(0,r.jsx)(t.td,{children:"(Optional) callback function"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Example"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"insertMany('users', state => state.data.recordArray, { setNull: \"'undefined'\", logValues: true });\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"inserttable",children:"insertTable"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"insertTable(tableName, columns, [options], callback) \u21d2 Operation"})}),"\n",(0,r.jsx)(t.p,{children:"Create a table in database when given an array of columns and a table_name."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"tableName"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The name of the table to create"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"columns"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"array"})}),(0,r.jsx)(t.td,{children:"An array of form columns"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"Optional options argument"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.writeSql]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.execute]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to execute the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"callback"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"function"})}),(0,r.jsx)(t.td,{children:"(Optional) callback function"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Example"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"insertTable('table_name', state => state.data.map(\n  column => ({\n    name: column.name,\n    type: column.type,\n    required: true, // optional\n    unique: false, // optional - to be set to true for unique constraint\n  })\n));\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"modifytable",children:"modifyTable"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"modifyTable(tableName, columns, [options], callback) \u21d2 Operation"})}),"\n",(0,r.jsx)(t.p,{children:"Alter an existing table in the database."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"tableName"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The name of the table to alter"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"columns"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"array"})}),(0,r.jsx)(t.td,{children:"An array of form columns"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"Optional options argument"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.writeSql]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.execute]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to execute the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"callback"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"function"})}),(0,r.jsx)(t.td,{children:"(Optional) callback function"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Example"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"modifyTable('table_name', state => state.data.map(\n  newColumn => ({\n    name: newColumn.name,\n    type: newColumn.type,\n    required: true, // optional\n    unique: false, // optional - to be set to true for unique constraint\n  })\n));\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"sql",children:"sql"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"sql(sqlQuery, [options], callback) \u21d2 Operation"})}),"\n",(0,r.jsx)(t.p,{children:"Execute an SQL statement"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"sqlQuery"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The SQL query as a string."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"Optional options argument"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.writeSql]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.execute]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to execute the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"callback"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"function"})}),(0,r.jsx)(t.td,{children:"(Optional) callback function"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Example"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"sql(state => `select(*) from ${state.data.tableName};`, { writeSql: true })\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"upsert",children:"upsert"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"upsert(table, uuid, record, [options], callback) \u21d2 Operation"})}),"\n",(0,r.jsx)(t.p,{children:"Insert or update a record using ON CONFLICT UPDATE"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"table"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The target table"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"uuid"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The uuid column to determine a matching/existing record"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"record"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"Payload data for the record as a JS object or function"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"Optional options argument"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.setNull]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"A string value that specifies the behavior for inserting null values."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.writeSql]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.execute]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to execute the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.logValues]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the inserted values to the console. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"callback"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"function"})}),(0,r.jsx)(t.td,{children:"(Optional) callback function"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Example"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"upsert(\n  'users', // the DB table\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\n  { name: 'Elodie', id: 7 },\n  { setNull: [\"''\", \"'undefined'\"], writeSql:true, execute: true, logValues: true }\n)\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"upsertif",children:"upsertIf"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"upsertIf(logical, table, uuid, record, [options], callback) \u21d2 Operation"})}),"\n",(0,r.jsx)(t.p,{children:"Insert or update a record based on a logical condition using ON CONFLICT UPDATE"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"logical"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"a data to check existing value for."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"table"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The target table"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"uuid"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The uuid column to determine a matching/existing record"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"record"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"Payload data for the record as a JS object or function"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"Optional options argument"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.setNull]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"A string value that specifies the behavior for inserting null values."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.writeSql]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.execute]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to execute the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.logValues]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the inserted values to the console. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"callback"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"function"})}),(0,r.jsx)(t.td,{children:"(Optional) callback function"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Example"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"upsertIf(\n  dataValue('name'),\n  'users', // the DB table\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\n  { name: 'Elodie', id: 7 },\n  { writeSql:true, execute: true }\n)\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"upsertmany",children:"upsertMany"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"upsertMany(table, uuid, data, [options], callback) \u21d2 Operation"})}),"\n",(0,r.jsx)(t.p,{children:"Insert or update multiple records using ON CONFLICT UPDATE and excluded"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Param"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"table"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The target table"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"uuid"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"The uuid column to determine a matching/existing record"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"data"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"array"})}),(0,r.jsx)(t.td,{children:"An array of objects or a function that returns an array"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(t.td,{children:"Optional options argument"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.setNull]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(t.td,{children:"A string value that specifies the behavior for inserting null values."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.writeSql]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.execute]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to execute the generated SQL statement. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"[options.logValues]"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"boolean"})}),(0,r.jsx)(t.td,{children:"A boolean value that specifies whether to log the inserted values to the console. Defaults to false."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"callback"}),(0,r.jsx)(t.td,{children:(0,r.jsx)("code",{children:"function"})}),(0,r.jsx)(t.td,{children:"(Optional) callback function"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Example"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"upsertMany(\n  'users', // the DB table\n  'email', // a DB column with a unique constraint OR a CONSTRAINT NAME\n  [\n    { name: 'one', email: 'one@openfn.org' },\n    { name: 'two', email: 'two@openfn.org' },\n  ]\n { logValues: true }\n)\n"})}),"\n",(0,r.jsx)(t.hr,{})]})}function o(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>i});var n=s(96540);const r={},d=n.createContext(r);function l(e){const t=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(d.Provider,{value:t},e.children)}}}]);