"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[27098],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(96540);const a={},o=s.createContext(a);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},77301:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"packages/sftp-readme","title":"sftp developer readme","description":"Source//github.com/OpenFn/adaptors/tree/main/packages/sftp","source":"@site/adaptors/packages/sftp-readme.md","sourceDirName":"packages","slug":"/packages/sftp-readme","permalink":"/adaptors/packages/sftp-readme","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"sftp developer readme","id":"sftp-readme","keywords":["adaptor","readme","sftp"]},"sidebar":"adaptors","previous":{"title":"Changelog","permalink":"/adaptors/packages/sftp-changelog"},"next":{"title":"Overview","permalink":"/adaptors/stripe"}}');var a=t(74848),o=t(28453);const r={title:"sftp developer readme",id:"sftp-readme",keywords:["adaptor","readme","sftp"]},i="sftp Adaptor developer README.md",l={},d=[{value:"Documentation",id:"documentation",level:2},{value:"Configuration",id:"configuration",level:3},{value:"List the content of a directory",id:"list-the-content-of-a-directory",level:2},{value:"sample getCSV expression",id:"sample-getcsv-expression",level:2},{value:"sample putCSV expression",id:"sample-putcsv-expression",level:2},{value:"Get JSON from FTP server",id:"get-json-from-ftp-server",level:3},{value:"Custom request to an http endpoint",id:"custom-request-to-an-http-endpoint",level:3},{value:"Development",id:"development",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"sftp-adaptor-developer-readmemd",children:"sftp Adaptor developer README.md"})}),"\n",(0,a.jsxs)(n.p,{children:["Source: ",(0,a.jsx)(n.a,{href:"https://github.com/OpenFn/adaptors/tree/main/packages/sftp",children:"https://github.com/OpenFn/adaptors/tree/main/packages/sftp"})]}),"\n",(0,a.jsx)(n.h1,{id:"language-sftp",children:"Language SFTP"}),"\n",(0,a.jsx)(n.p,{children:"Language Pack for building expressions and operations to work with SFTP servers."}),"\n",(0,a.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,a.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsxs)(n.p,{children:["View all the required and optional properties for ",(0,a.jsx)(n.code,{children:"state.configuration"})," in the\nofficial\n",(0,a.jsx)(n.a,{href:"https://docs.openfn.org/adaptors/packages/sftp-configuration-schema/",children:"configuration-schema"}),"\ndefinition."]}),"\n",(0,a.jsx)(n.h2,{id:"list-the-content-of-a-directory",children:"List the content of a directory"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"alterState(state => {\n  return list('/path/To/Directory')(state).then(response => {\n    console.log(`There are ${response.data.length} files.`);\n    return response;\n  });\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"sample-getcsv-expression",children:"sample getCSV expression"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"getCSV('path/to/file.csv', 'utf8', {\n  quote: 'off',\n  delimiter: ';',\n  noheader: true,\n  filter: {\n    type: 'startsWith',\n    key: 'field1',\n    value: 'JO',\n  },\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:"A more complex example that breaks up the CSV file into multiple payloads for\nquicker processing."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"fn(state => {\n  return list('/')(state).then(state => {\n    const targetNames = [\n      'exportContacts', //example fileName\n    ];\n    console.log(`Fetching files: ${targetNames}`);\n    const files = state.data\n      .filter(file => file.name.split('.')[1] === 'csv')\n      .filter(file =>\n        targetNames.some(targetName =>\n          file.name.toLowerCase().includes(targetName)\n        )\n      );\n\n    if (files.length === 0) console.log('No new CSV files found.');\n    return { ...state, data: {}, files };\n  });\n});\n\neach(\n  '$.files[*]',\n  fn(state => {\n    const { configuration, data } = state;\n\n    return getCSV(`/${data.name}`)(state).then(async state => {\n      const headers = state.data\n        .shift()\n        .split(';')\n        .map(h => (h = h.replace(/\"/g, '')));\n\n      function toObject(item) {\n        const values = item.split(';');\n\n        return Object.fromEntries(\n          headers.map((k, i) => {\n            return values[i]\n              ? [k, values[i].replace(/\"/g, '')]\n              : [k, values[i]];\n          })\n        );\n      }\n\n      let countInbox = 0;\n\n      //to post CSV data as individual Messages to OpenFn Inbox\n      const postToInbox = async data => {\n        countInbox++;\n\n        console.log(`Sending request ${countInbox} to inbox`);\n\n        await new Promise(resolve => setTimeout(resolve, 200));\n\n        await http.post({\n          url: configuration.openfnInboxUrl,\n          data: data,\n          maxContentLength: Infinity,\n          maxBodyLength: Infinity,\n        })(state);\n      };\n\n      //To split up into multiple, smaller payloads before send to OpenFn Inbox\n      const chunkSize = 500;\n\n      console.log(\n        state.data.length,\n        'rows will be sent in',\n        Math.ceil(state.data.length / chunkSize),\n        'requests of',\n        chunkSize,\n        'rows each.'\n      );\n\n      while (state.data.length > 0) {\n        console.log('data.length', state.data.length);\n        await postToInbox({\n          fileName: data.name,\n          fileType: data.name.split('-')[0],\n          uploadDate: new Date(data.modifyTime).toISOString(),\n          json: state.data.splice(0, chunkSize).map(toObject),\n        });\n      }\n\n      return { configuration, references: [], data: {} };\n    });\n  })\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"sample-putcsv-expression",children:"sample putCSV expression"}),"\n",(0,a.jsx)(n.p,{children:"This function converts JSON to CSV and post to a server"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"putCSV('/some/path/to_file.csv', 'utf8', { delimiter: ';', noheader: true });\n"})}),"\n",(0,a.jsx)(n.h3,{id:"get-json-from-ftp-server",children:"Get JSON from FTP server"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"getJSON('path/to/file.json', 'utf8');\n"})}),"\n",(0,a.jsx)(n.h3,{id:"custom-request-to-an-http-endpoint",children:"Custom request to an http endpoint"}),"\n",(0,a.jsxs)(n.p,{children:["This adaptor exports ",(0,a.jsx)(n.code,{children:"http"})," from ",(0,a.jsx)(n.code,{children:"language-common"}),". Here, we outline the usage\nin order to make custom requests to an endpoint. It returns a promise"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"alterState(state => {\n  return http\n    .post({ url: 'yourURL', data: { name: 'Mamadou' } })(state)\n    .then(response => {\n      // do something with response;\n      return response;\n    });\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"development",children:"Development"}),"\n",(0,a.jsxs)(n.p,{children:["Clone the repo, run ",(0,a.jsx)(n.code,{children:"pnpm install"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Run tests using ",(0,a.jsx)(n.code,{children:"pnpm run test"})," or ",(0,a.jsx)(n.code,{children:"pnpm run test:watch"})]}),"\n",(0,a.jsxs)(n.p,{children:["Build the project using ",(0,a.jsx)(n.code,{children:"pnpm build"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["To build the docs for this repo, ",(0,a.jsx)(n.code,{children:"pnpm build docs"})]})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);