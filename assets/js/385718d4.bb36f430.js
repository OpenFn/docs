"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[72969],{91152:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var t=a(58168),r=(a(96540),a(15680));const s={title:"mssql developer readme",id:"mssql-readme",keywords:["adaptor","readme","mssql"]},l="mssql Adaptor developer README.md",o={unversionedId:"packages/mssql-readme",id:"packages/mssql-readme",title:"mssql developer readme",description:"Source//github.com/OpenFn/adaptors/tree/main/packages/mssql",source:"@site/adaptors/packages/mssql-readme.md",sourceDirName:"packages",slug:"/packages/mssql-readme",permalink:"/adaptors/packages/mssql-readme",draft:!1,tags:[],version:"current",frontMatter:{title:"mssql developer readme",id:"mssql-readme",keywords:["adaptor","readme","mssql"]},sidebar:"adaptors",previous:{title:"mssql changelog",permalink:"/adaptors/packages/mssql-changelog"},next:{title:"mysql@2.0.5",permalink:"/adaptors/packages/mysql-docs"}},i={},u=[{value:"Documentation",id:"documentation",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Sample expression",id:"sample-expression",level:3},{value:"sql query",id:"sql-query",level:2},{value:"Find a single value for a table",id:"find-a-single-value-for-a-table",level:2},{value:"Insert one single record",id:"insert-one-single-record",level:2},{value:"Insert or Update using a unique column as a key",id:"insert-or-update-using-a-unique-column-as-a-key",level:2},{value:"Insert or Update if a value exist in the record",id:"insert-or-update-if-a-value-exist-in-the-record",level:2},{value:"Insert Many records",id:"insert-many-records",level:2},{value:"Insert or Update Many records",id:"insert-or-update-many-records",level:2},{value:"Describe a table from mssql",id:"describe-a-table-from-mssql",level:2},{value:"Create a table in the database",id:"create-a-table-in-the-database",level:2},{value:"Alter a table in the database",id:"alter-a-table-in-the-database",level:2},{value:"Development",id:"development",level:2}],p={toc:u},d="wrapper";function c(e){let{components:n,...a}=e;return(0,r.yg)(d,(0,t.A)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"mssql-adaptor-developer-readmemd"},"mssql Adaptor developer README.md"),(0,r.yg)("p",null,"Source: ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/OpenFn/adaptors/tree/main/packages/mssql"},"https://github.com/OpenFn/adaptors/tree/main/packages/mssql")),(0,r.yg)("h1",{id:"language-mssql"},"Language MSSQL"),(0,r.yg)("p",null,"Language Pack for connecting to Azure SQL Server via OpenFn."),(0,r.yg)("h2",{id:"documentation"},"Documentation"),(0,r.yg)("h3",{id:"configuration"},"Configuration"),(0,r.yg)("p",null,"View all the required and optional properties for ",(0,r.yg)("inlineCode",{parentName:"p"},"state.configuration")," in the\nofficial\n",(0,r.yg)("a",{parentName:"p",href:"https://docs.openfn.org/adaptors/packages/mssql-configuration-schema/"},"configuration-schema"),"\ndefinition."),(0,r.yg)("h3",{id:"sample-expression"},"Sample expression"),(0,r.yg)("h2",{id:"sql-query"},"sql query"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"sql({\n  query: `\n    SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\n    WHERE TABLE_TYPE = 'BASE TABLE'\n    AND TABLE_CATALOG='my-demo'\n  `,\n});\n\nsql({\n  query: `SELECT * FROM Household`,\n  options: {\n    writeSql: true, // Keep to true to log query (otherwise make it false).\n    execute: true, // keep to false to not alter DB\n  },\n});\n")),(0,r.yg)("h2",{id:"find-a-single-value-for-a-table"},"Find a single value for a table"),(0,r.yg)("p",null,"This helper function allows to build a specific query where ",(0,r.yg)("inlineCode",{parentName:"p"},"sql")," would not be\nbest suited. It returns a single value and not a promise. An example of usage\nwould be in building a mapping object with a value from a lookup table."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"fn(async state => {\n  const user = {\n    id: 1,\n    name: 'Mamadou',\n    user_id: await findValue({\n      uuid: 'id',\n      relation: 'users',\n      where: { first_name: 'Mama%' },\n      operator: { first_name: 'like' }, // operator is optional. \"=\" is used by default.\n    })(state),\n  };\n\n  return upsert(...)(state);\n});\n")),(0,r.yg)("h2",{id:"insert-one-single-record"},"Insert one single record"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"insert(\n  'SomeDB.dbo.SupplierTest',\n  {\n    SupplierNumber: 1,\n    Name: dataValue('name'),\n    Address: 'Nunya Bihz-Nash',\n  },\n  {\n    // The optional `options` argument allows for global string replacement with\n    // NULL. This is useful if you want to map an undefined value (e.g., x.name)\n    // to NULL. It can be a single string or an array of strings.\n    // It DEFAULTS to \"'undefined'\", and can be turned off w/ `false`.\n    setNull: \"'undefined'\",\n    logValues: true,\n  }\n);\n")),(0,r.yg)("h2",{id:"insert-or-update-using-a-unique-column-as-a-key"},"Insert or Update using a unique column as a key"),(0,r.yg)("p",null,"This function insert or update depending on the existence of a record in the\ndatabase."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"upsert(\n  'SomeDB.dbo.Supplier',\n  'SupplierNumber',\n  {\n    SupplierNumber: 1,\n    Name: dataValue('name'),\n    Address: 'Now I can tell!',\n  },\n  // Do NOT replace any instances of 'undefined' in the final SQL statement.\n  { setNull: false, logValues: true }\n);\n")),(0,r.yg)("h2",{id:"insert-or-update-if-a-value-exist-in-the-record"},"Insert or Update if a value exist in the record"),(0,r.yg)("p",null,"This function will upsert a record only if the logical given is true. In this\ncase we check if ",(0,r.yg)("inlineCode",{parentName:"p"},"dataValue('name')")," exists."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"upsertIf(\n  dataValue('name'),\n  'users',\n  'user_id',\n  {\n    name: 'Elodie',\n    id: 7,\n  },\n  // Replace any occurence of '' and 'undefined' to NULL\n  {\n    setNull: [\"''\", \"'undefined'\"],\n    writeSql: true,\n    execute: false,\n    logValues: true,\n  }\n);\n")),(0,r.yg)("h2",{id:"insert-many-records"},"Insert Many records"),(0,r.yg)("p",null,"This function allows the insert of a set of records inside a table all at once.\nPass ",(0,r.yg)("inlineCode",{parentName:"p"},"logQuery")," option to ",(0,r.yg)("inlineCode",{parentName:"p"},"true")," to display the query."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"// Note that insertMany takes a function which returns an array\u2014this helps\n// enforce that each item in the array has the same keys.\ninsertMany(\n  'SomeDB.dbo.Supplier',\n  state =>\n    state.data.supplierArray.map(s => {\n      return {\n        SupplierNumber: s.id,\n        Name: s.name,\n        Address: s.address,\n      };\n    }),\n  { writeSql: true, logValues: true }\n);\n")),(0,r.yg)("h2",{id:"insert-or-update-many-records"},"Insert or Update Many records"),(0,r.yg)("p",null,"This function inserts or updates many records all at once depending on their\nexistence in the database."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"// Note that insertMany takes a function which returns an array\u2014this helps\n// enforce that each item in the array has the same keys.\nupsertMany(\n  'SomeDB.dbo.Supplier',\n  'SupplierNumber',\n  state =>\n    state.data.supplierArray.map(s => {\n      return {\n        SupplierNumber: s.id,\n        Name: s.name,\n        Address: s.address,\n      };\n    }),\n  { writeSql: true, execute: false, logValues: true }\n);\n")),(0,r.yg)("p",null,"In case we need to check on multiple columns before upserting, we can have an\narray of ",(0,r.yg)("inlineCode",{parentName:"p"},"uuids"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"upsertMany(\n  'SomeDB.dbo.Supplier',\n  ['SupplierNumber', 'SupplierCode'],\n  state =>\n    state.data.supplierArray.map(s => {\n      return {\n        SupplierNumber: s.id,\n        Name: s.name,\n        Address: s.address,\n        SupplierCode: s.code,\n      };\n    }),\n  { writeSql: true, execute: false, logValues: true }\n);\n")),(0,r.yg)("h2",{id:"describe-a-table-from-mssql"},"Describe a table from mssql"),(0,r.yg)("p",null,"This function is used to fetch the list of columns of a given table in the\ndatabase."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"describeTable('users', { writeSql: false, execute: true });\n")),(0,r.yg)("h2",{id:"create-a-table-in-the-database"},"Create a table in the database"),(0,r.yg)("p",null,"This function allows to create a table in a database from a given array of\ncolumns. The key ",(0,r.yg)("inlineCode",{parentName:"p"},"identity")," can be use for a column to auto-generate a value."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"insertTable('users', state =>\n  state.data.map(column => ({\n    name: column.name,\n    type: column.type,\n    required: true, // optional\n    unique: false, // optional - set to true for unique constraint\n  }))\n);\n")),(0,r.yg)("h2",{id:"alter-a-table-in-the-database"},"Alter a table in the database"),(0,r.yg)("p",null,"This function allows to add new columns to a table. Beware of the fact that you\ncannot add new columns with names that already exist in the table."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"modifyTable(\n  'users',\n  state =>\n    state.data.map(newColumn => ({\n      name: newColumn.name,\n      type: newColumn.type,\n      required: true, // optional\n      unique: false, // optional - set to true for unique constraint\n    })),\n  { writeSql: false, execute: true }\n);\n")),(0,r.yg)("h2",{id:"development"},"Development"),(0,r.yg)("p",null,"Clone the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/OpenFn/adaptors"},"adaptors monorepo"),". Follow the\n",(0,r.yg)("inlineCode",{parentName:"p"},"Getting Started")," guide inside to get set up."),(0,r.yg)("p",null,"Run tests using ",(0,r.yg)("inlineCode",{parentName:"p"},"pnpm run test")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"pnpm run test:watch")),(0,r.yg)("p",null,"Build the project using ",(0,r.yg)("inlineCode",{parentName:"p"},"pnpm build"),"."),(0,r.yg)("p",null,"To just build the docs run ",(0,r.yg)("inlineCode",{parentName:"p"},"pnpm build docs")))}c.isMDXComponent=!0},15680:(e,n,a)=>{a.d(n,{xA:()=>p,yg:()=>g});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=t.createContext({}),u=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},p=function(e){var n=u(e.components);return t.createElement(i.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(a),m=r,g=d["".concat(i,".").concat(m)]||d[m]||c[m]||s;return a?t.createElement(g,l(l({ref:n},p),{},{components:a})):t.createElement(g,l({ref:n},p))}));function g(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=m;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<s;u++)l[u]=a[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);