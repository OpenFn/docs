"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[64678],{16981:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/data-element-mapping-3d88dbb0716af7d57c3e19c6c65eb336.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(96540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},65413:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"jobs/job-design-intro","title":"Designing a job","description":"A job defines the specific series of tasks or database actions to be performed","source":"@site/versioned_docs/version-legacy/jobs/job-design-intro.md","sourceDirName":"jobs","slug":"/jobs/job-design-intro","permalink":"/documentation/legacy/jobs/job-design-intro","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/versioned_docs/version-legacy/jobs/job-design-intro.md","tags":[],"version":"legacy","frontMatter":{"title":"Designing a job"},"sidebar":"docs","previous":{"title":"Introduction to Jobs","permalink":"/documentation/legacy/build/jobs"},"next":{"title":"A closer look at jobs","permalink":"/documentation/legacy/jobs/understanding"}}');var a=t(74848),i=t(28453);const o={title:"Designing a job"},r=void 0,d={},l=[];function c(e){const n={a:"a",code:"code",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"A job defines the specific series of tasks or database actions to be performed\nwhen a triggering message is received (even-based) or a pre-scheduled (and\nrecurring) time is reached. It's the series of instructions for handling the\ndata coming from a source system and to be sent to the destination system, or in\nother words, mapping data elements from one system to the other."}),"\n",(0,a.jsxs)(n.p,{children:["Designing a job really just means clearly defining the \u201crules\u201d for data element\nmapping. We'll walk through the main steps using Kobo Toolbox as an example\nsource system and a Postgres database as destination but check out the ",(0,a.jsx)(n.a,{href:"/documentation/legacy/design/design-quickstart",children:"integration design"})," page for more details on data flow diagrams and mappings."]}),"\n",(0,a.jsx)(n.p,{children:"Step 1: Map your data flows"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Define your input(s). What data collection forms are used to collect data?\nHow many forms? Are there different form versions?"}),"\n",(0,a.jsx)(n.li,{children:"Define your output(s). Where should the data be stored? In what format? What\nare your analysis requirements?"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Step 2: Map your data elements"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Export the metadata of your form (input) & destination DB (output)."}),"\n",(0,a.jsx)(n.li,{children:"Paste the metadata into an Excel spreadsheet to create a mapping sheet:"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Sample mapping sheet",src:t(16981).A+"",width:"1838",height:"448"})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"Map data elements & define rules for data cleaning and transformation a. How\nshould the data collected be translated into your destination system\u2019s data\nmodel?\xa0 b. Does your destination system have data input & validation\nrequirements?"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Step 3. Define your operations: insert, update, upsert..."}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Find out or create the unique identifiers you will use to insert and update\ndata (form ID, answer ID, or, case or patient ID etc.)."}),"\n",(0,a.jsx)(n.li,{children:"Determine operations: e.g. insert, update, upsert, upsertMany"}),"\n",(0,a.jsxs)(n.li,{children:["Check the adaptor for helper functions. a. Example from\n",(0,a.jsx)(n.a,{href:"https://github.com/OpenFn/language-postgresql",children:"language-postgresql"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"insert(...)"}),", ",(0,a.jsx)(n.code,{children:"insertMany(...)"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"update(...)"}),", ",(0,a.jsx)(n.code,{children:"updateMany(...)"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"upsert(...)"}),", ",(0,a.jsx)(n.code,{children:"upsertMany(...)"})," \xa0\u2192 update if record exists or insert if it\ndoesn\u2019t; references an external Id b. Example from\n",(0,a.jsx)(n.a,{href:"https://github.com/OpenFn/language-dhis2",children:"language-dhis2"})," using Tracked\nEntity Instances (TEI)"]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"updateTEI(...)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"upsertTEI(...)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Example upsert job:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"upsert('mainDataTable', 'AnswerId', {\n\xa0 AnswerId: dataValue('\\_id'), //external Id for upsert\n\xa0\xa0column: dataValue('firstQuestion)'),\n\xa0\xa0LastUpdate: new Date().toISOString(),\n\xa0\xa0Participant: dataValue('participant'),\n\xa0\xa0Surveyor: dataValue('surveyor'),\n\xa0\xa0...\n});\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);