"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[11845],{73595:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(58168),t=(r(96540),r(15680));const o={title:"Pre-processing data",sidebar_label:"\ud83d\udcdc Pre-processing data",id:"alter-state-before-operations",keywords:["library","job","expression","salesforce","dataPath","dataValue","each","field","fields","merge","relationship","upsert","Array"]},i=void 0,l={unversionedId:"library/jobs/auto/alter-state-before-operations",id:"library/jobs/auto/alter-state-before-operations",title:"Pre-processing data",description:"\ud83d\udcdc This job is an official example from OpenFn.",source:"@site/adaptors/library/jobs/auto/alter-state-before-operations.md",sourceDirName:"library/jobs/auto",slug:"/library/jobs/auto/alter-state-before-operations",permalink:"/adaptors/library/jobs/auto/alter-state-before-operations",draft:!1,tags:[],version:"current",frontMatter:{title:"Pre-processing data",sidebar_label:"\ud83d\udcdc Pre-processing data",id:"alter-state-before-operations",keywords:["library","job","expression","salesforce","dataPath","dataValue","each","field","fields","merge","relationship","upsert","Array"]},sidebar:"adaptors",previous:{title:"Config for salesforce",permalink:"/adaptors/packages/salesforce-configuration-schema"},next:{title:"\ud83d\udcdc Using merge and each",permalink:"/adaptors/library/jobs/auto/bring-formId-into-data-array-then-create-parent-and-children-in-salesforce"}},s={},p=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}],d={toc:p},c="wrapper";function u(e){let{components:a,...r}=e;return(0,t.yg)(c,(0,n.A)({},d,r,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("p",null,"\ud83d\udcdc ",(0,t.yg)("em",null,"This job is an official example from OpenFn.")),(0,t.yg)("h2",{id:"metadata"},"Metadata"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Name: Pre-processing data"),(0,t.yg)("li",{parentName:"ul"},"Adaptor: ",(0,t.yg)("a",{parentName:"li",href:"https://www.github.com/openfn/language-salesforce"},(0,t.yg)("inlineCode",{parentName:"a"},"@openfn/language-salesforce"))),(0,t.yg)("li",{parentName:"ul"},"Adaptor Version: ",(0,t.yg)("a",{parentName:"li",href:"https://www.github.com/openfn/language-salesforce"},(0,t.yg)("inlineCode",{parentName:"a"},"latest"))),(0,t.yg)("li",{parentName:"ul"},"Created date unknown"),(0,t.yg)("li",{parentName:"ul"},"Updated date unknown"),(0,t.yg)("li",{parentName:"ul"},"Score: ",(0,t.yg)("b",null,"100")," (an ",(0,t.yg)("a",{parentName:"li",href:"/adaptors/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,t.yg)("h2",{id:"key-functions"},"Key Functions"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"dataPath"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"dataValue"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"each"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"field"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"fields"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"merge"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"relationship"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"upsert"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"Array")),(0,t.yg)("h2",{id:"expression"},"Expression"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-js"},"// Here, we make sure CommCare gives us an array to use in each(merge(...), ...)\nfn(state => {\n  const idCards = state.data.form.ID_cards_given_to_vendor;\n  if (!Array.isArray(idCards)) {\n    state.data.form.ID_cards_given_to_vendor = [idCards];\n  }\n  return state;\n});\n\n// Now state has been changed, and we carry on...\neach(\n  merge(\n    dataPath('form.ID_cards_given_to_vendor[*]'),\n    fields(\n      field('Vendor_Id', dataValue('form.ID_vendor')),\n      field('form_finished_time', dataValue('form.meta.timeEnd'))\n    )\n  ),\n  upsert(\n    'Small_Packet__c',\n    'sp_id__c',\n    fields(\n      field('sp_id__c', dataValue('ID_cards_given_to_vendor')),\n      relationship('Vendor__r', 'Badge_Code__c', dataValue('Vendor_Id')),\n      field(\n        'Small_Packet_Distribution_Date__c',\n        dataValue('form_finished_time')\n      )\n    )\n  )\n);\n\n")))}u.isMDXComponent=!0},15680:(e,a,r)=>{r.d(a,{xA:()=>d,yg:()=>y});var n=r(96540);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function o(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?o(Object(r),!0).forEach((function(a){t(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function l(e,a){if(null==e)return{};var r,n,t=function(e,a){if(null==e)return{};var r,n,t={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var s=n.createContext({}),p=function(e){var a=n.useContext(s),r=a;return e&&(r="function"==typeof e?e(a):i(i({},a),e)),r},d=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},f=n.forwardRef((function(e,a){var r=e.components,t=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(r),f=t,y=c["".concat(s,".").concat(f)]||c[f]||u[f]||o;return r?n.createElement(y,i(i({ref:a},d),{},{components:r})):n.createElement(y,i({ref:a},d))}));function y(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=r.length,i=new Array(o);i[0]=f;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[c]="string"==typeof e?e:t,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"}}]);