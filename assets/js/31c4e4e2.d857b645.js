"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[81820],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var a=t(96540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}},84085:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"jobs/job-snippets","title":"Code Snippets","description":"This section includes a number of useful JavaScript code snippets which you can","source":"@site/docs/jobs/job-snippets.md","sourceDirName":"jobs","slug":"/jobs/job-snippets","permalink":"/documentation/jobs/job-snippets","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/docs/jobs/job-snippets.md","tags":[],"version":"current","frontMatter":{"title":"Code Snippets","sidebar_label":"Code Snippets"},"sidebar":"docs","previous":{"title":"Job Examples","permalink":"/documentation/jobs/job-examples"},"next":{"title":"Security considerations","permalink":"/documentation/security-for-devs"}}');var s=t(74848),i=t(28453);const r={title:"Code Snippets",sidebar_label:"Code Snippets"},l=void 0,o={},c=[{value:"General",id:"general",level:2},{value:"Custom replacer",id:"custom-replacer",level:3},{value:"Custom arrayToString",id:"custom-arraytostring",level:3},{value:"Custom concatenation",id:"custom-concatenation",level:3},{value:"Concatenation of null values",id:"concatenation-of-null-values",level:3},{value:"Custom Nth reference ID",id:"custom-nth-reference-id",level:3},{value:"Salesforce",id:"salesforce",level:2},{value:"Convert date string to standard ISO date for Salesforce",id:"convert-date-string-to-standard-iso-date-for-salesforce",level:3},{value:"Use external ID fields for relationships during a bulk load in Salesforce",id:"use-external-id-fields-for-relationships-during-a-bulk-load-in-salesforce",level:3},{value:"Bulk upsert with an external ID in Salesforce",id:"bulk-upsert-with-an-external-id-in-salesforce",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This section includes a number of useful JavaScript code snippets which you can\nuse in your jobs."}),"\n",(0,s.jsx)(n.p,{children:"Most snippets are implemented as callbacks to other operations."}),"\n",(0,s.jsx)(n.p,{children:"You can copy these callbacks and adapt them to suit your own code."}),"\n",(0,s.jsx)(n.h2,{id:"general",children:"General"}),"\n",(0,s.jsx)(n.h3,{id:"custom-replacer",children:"Custom replacer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"field('destination__c', state => {\n  return dataValue('path_to_data')(state).toString().replace('cats', 'dogs');\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:['This will replace all "cats" with "dogs" in the string that lives at\n',(0,s.jsx)(n.code,{children:"path_to_data"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE:"})," The JavaScript ",(0,s.jsx)(n.code,{children:"replace()"})," function only replaces the first instance\nof whatever argument you specify. If you're looking for a way to replace all\ninstances, we suggest you use a regex like we did in the\n",(0,s.jsx)(n.a,{href:"#concatenation-of-null-values",children:"example"})," below."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"custom-arraytostring",children:"Custom arrayToString"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'field("target_specie_list__c", function(state) {\n  return Array.apply(\n    null, sourceValue("$.data.target_specie_list")(state)\n  ).join(\', \')\n}),\n'})}),"\n",(0,s.jsx)(n.p,{children:'It will take an array, and concatenate each item into a string with a ", "\nseparator.'}),"\n",(0,s.jsx)(n.h3,{id:"custom-concatenation",children:"Custom concatenation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"field('ODK_Key__c', function (state) {\n  return dataValue('metaId')(state).concat('(', dataValue('index')(state), ')');\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will concatenate two values."}),"\n",(0,s.jsx)(n.h3,{id:"concatenation-of-null-values",children:"Concatenation of null values"}),"\n",(0,s.jsx)(n.p,{children:"This will concatenate many values, even if one or more are null, writing them to\na field called Main_Office_City_c."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'...\n  field("Main_Office_City__c", function(state) {\n    return arrayToString([\n      dataValue("Main_Office_City_a")(state) === null ? "" : dataValue("Main_Office_City_a")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_b")(state) === null ? "" : dataValue("Main_Office_City_b")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_c")(state) === null ? "" : dataValue("Main_Office_City_c")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_d")(state) === null ? "" : dataValue("Main_Office_City_d")(state).toString().replace(/-/g, " "),\n    ].filter(Boolean), \',\')\n  })\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Notice how this custom function makes use of the ",(0,s.jsx)(n.strong,{children:"regex"})," ",(0,s.jsx)(n.code,{children:"/-/g"})," to ensure\nthat all instances are accounted for (g = global search)."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"custom-nth-reference-id",children:"Custom Nth reference ID"}),"\n",(0,s.jsx)(n.p,{children:"If you ever want to retrieve the FIRST object you created, or the SECOND, or the\nNth, for that matter, a function like this will do the trick."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"field('parent__c', function (state) {\n  return state.references[state.references.length - 1].id;\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:'See how instead of taking the id of the "last" thing that was created in\nSalesforce, you\'re taking the id of the 1st thing, or 2nd thing if you replace\n"length-1" with "length-2".'}),"\n",(0,s.jsx)(n.h2,{id:"salesforce",children:"Salesforce"}),"\n",(0,s.jsx)(n.h3,{id:"convert-date-string-to-standard-iso-date-for-salesforce",children:"Convert date string to standard ISO date for Salesforce"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"field('Payment_Date__c', function (state) {\n  return new Date(dataValue('payment_date')(state)).toISOString();\n});\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE"}),": The output of this function will always be formatted according to\nGMT time-zone."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"use-external-id-fields-for-relationships-during-a-bulk-load-in-salesforce",children:"Use external ID fields for relationships during a bulk load in Salesforce"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"array.map(item => {\n  return {\n    Patient_Name__c: item.fullName,\n    'Account.Account_External_ID__c': item.account\n    'Clinic__r.Unique_Clinic_Identifier__c': item.clinicId,\n    'RecordType.Name': item.type,\n  };\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"bulk-upsert-with-an-external-id-in-salesforce",children:"Bulk upsert with an external ID in Salesforce"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"bulk(\n  'Visit_new__c',\n  'upsert',\n  {\n    extIdField: 'commcare_case_id__c',\n    failOnError: true,\n    allowNoOp: true,\n  },\n  dataValue('patients')\n);\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);