"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[11845],{28453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>i});var r=n(96540);const s={},t=r.createContext(s);function o(e){const a=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:a},e.children)}},75969:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"library/jobs/auto/alter-state-before-operations","title":"Pre-processing data","description":"\ud83d\udcdc This job is an official example from OpenFn.","source":"@site/adaptors/library/jobs/auto/alter-state-before-operations.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/alter-state-before-operations","permalink":"/adaptors/library/jobs/auto/alter-state-before-operations","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Pre-processing data","sidebar_label":"\ud83d\udcdc Pre-processing data","id":"alter-state-before-operations","keywords":["library","job","expression","salesforce","dataPath","dataValue","each","field","fields","merge","relationship","upsert","Array"]},"sidebar":"adaptors","previous":{"title":"Configuration","permalink":"/adaptors/packages/salesforce-configuration-schema"},"next":{"title":"\ud83d\udcdc Using merge and each","permalink":"/adaptors/library/jobs/auto/bring-formId-into-data-array-then-create-parent-and-children-in-salesforce"}}');var s=n(74848),t=n(28453);const o={title:"Pre-processing data",sidebar_label:"\ud83d\udcdc Pre-processing data",id:"alter-state-before-operations",keywords:["library","job","expression","salesforce","dataPath","dataValue","each","field","fields","merge","relationship","upsert","Array"]},i=void 0,d={},l=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function c(e){const a={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(a.p,{children:["\ud83d\udcdc ",(0,s.jsx)("em",{children:"This job is an official example from OpenFn."})]}),"\n",(0,s.jsx)(a.h2,{id:"metadata",children:"Metadata"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:"Name: Pre-processing data"}),"\n",(0,s.jsxs)(a.li,{children:["Adaptor: ",(0,s.jsx)(a.a,{href:"https://www.github.com/openfn/language-salesforce",children:(0,s.jsx)(a.code,{children:"@openfn/language-salesforce"})})]}),"\n",(0,s.jsxs)(a.li,{children:["Adaptor Version: ",(0,s.jsx)(a.a,{href:"https://www.github.com/openfn/language-salesforce",children:(0,s.jsx)(a.code,{children:"latest"})})]}),"\n",(0,s.jsx)(a.li,{children:"Created date unknown"}),"\n",(0,s.jsx)(a.li,{children:"Updated date unknown"}),"\n",(0,s.jsxs)(a.li,{children:["Score: ",(0,s.jsx)("b",{children:"100"})," (an ",(0,s.jsx)(a.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.code,{children:"dataPath"}),", ",(0,s.jsx)(a.code,{children:"dataValue"}),", ",(0,s.jsx)(a.code,{children:"each"}),", ",(0,s.jsx)(a.code,{children:"field"}),", ",(0,s.jsx)(a.code,{children:"fields"}),", ",(0,s.jsx)(a.code,{children:"merge"}),", ",(0,s.jsx)(a.code,{children:"relationship"}),", ",(0,s.jsx)(a.code,{children:"upsert"}),", ",(0,s.jsx)(a.code,{children:"Array"})]}),"\n",(0,s.jsx)(a.h2,{id:"expression",children:"Expression"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-js",children:"// Here, we make sure CommCare gives us an array to use in each(merge(...), ...)\nfn(state => {\n  const idCards = state.data.form.ID_cards_given_to_vendor;\n  if (!Array.isArray(idCards)) {\n    state.data.form.ID_cards_given_to_vendor = [idCards];\n  }\n  return state;\n});\n\n// Now state has been changed, and we carry on...\neach(\n  merge(\n    dataPath('form.ID_cards_given_to_vendor[*]'),\n    fields(\n      field('Vendor_Id', dataValue('form.ID_vendor')),\n      field('form_finished_time', dataValue('form.meta.timeEnd'))\n    )\n  ),\n  upsert(\n    'Small_Packet__c',\n    'sp_id__c',\n    fields(\n      field('sp_id__c', dataValue('ID_cards_given_to_vendor')),\n      relationship('Vendor__r', 'Badge_Code__c', dataValue('Vendor_Id')),\n      field(\n        'Small_Packet_Distribution_Date__c',\n        dataValue('form_finished_time')\n      )\n    )\n  )\n);\n\n"})})]})}function p(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);