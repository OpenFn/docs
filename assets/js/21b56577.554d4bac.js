"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[96998],{5637:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var s=t(11757),i=t(74848),r=t(28453);const o={layout:"post",title:"Testing a React app, the blurred line between Unit, integration and E2E",authors:"chaiwa",tags:["how-to","tips","testing","browser-testing","react","elixir"],featured:!0},a=void 0,l={authorsImageUrls:[void 0]},c=[{value:"The Blurred Line",id:"the-blurred-line",level:2},{value:"What did I learn?",id:"what-did-i-learn",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"End-to-End (e2e) Tests",id:"end-to-end-e2e-tests",level:3},{value:"Choosing Testing Tools",id:"choosing-testing-tools",level:2},{value:"Final thoughts and next steps",id:"final-thoughts-and-next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Have you ever struggled to layout the strategy for testing your React App? Well,\nyou are not alone! Here a few hints from the lessons I learned during my\nexperience testing a\n",(0,i.jsx)(n.a,{href:"https://reactjs.org/",children:"React"}),"/",(0,i.jsx)(n.a,{href:"https://redux.js.org/",children:"Redux"})," app with a\n",(0,i.jsx)(n.a,{href:"https://www.phoenixframework.org/",children:"Phoenix"}),"/",(0,i.jsx)(n.a,{href:"https://elixir-lang.org/",children:"Elixir"}),"\nbackend."]}),"\n",(0,i.jsx)(n.h2,{id:"the-blurred-line",children:"The Blurred Line"}),"\n",(0,i.jsxs)(n.p,{children:["Because a React app is built on\n",(0,i.jsx)(n.a,{href:"https://reactjs.org/docs/react-component.html",children:"components"}),', the basic UI units,\nit is natural to think and organise your tests around components! And so unit\ntesting, in this case, would refer to "component testing", which may be\nconfusing at times, especially when the concept of unit testing is again applied\nto testing functions such as Redux ',(0,i.jsx)(n.code,{children:"reducers"})," and ",(0,i.jsx)(n.code,{children:"action creators"})," or any other\nJavaScript function in your application."]}),"\n",(0,i.jsx)(n.p,{children:'The other challenge that I often faced was whether to write tests for each\ncomponent in isolation or write a test for a feature that encapsulates a set of\nrelated components. The later would be equivalent to writing what I would call\n"integration tests".'}),"\n",(0,i.jsxs)(n.p,{children:['Finally, one would say "well then you could have just written the tests in a way\nthat resemble the way the application is used"! This approach is commonly\nrecommended in the React community, but it quickly becomes really complex to\nmaintain the layers of separation between ',(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"unit tests"})}),", ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"integration\ntests"})})," and ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"end-to-end tests"})}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"what-did-i-learn",children:"What did I learn?"}),"\n",(0,i.jsx)(n.p,{children:"Given a React/Redux application, here is how I would organise my testing\nstrategy:"}),"\n",(0,i.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In a React app, ",(0,i.jsx)(n.strong,{children:"unit tests"}),' will largely apply to testing "helper\nfunctions" and not to testing components, as justified in the next section.\nHelper functions, in this case, would refer to functions that live outside the\ncomponents and are neither Redux action creators nor reducers. These functions\ncan be used inside components, action creators, reducers or other parts of\nyour application.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'Writing unit tests for "helper functions" would ensure their signatures and\nexpected outputs are protected against regressions. This would also ensure\ntheir use across components or other functions is consistent and as expected.'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:['Where possible, each "helper function" must have its own ',(0,i.jsx)(n.code,{children:"unit test"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"An example of a unit test would like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const sum = require('../../js/sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a ",(0,i.jsx)(n.em,{children:"thousand"})," of these."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In the context of a React/Redux app, component tests can be thought of as\n",(0,i.jsx)(n.strong,{children:"integration tests"}),". This is because React components are built around\nfeatures such as ",(0,i.jsx)(n.code,{children:"<Signup />"}),", ",(0,i.jsx)(n.code,{children:"<Search />"}),", etc. So one React component can\nbe a mix of other components to achieve a UI feature set."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["To test a component, write an ",(0,i.jsx)(n.strong,{children:"integration test"})," that covers the use of a\ngiven component for a given UI feature."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["If a component being tested dispatches a Redux ",(0,i.jsx)(n.code,{children:"action"}),", this is the right\nplace to test those actions and their effect on the UI."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Pay attention to the concept of ",(0,i.jsx)(n.em,{children:"feature isolation"})," vs ",(0,i.jsx)(n.em,{children:"component isolation"}),"\nas it will help you write better integration tests and also easily mock\ncomponent contexts."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["A classic example of ",(0,i.jsx)(n.strong,{children:"feature isolation"})," is when you have a ",(0,i.jsx)(n.code,{children:"<UserList />"}),"\ncomponent which displays a list of users and has a ",(0,i.jsx)(n.code,{children:"<button />"})," to add a new\nuser. Writing a test for ",(0,i.jsx)(n.code,{children:"<UserList />"})," would be equivalent to testing a\nfeature."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In this example, one would be tempted to test the action of clicking on the\n",(0,i.jsx)(n.code,{children:"<AddUserButton />"})," and further test the ",(0,i.jsx)(n.code,{children:"<NewUser />"})," form... nope! This is\nwhere we draw the line! Only test that the ",(0,i.jsx)(n.code,{children:"<UserList />"})," renders the mock\n",(0,i.jsx)(n.code,{children:"users"})," in the list and that the ",(0,i.jsx)(n.code,{children:"<AddUserButton />"})," is present/enabled. The\n",(0,i.jsx)(n.code,{children:"<UserList />"})," feature ends there, otherwise you will be sliding into\n",(0,i.jsx)(n.strong,{children:"End-to-End"})," testing :)! The ",(0,i.jsx)(n.code,{children:"<User />"})," component, although it is invoked by\n",(0,i.jsx)(n.code,{children:"<UserList />"})," component, it is isolated enough to be tested in its own\nintegration test."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'Testing components this way would make "context mocking" easier for\ncomponents.'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Another important benefit for isolating testing context, as in the example\nabove, is that it will be easier to mock the ",(0,i.jsx)(n.code,{children:"redux actions"})," and/or api calls\nusing tools such as ",(0,i.jsx)(n.a,{href:"https://jestjs.io/",children:"Jest"})," and\n",(0,i.jsx)(n.a,{href:"https://mswjs.io/",children:"Mock Service Worker"}),' (or "msw") as explained in the\n',(0,i.jsx)(n.a,{href:"#choosing-testing-tools",children:"Choosing Tools"})," section."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The value of writing integration tests for components, in this way, ensures\nthat a given component renders the UI consistently, given all possible\ncombinations of contexts and interactions. This will also allow you to ensure\nredux actions invoked by the component are called as expected and with the\ncorrect arguments."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"An example component integration test would look like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// ....other imports\nimport { setupServer } from 'msw/node';\n// Tell jest to mock the module\njest.mock('../js/actions/UserActions', () => ({\n  ...jest.requireActual('../js/actions/UserActions'),\n  saveUser: jest.fn(),\n}));\n\nimport { saveUser as mockSaveUser } from '../js/actions/UserActions';\nconst server = setupServer(...handlers);\n  // Enable API mocking before tests\n  beforeAll(() => server.listen());\n  // Reset any runtime handlers we may add during the tests\n  afterEach(() => server.resetHandlers());\n  // Disable API mocking after the tests are done.\n  afterAll(() => server.close());\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\ndescribe('<AddUser/>', () => {\n\ntest('create new user', async () => {\n    const {getByPlaceholderText,getByText} = render(<User {...defaultProps} />);\n    userEvent.type(getByPlaceholderText('First Name'), 'John');\n    userEvent.type(getByPlaceholderText('Last Name'), 'Doe');\n    userEvent.click(getByText('Save'));\n    expect(mockSaveUser).toHaveBeenCalledTimes(1);\n    expect(mockSaveUser).toHaveBeenCalledWith({\n      firstName: 'John',\n      lastName: 'Doe',\n    });\n}\n\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a ",(0,i.jsx)(n.em,{children:"good couple"})," of these."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"end-to-end-e2e-tests",children:"End-to-End (e2e) Tests"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In a React/Redux App, this would mean testing a ",(0,i.jsx)(n.em,{children:"full flow"})," of a given\nfeature. ",(0,i.jsx)(n.strong,{children:"end-to-end tests"})," would require launching the entire application,\nincluding the backend, to run a given test."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Note that ",(0,i.jsx)(n.strong,{children:"end-to-end tests"})," are different from ",(0,i.jsx)(n.strong,{children:"integration tests"})," as\nthey require the entire App to run and render the full flow to your component\nunder test."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["With this understanding, consider writing ",(0,i.jsx)(n.strong,{children:"e2e"})," tests ",(0,i.jsx)(n.em,{children:"per workflow"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["An example ",(0,i.jsx)(n.strong,{children:"e2e workflow"}),' is the "Viewing and adding users" workflow.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The e2e test for this workflow would require a test runner to launch the app,\nlog-in, navigate to the users list page, verify existing users are in the\nlist, click on the Add New User button and confirm that the new user has been\nadded to the list."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"As you can see, e2e tests have more dependencies and require that you setup\nyour testing environment in way that closely simulates your real application\nusage."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["An example e2e test for a React/Redux App with a Phoenix/Elixir backend, using\n",(0,i.jsx)(n.code,{children:"Hound"})," as a test runner looks like this:"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-elixir",children:'defmodule OpenFn.UsersTest do\n  setup do\n    user = insert(:user, confirmed_at: DateTime.utc_now())\n    {:ok, user: user }\n  end\n\n  @tag :integration\n  test "Sign-up.", %{user: user} do\n    navigate_to("/sign-up")\n    form = find_element(:id, "sign_up_form")\n\n    form\n    |> find_within_element(:id, "first-name")\n    |> fill_field("John")\n\n    form\n    |> find_within_element(:id, "last-name")\n    |> fill_field("Doe")\n\n    form\n    |> find_within_element(:id, "email")\n    |> fill_field("doe@gmail.com")\n\n    form\n    |> find_within_element(:id, "save-button")\n    |> click\n\n    assert page_title() === ~s/Welcome to my page/\n    end\nend\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Write ",(0,i.jsx)(n.em,{children:"only a few"})," of these."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"choosing-testing-tools",children:"Choosing Testing Tools"}),"\n",(0,i.jsxs)(n.p,{children:["There are many testing tools out there, but for a typical ",(0,i.jsx)(n.em,{children:"React/Redux"})," app the\nfollowing tools should help you accomplish the above tasks:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://jestjs.io/docs/getting-started",children:"Jest"})," as test runner for ",(0,i.jsx)(n.strong,{children:"unit"}),"\nand ",(0,i.jsx)(n.strong,{children:"integration"})," tests."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://testing-library.com/docs/",children:"React Testing Library"}),' used along with\nJest as an "assertion library" for integration tests.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://mswjs.io/docs/getting-started/install",children:"MSW"})," used along with Jest as\na REST API mocking library."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://hexdocs.pm/hound/readme.html",children:"Hound"})," as a test runner for ",(0,i.jsx)(n.strong,{children:"e2e"}),"\ntests in Elixir/Phoenix apps.\n",(0,i.jsx)(n.a,{href:"https://developers.google.com/web/tools/puppeteer",children:"Puppeteer"})," can also be\nused along with Jest.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If Puppeteer is used, it will work seamlessly with Jest but only in\nheadless browser mode. It also reduces on tech stack since you will only\nneed Jest."}),"\n",(0,i.jsxs)(n.li,{children:["Hound gives you the ability to run your ",(0,i.jsx)(n.strong,{children:"e2e"})," tests both in ",(0,i.jsx)(n.code,{children:"headless"}),"\nand ",(0,i.jsx)(n.code,{children:"browser"})," mode."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"final-thoughts-and-next-steps",children:"Final thoughts and next steps"}),"\n",(0,i.jsxs)(n.p,{children:["Testing a React App can be really hard, but worth it! By building\n",(0,i.jsx)(n.code,{children:"Aria-accessible"})," components ahead of time, you save yourself \ud83d\udcb0 and good\nhealth! A few more hints would be:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:['Build clean, isolated and plugable components for your better testing\nexperience. "God components" can be a ',(0,i.jsx)(n.em,{children:"pain"})," to test!"]}),"\n",(0,i.jsxs)(n.li,{children:["Using test runners such as Jest, that use ",(0,i.jsx)(n.em,{children:"emulated"})," web browsers (e.g.,\n",(0,i.jsx)(n.code,{children:"jsdom"}),") rather than a real browser come with their own challenges in\nrendering and traversing complex DOM trees, especially if you are using UI\nlibraries such as ",(0,i.jsx)(n.a,{href:"https://mui.com/",children:"MUI"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["If using Jest for ",(0,i.jsx)(n.strong,{children:"integration tests"}),", I would recommend the components\nunder test have as few dependencies as possible to avoid the complexity\ninvolved in mocking http requests and waiting for asynchronous DOM rendering."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"What would I do differently? Here are my few thoughts:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Organise and document detailed test cases for manual "click testing".'}),"\n",(0,i.jsxs)(n.li,{children:["Identify and clearly isolate components for ",(0,i.jsx)(n.strong,{children:"integration tests"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Do not ",(0,i.jsx)(n.em,{children:"delete"})," slow tests, instead re-write your component to be faster.\nRespect the linter's advice, always!"]}),"\n",(0,i.jsx)(n.li,{children:"Use a commonly supported frontend testing stack such as Jest, Msw, or\nPuppeteer for easier setup and community support."}),"\n",(0,i.jsxs)(n.li,{children:["Setup your test runner to use a test database. It helps, especially during\n",(0,i.jsx)(n.strong,{children:"e2e"})," testing."]}),"\n",(0,i.jsxs)(n.li,{children:["Always write ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.em,{children:"all the three types"})})," of tests, whenever applicable."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"All this stuff for what?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Well because regressions can be much more expensive to your organisation!\nWriting high quality and thoroughly tested software will save you \ud83d\udcb0 and help\nguarantee a maintainable codebase and a progressive software application."}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{title:"Still looking for the legend's advice?",type:"tip",children:[(0,i.jsx)(n.p,{children:"Gotcha, here you go..."}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Swallow your pride and be humble: ",(0,i.jsx)(n.em,{children:"always"})," do ",(0,i.jsx)(n.strong,{children:"manual testing!"})]}),"\n",(0,i.jsxs)(n.li,{children:["Click test your way through the ",(0,i.jsx)(n.strong,{children:"manual test cases"})," for every new\ndeployment, catching regressions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Lock in"})," your fixes and new features as ",(0,i.jsx)(n.strong,{children:"unit tests"}),", ",(0,i.jsx)(n.strong,{children:"integration\ntests"}),", and ",(0,i.jsx)(n.strong,{children:"end-to-end tests"}),"."]}),"\n"]})]}),"\n",(0,i.jsx)(n.p,{children:"Happy testing,"}),"\n",(0,i.jsx)(n.p,{children:"Chaiwa"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11757:e=>{e.exports=JSON.parse('{"permalink":"/articles/2021/10/22/testing-react-app-with-jest-hound","editUrl":"https://github.com/openfn/docs/edit/main/articles/2021-10-22-testing-react-app-with-jest-hound.md","source":"@site/articles/2021-10-22-testing-react-app-with-jest-hound.md","title":"Testing a React app, the blurred line between Unit, integration and E2E","description":"Have you ever struggled to layout the strategy for testing your React App? Well,","date":"2021-10-22T00:00:00.000Z","tags":[{"inline":true,"label":"how-to","permalink":"/articles/tags/how-to"},{"inline":true,"label":"tips","permalink":"/articles/tags/tips"},{"inline":true,"label":"testing","permalink":"/articles/tags/testing"},{"inline":true,"label":"browser-testing","permalink":"/articles/tags/browser-testing"},{"inline":true,"label":"react","permalink":"/articles/tags/react"},{"inline":true,"label":"elixir","permalink":"/articles/tags/elixir"}],"readingTime":7.95,"hasTruncateMarker":true,"authors":[{"name":"Chaiwa Berian","socials":{"github":"https://github.com/chaiwa-berian"},"imageURL":"https://avatars.githubusercontent.com/u/7937584?v=4","key":"chaiwa","page":null}],"frontMatter":{"layout":"post","title":"Testing a React app, the blurred line between Unit, integration and E2E","authors":"chaiwa","tags":["how-to","tips","testing","browser-testing","react","elixir"],"featured":true},"unlisted":false,"prevItem":{"title":"How learning JavaScript helps me better understand OpenFn jobs","permalink":"/articles/2021/10/29/how-learning-javascript-helped-me-better-understand-jobs"},"nextItem":{"title":"Moving from Webpack to esbuild on Phoenix","permalink":"/articles/2021/10/15/webpack-to-esbuild-part1"}}')},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);