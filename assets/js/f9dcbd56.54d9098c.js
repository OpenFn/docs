"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[38588],{6973:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>i});var t=n(58168),o=(n(96540),n(15680));const l={title:"Basic usage of OpenFn CLI",sidebar_label:"Basic usage",slug:"/cli-usage"},r=void 0,p={unversionedId:"build-for-developers/cli-usage",id:"build-for-developers/cli-usage",title:"Basic usage of OpenFn CLI",description:"This page shows common usage examples for the CLI.",source:"@site/docs/build-for-developers/cli-usage.md",sourceDirName:"build-for-developers",slug:"/cli-usage",permalink:"/documentation/cli-usage",draft:!1,editUrl:"https://github.com/openfn/docs/edit/main/docs/build-for-developers/cli-usage.md",tags:[],version:"current",frontMatter:{title:"Basic usage of OpenFn CLI",sidebar_label:"Basic usage",slug:"/cli-usage"},sidebar:"docs",previous:{title:"Get started",permalink:"/documentation/cli"},next:{title:"CLI walkthrough",permalink:"/documentation/cli-walkthrough"}},s={},i=[{value:"Get help",id:"get-help",level:3},{value:"Run a job",id:"run-a-job",level:3},{value:"Handle output state",id:"handle-output-state",level:3},{value:"Adjust logging level",id:"adjust-logging-level",level:3},{value:"Maintain auto-installed adaptors repo",id:"maintain-auto-installed-adaptors-repo",level:3},{value:"Run a workflow",id:"run-a-workflow",level:3},{value:"Load adaptor documentation",id:"load-adaptor-documentation",level:3}],g={toc:i},u="wrapper";function d(e){let{components:a,...n}=e;return(0,o.yg)(u,(0,t.A)({},g,n,{components:a,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"This page shows common usage examples for the CLI."),(0,o.yg)("p",null,"Execute a job, run a workflow, adjust logging, maintain adaptors, and save the\nstate."),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"get-help"},"Get help"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn --help\n")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn deploy --help\n")),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"run-a-job"},"Run a job"),(0,o.yg)("p",null,"To run a single job, you must explicitly specify which adaptor to use. You can\nfind the list of publicly available ",(0,o.yg)("a",{parentName:"p",href:"/adaptors"},"adaptors here"),". See examples\nbelow."),(0,o.yg)("p",null,"Adaptors are automatically installed if the specified version is not detected."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Run a job with the http adaptor:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn path/to/job.js -a http\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Use a specific adaptor version:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn path/to/job.js -a http@2.0.0\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Pass a path to a locally installed adaptor:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn path/to/job.js -a http=/repo/openfn/adaptors/my-http-build\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Use the local adaptors monorepo build:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn path/to/job.js -ma http\n")),(0,o.yg)("p",null,"You must set the path to the monorepo in the env var OPENFN_ADAPTORS_REPO. For\nexample:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"OPENFN_ADAPTORS_REPO=~/openfn/adaptors openfn job.js -ma http\n")),(0,o.yg)("p",null,"You would typically set this in a configuration file like ",(0,o.yg)("inlineCode",{parentName:"p"},".profile")," or\n",(0,o.yg)("inlineCode",{parentName:"p"},".zshrc"),"."),(0,o.yg)("p",null,"Remember to rebuild the adaptor before using it!"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Run from a specific start step")),(0,o.yg)("p",null,"You can specify a step as an exact id, or a partial substring from the name or\nid."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn path/to.job.js --start cf628d9e -s path/to/input.json\n")),(0,o.yg)("p",null,"If you have previously cached this workflow's results, the CLI will\nautomatically load the correct input from the cache if you omit the ",(0,o.yg)("inlineCode",{parentName:"p"},"-s"),"\nargument:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn path/to.job.js --start cf628d9e\n")),(0,o.yg)("p",null,"You can also pass ",(0,o.yg)("inlineCode",{parentName:"p"},"--end")," to make the workflow exit early."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Run a single step")),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"--only")," works just like ",(0,o.yg)("inlineCode",{parentName:"p"},"--start")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"--end"),". You can partially match a step\nname or id, and input will be automatically loaded from the cache."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn path/to.job.js --only cf628d9e\n")),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"handle-output-state"},"Handle output state"),(0,o.yg)("p",null,"After the job finishes, the CLI writes the resulting state to disk. By default,\nit creates an ",(0,o.yg)("inlineCode",{parentName:"p"},"output.json")," next to the job file."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"You can specify custom paths for the output and state files:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn path/to/job.js -a adaptor-name -o path/to/output.json -s path/to/state.json\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Use ",(0,o.yg)("inlineCode",{parentName:"strong"},"-O")," to return the output through stdout:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn path/to/job.js -a adaptor-name -O\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Save all step results locally")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn path/to/workflow.json --cache-steps\n")),(0,o.yg)("p",null,"Each step will write its output to ",(0,o.yg)("inlineCode",{parentName:"p"},"./cli-cache/<workflow-name>/<step-id>.json"),".\nThe ",(0,o.yg)("inlineCode",{parentName:"p"},".cli-cache")," folder will be git-ignored and the cache will be cleared when\nthe workflow is re-run with ",(0,o.yg)("inlineCode",{parentName:"p"},"--cache-steps")," enabled."),(0,o.yg)("p",null,"To ",(0,o.yg)("em",{parentName:"p"},"always")," cache, set the ",(0,o.yg)("inlineCode",{parentName:"p"},"OPENFN_ALWAYS_CACHE_STEPS")," env var to ",(0,o.yg)("inlineCode",{parentName:"p"},'"true"'),", and\npass ",(0,o.yg)("inlineCode",{parentName:"p"},"--no-cache-steps")," to disable it temporarily."),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"adjust-logging-level"},"Adjust logging level"),(0,o.yg)("p",null,"You can pass ",(0,o.yg)("inlineCode",{parentName:"p"},"-l info")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"--log info")," to get more feedback about what's\nhappening during runtime. Below is the list of different log levels"),(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:null},"log level"),(0,o.yg)("th",{parentName:"tr",align:null},"description"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"openfn path/to/job.js -a adaptor -l none")),(0,o.yg)("td",{parentName:"tr",align:null},"Quiet mode")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"openfn path/to/job.js -a adaptor -l default")),(0,o.yg)("td",{parentName:"tr",align:null},"Top level information of what is happening")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"openfn path/to/job.js -a adaptor -l info")),(0,o.yg)("td",{parentName:"tr",align:null},"Get more feedback about runtime, cli and the job")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"openfn path/to/job.js -a adaptor -l debug")),(0,o.yg)("td",{parentName:"tr",align:null},"Get information about runtime, cli, compiler and the job")))),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"maintain-auto-installed-adaptors-repo"},"Maintain auto-installed adaptors repo"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"List the repo contents:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn repo list\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Specify the repo folder using the ",(0,o.yg)("inlineCode",{parentName:"strong"},"OPENFN_REPO_DIR")," env var:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"export OPENFN_REPO_DIR=/path/to/repo\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Auto-install adaptors and check if a matching version is found in the repo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn path/to/job.js -a adaptor-name\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Remove all adaptors from the repo:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn repo clean\n")),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"run-a-workflow"},"Run a workflow"),(0,o.yg)("details",null,(0,o.yg)("summary",null,"A workflow has a structure like this"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "options": {\n    "start": "a" // optionally specify the start node (defaults to steps[0])\n  },\n  "workflows": {\n    "steps": [\n      {\n        "id": "a",\n        "expression": "fn((state) => state)", // code or a path\n        "adaptor": "@openfn/language-common@1.75", // specifiy the adaptor to use (version optional)\n        "state": {\n          "data": {} // optionally pre-populate the data object (this will be overriden by keys in in previous state)\n        },\n        "configuration": {}, // Use this to pass credentials\n        "next": {\n          // This object defines which steps to call next\n          // All edges returning true will run\n          // If there are no next edges, the workflow will end\n          "b": true,\n          "c": {\n            "condition": "!state.error" // Note that this is an expression, not a function\n          }\n        }\n      }\n    ]\n  }\n}\n'))),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"To run a workflow:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn path/to/workflow.json -o tmp/output.json\n")),(0,o.yg)("p",null,"Check out this detailed ",(0,o.yg)("a",{parentName:"p",href:"cli-walkthrough#7-running-workflows"},"tutorial")," on\nrunning workflows via the CLI."),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"load-adaptor-documentation"},"Load adaptor documentation"),(0,o.yg)("p",null,"The CLI can list adaptor documentation in the terminal. Note that it has to\ndownload the adaptor to the repo (if it's not already there), which can take a\nmoment."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Print a list of adaptor functions")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn docs http\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Show docs for a specific function")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn docs http post\n")))}d.isMDXComponent=!0},15680:(e,a,n)=>{n.d(a,{xA:()=>g,yg:()=>y});var t=n(96540);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function p(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),i=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},g=function(e){var a=i(e.components);return t.createElement(s.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},c=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,g=p(e,["components","mdxType","originalType","parentName"]),u=i(n),c=o,y=u["".concat(s,".").concat(c)]||u[c]||d[c]||l;return n?t.createElement(y,r(r({ref:a},g),{},{components:n})):t.createElement(y,r({ref:a},g))}));function y(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=c;var p={};for(var s in a)hasOwnProperty.call(a,s)&&(p[s]=a[s]);p.originalType=e,p[u]="string"==typeof e?e:o,r[1]=p;for(var i=2;i<l;i++)r[i]=n[i];return t.createElement.apply(null,r)}return t.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);