"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[16055],{95584:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>g,default:()=>d,frontMatter:()=>r,metadata:()=>y,toc:()=>i});var n=a(58168),l=(a(96540),a(15680));const r={title:"redis@1.2.8",id:"redis-docs",keywords:["adaptor","redis","get","hGetAll","hget","hset","jGet","jSet","mGet","scan","set"]},g=void 0,y={unversionedId:"packages/redis-docs",id:"packages/redis-docs",title:"redis@1.2.8",description:"get(key)",source:"@site/adaptors/packages/redis-docs.md",sourceDirName:"packages",slug:"/packages/redis-docs",permalink:"/adaptors/packages/redis-docs",draft:!1,tags:[],version:"current",frontMatter:{title:"redis@1.2.8",id:"redis-docs",keywords:["adaptor","redis","get","hGetAll","hget","hset","jGet","jSet","mGet","scan","set"]},sidebar:"adaptors",previous:{title:"Redis Adaptor",permalink:"/adaptors/redis"},next:{title:"Config for redis",permalink:"/adaptors/packages/redis-configuration-schema"}},p={},i=[{value:"Functions",id:"functions",level:2},{value:"get",id:"get",level:3},{value:"hget",id:"hget",level:3},{value:"hGetAll",id:"hgetall",level:3},{value:"hset",id:"hset",level:3},{value:"jGet",id:"jget",level:3},{value:"jSet",id:"jset",level:3},{value:"mGet",id:"mget",level:3},{value:"scan",id:"scan",level:3},{value:"set",id:"set",level:3},{value:"Interfaces",id:"interfaces",level:2},{value:"RedisState",id:"redisstate",level:3},{value:"ScanOptions",id:"scanoptions",level:3}],o={toc:i},s="wrapper";function d(e){let{components:t,...a}=e;return(0,l.yg)(s,(0,n.A)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("dl",null,(0,l.yg)("dt",null,(0,l.yg)("a",{href:"#get"},"get(key)")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"#hget"},"hget(key, field)")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"#hgetall"},"hGetAll(key)")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"#hset"},"hset(key, value)")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"#jget"},"jGet(key)")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"#jset"},"jSet(key, value)")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"#mget"},"mGet(keys)")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"#scan"},"scan(pattern, options)")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"#set"},"set(key, value)"))),(0,l.yg)("p",null,"This adaptor exports the following from common:"),(0,l.yg)("dl",null,(0,l.yg)("dt",null,(0,l.yg)("a",{href:"/adaptors/packages/common-docs#cursor"},"cursor()")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"/adaptors/packages/common-docs#datapath"},"dataPath()")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"/adaptors/packages/common-docs#datavalue"},"dataValue()")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"/adaptors/packages/common-docs#datefns"},"dateFns")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"/adaptors/packages/common-docs#each"},"each()")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"/adaptors/packages/common-docs#field"},"field()")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"/adaptors/packages/common-docs#fields"},"fields()")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"/adaptors/packages/common-docs#fn"},"fn()")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"/adaptors/packages/common-docs#fnif"},"fnIf()")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"/adaptors/packages/common-docs#lastreferencevalue"},"lastReferenceValue()")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"/adaptors/packages/common-docs#merge"},"merge()")),(0,l.yg)("dt",null,(0,l.yg)("a",{href:"/adaptors/packages/common-docs#sourcevalue"},"sourceValue()"))),(0,l.yg)("h2",{id:"functions"},"Functions"),(0,l.yg)("h3",{id:"get"},"get"),(0,l.yg)("p",null,(0,l.yg)("code",null,"get(key) \u21d2 Operation")),(0,l.yg)("p",null,"Get the string value of a key.\nIf the key does not exist, null is returned.\nAn error is thrown if the value stored at key is not a string, because ",(0,l.yg)("inlineCode",{parentName:"p"},"get()")," only handles string values."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Param"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"key"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"string")),(0,l.yg)("td",{parentName:"tr",align:null},"The name of the key")))),(0,l.yg)("p",null,"This operation writes the following keys to state:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"State Key"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"data"),(0,l.yg)("td",{parentName:"tr",align:null},"the result returned from Redis")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"references"),(0,l.yg)("td",{parentName:"tr",align:null},"an array of all previous data objects used in the Job")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example:")," Get the value of the patient key"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},'get("patient");\n')),(0,l.yg)("hr",null),(0,l.yg)("h3",{id:"hget"},"hget"),(0,l.yg)("p",null,(0,l.yg)("code",null,"hget(key, field) \u21d2 Operation")),(0,l.yg)("p",null,"Get the value associated with a specific field in a hash stored at a specified key."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Param"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"key"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"string")),(0,l.yg)("td",{parentName:"tr",align:null},"The name of the key")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"field"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"string")),(0,l.yg)("td",{parentName:"tr",align:null},"Field")))),(0,l.yg)("p",null,"This operation writes the following keys to state:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"State Key"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"data"),(0,l.yg)("td",{parentName:"tr",align:null},"the result returned from Redis")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"references"),(0,l.yg)("td",{parentName:"tr",align:null},"an array of all previous data objects used in the Job")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example:")," Get the value of the name field under the patient key"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},'hget("patient", "name");\n')),(0,l.yg)("hr",null),(0,l.yg)("h3",{id:"hgetall"},"hGetAll"),(0,l.yg)("p",null,(0,l.yg)("code",null,"hGetAll(key) \u21d2 Operation")),(0,l.yg)("p",null,"Get all fields and values of a hash, as an object, for a specified key."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Param"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"key"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"string")),(0,l.yg)("td",{parentName:"tr",align:null},"The name of the key")))),(0,l.yg)("p",null,"This operation writes the following keys to state:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"State Key"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"data"),(0,l.yg)("td",{parentName:"tr",align:null},"The hash as an object")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"references"),(0,l.yg)("td",{parentName:"tr",align:null},"an array of all previous data objects used in the Job")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example:")," Get the hash obejct at the noderedis:animals:1 key"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},'hGetAll("noderedis:animals:1");\n')),(0,l.yg)("hr",null),(0,l.yg)("h3",{id:"hset"},"hset"),(0,l.yg)("p",null,(0,l.yg)("code",null,"hset(key, value) \u21d2 Operation")),(0,l.yg)("p",null,"Sets the specified fields to their respective values in the hash stored at key.\nThis function overwrites the values of specified fields that exist in the hash.\nIf key doesn't exist, a new key holding a hash is created."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Param"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"key"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"string")),(0,l.yg)("td",{parentName:"tr",align:null},"The name of the key")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"value"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"object")),(0,l.yg)("td",{parentName:"tr",align:null},"The values to set")))),(0,l.yg)("p",null,"This operation writes the following keys to state:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"State Key"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"references"),(0,l.yg)("td",{parentName:"tr",align:null},"an array of all previous data objects used in the Job")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example:")," Set a field and value for the ",(0,l.yg)("inlineCode",{parentName:"p"},"patient")," key"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},"hset('patient', { name: 'mtuchi' });\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example:")," Set multiple field values for the ",(0,l.yg)("inlineCode",{parentName:"p"},"patient")," key"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},"hset('patient', { name: 'victor', ihs_number: 12345  });\n")),(0,l.yg)("hr",null),(0,l.yg)("h3",{id:"jget"},"jGet"),(0,l.yg)("p",null,(0,l.yg)("code",null,"jGet(key) \u21d2 Operation")),(0,l.yg)("p",null,"Get the value at a specified path in a JSON document stored in a key"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Param"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"key"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"string")),(0,l.yg)("td",{parentName:"tr",align:null},"The key at which the JSON document is stored.")))),(0,l.yg)("p",null,"This operation writes the following keys to state:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"State Key"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"data"),(0,l.yg)("td",{parentName:"tr",align:null},"the result returned from Redis")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"references"),(0,l.yg)("td",{parentName:"tr",align:null},"an array of all previous data objects used in the Job")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example:")," Get JSON document value of the patient key"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},'jGet("patient");\n')),(0,l.yg)("hr",null),(0,l.yg)("h3",{id:"jset"},"jSet"),(0,l.yg)("p",null,(0,l.yg)("code",null,"jSet(key, value) \u21d2 Operation")),(0,l.yg)("p",null,"Creates a JSON object at the specified key. If the key already exists, the\nexisting value will be replaced by the new value."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Param"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"key"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"string")),(0,l.yg)("td",{parentName:"tr",align:null},"The key to modify.")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"value"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"string")," ","|"," ",(0,l.yg)("code",null,"object")),(0,l.yg)("td",{parentName:"tr",align:null},"The JSON object or string value to set.")))),(0,l.yg)("p",null,"This operation writes the following keys to state:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"State Key"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"references"),(0,l.yg)("td",{parentName:"tr",align:null},"an array of all previous data objects used in the Job")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example:")," Set a JSON object for the key ",(0,l.yg)("inlineCode",{parentName:"p"},"patient")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},"jSet('patient', { name: 'victor', ihs_number: 12345  });\n")),(0,l.yg)("hr",null),(0,l.yg)("h3",{id:"mget"},"mGet"),(0,l.yg)("p",null,(0,l.yg)("code",null,"mGet(keys) \u21d2 Operation")),(0,l.yg)("p",null,"Get the values at specified paths in JSON documents stored at multiple keys."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Param"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"keys"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"Array.","<","string",">")),(0,l.yg)("td",{parentName:"tr",align:null},"The keys at which the JSON documents are stored.")))),(0,l.yg)("p",null,"This operation writes the following keys to state:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"State Key"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"data"),(0,l.yg)("td",{parentName:"tr",align:null},"the result returned from Redis")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"references"),(0,l.yg)("td",{parentName:"tr",align:null},"an array of all previous data objects used in the Job")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example:")," Get JSON document values of the patient and doctor keys"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},'mGet(["patient", "doctor"]);\n')),(0,l.yg)("hr",null),(0,l.yg)("h3",{id:"scan"},"scan"),(0,l.yg)("p",null,(0,l.yg)("code",null,"scan(pattern, options) \u21d2 Operation")),(0,l.yg)("p",null,"Returns all keys which match the provided pattern.\nscan iterates the whole database to find the matching keys"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Param"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"pattern"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"string")),(0,l.yg)("td",{parentName:"tr",align:null},"A glob-style pattern")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"options"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"#scanoptions"},(0,l.yg)("code",null,"ScanOptions"))),(0,l.yg)("td",{parentName:"tr",align:null},"Scan options")))),(0,l.yg)("p",null,"This operation writes the following keys to state:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"State Key"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"data"),(0,l.yg)("td",{parentName:"tr",align:null},"an array of keys which match the pattern")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"references"),(0,l.yg)("td",{parentName:"tr",align:null},"an array of all previous data objects used in the Job")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example:")," Scan for matching keys"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},"scan('*:20240524T172736Z*');\n")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example:")," Scan for keys and fetch the string values inside"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},"scan('*:20240524T172736Z*');\neach($.data, get($.data).then((state) => {\n   state.results ??= [];\n   state.results.push(state.data)\n   return state;\n})\n")),(0,l.yg)("hr",null),(0,l.yg)("h3",{id:"set"},"set"),(0,l.yg)("p",null,(0,l.yg)("code",null,"set(key, value) \u21d2 Operation")),(0,l.yg)("p",null,"Set the string value of a key.\nIf the key already exists, its value is updated. Otherwise, a new key-value pair is created."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Param"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"key"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"string")),(0,l.yg)("td",{parentName:"tr",align:null},"The name of the key")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"value"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"string")),(0,l.yg)("td",{parentName:"tr",align:null},"The value to set")))),(0,l.yg)("p",null,"This operation writes the following keys to state:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"State Key"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"references"),(0,l.yg)("td",{parentName:"tr",align:null},"an array of all previous data objects used in the Job")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Example:"),' Set the "patient" key to value "mtuchi"'),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},'set("patient", "mtuchi");\n')),(0,l.yg)("hr",null),(0,l.yg)("h2",{id:"interfaces"},"Interfaces"),(0,l.yg)("h3",{id:"redisstate"},"RedisState"),(0,l.yg)("p",null,"State object"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Properties")),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Name"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"data"),(0,l.yg)("td",{parentName:"tr",align:null},"the result returned from Redis")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"references"),(0,l.yg)("td",{parentName:"tr",align:null},"an array of all previous data objects used in the Job")))),(0,l.yg)("hr",null),(0,l.yg)("h3",{id:"scanoptions"},"ScanOptions"),(0,l.yg)("p",null,"Options provided to the scan function"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Properties")),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Name"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"type"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"string")),(0,l.yg)("td",{parentName:"tr",align:null},"Limits the keys returned to those of a specified type (e.g., string, list, set, hash, json, zset or stream).")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"count"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("code",null,"integer")),(0,l.yg)("td",{parentName:"tr",align:null},"A hint to the server about how many elements to return in the call (default is 10).")))),(0,l.yg)("hr",null))}d.isMDXComponent=!0},15680:(e,t,a)=>{a.d(t,{xA:()=>o,yg:()=>m});var n=a(96540);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function g(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function y(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),i=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):g(g({},t),e)),a},o=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,o=y(e,["components","mdxType","originalType","parentName"]),s=i(a),u=l,m=s["".concat(p,".").concat(u)]||s[u]||d[u]||r;return a?n.createElement(m,g(g({ref:t},o),{},{components:a})):n.createElement(m,g({ref:t},o))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,g=new Array(r);g[0]=u;var y={};for(var p in t)hasOwnProperty.call(t,p)&&(y[p]=t[p]);y.originalType=e,y[s]="string"==typeof e?e:l,g[1]=y;for(var i=2;i<r;i++)g[i]=a[i];return n.createElement.apply(null,g)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);