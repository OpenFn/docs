"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[41288],{28453:(e,a,t)=>{t.d(a,{R:()=>o,x:()=>l});var n=t(96540);const i={},s=n.createContext(i);function o(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:a},e.children)}},74759:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"library/jobs/auto/commcare-asri-bulk-upload","title":"Bulk upload obat lookup-table","description":"\ud83d\udcdc This job is an official example from OpenFn.","source":"@site/adaptors/library/jobs/auto/commcare-asri-bulk-upload.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/commcare-asri-bulk-upload","permalink":"/adaptors/library/jobs/auto/commcare-asri-bulk-upload","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Bulk upload obat lookup-table","sidebar_label":"\ud83d\udcdc Bulk upload obat lookup-table","id":"commcare-asri-bulk-upload","keywords":["library","job","expression","commcare","bulk","map"]},"sidebar":"adaptors","previous":{"title":"Configuration","permalink":"/adaptors/packages/commcare-configuration-schema"},"next":{"title":"\ud83d\udcdc Create user","permalink":"/adaptors/library/jobs/auto/commcare-create-user"}}');var i=t(74848),s=t(28453);const o={title:"Bulk upload obat lookup-table",sidebar_label:"\ud83d\udcdc Bulk upload obat lookup-table",id:"commcare-asri-bulk-upload",keywords:["library","job","expression","commcare","bulk","map"]},l=void 0,r={},d=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function c(e){const a={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(a.p,{children:["\ud83d\udcdc ",(0,i.jsx)("em",{children:"This job is an official example from OpenFn."})]}),"\n",(0,i.jsx)(a.h2,{id:"metadata",children:"Metadata"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:"Name: Bulk upload obat lookup-table"}),"\n",(0,i.jsxs)(a.li,{children:["Adaptor: ",(0,i.jsx)(a.a,{href:"https://www.github.com/openfn/language-commcare",children:(0,i.jsx)(a.code,{children:"@openfn/language-commcare"})})]}),"\n",(0,i.jsxs)(a.li,{children:["Adaptor Version: ",(0,i.jsx)(a.a,{href:"https://www.github.com/openfn/language-commcare",children:(0,i.jsx)(a.code,{children:"latest"})})]}),"\n",(0,i.jsx)(a.li,{children:"Created date unknown"}),"\n",(0,i.jsx)(a.li,{children:"Updated date unknown"}),"\n",(0,i.jsxs)(a.li,{children:["Score: ",(0,i.jsx)("b",{children:"100"})," (an ",(0,i.jsx)(a.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.code,{children:"bulk"}),", ",(0,i.jsx)(a.code,{children:"map"})]}),"\n",(0,i.jsx)(a.h2,{id:"expression",children:"Expression"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-js",children:"\n// Bulk update obat lookup-table \nfn(state => {\n    const { medication_ids, visit, obat } = state.data\n    state.medication_ids = medication_ids;\n    state.visit = visit\n    state.obat = obat\n    return state\n  })\n  \n  fn(state => {\n  \n    const properties = state.visit.properties;\n  \n    const data = state.medication_ids\n      .flatMap(medicine => {\n        const medicineName = properties[Object.keys(medicine)[0]];\n        return state.obat.filter(\n          item => item.fields['Nama'] === medicineName\n        ).map(item => ({ ...item, fields: { ...item.fields, satusehat_id: Object.values(medicine)[0] } }))\n      }).map(obat => {\n        const data = {\n          UID: obat.id,\n          'DELETE(Y/N)': 'N',\n          'field:Nama': obat.fields['Nama'],\n          'field:Satuan': obat.fields['Satuan'],\n          'field:Harga': obat.fields['Harga'],\n          'field:kfa_codes': obat.fields['kfa_codes'],\n          'field:satusehat_id': obat.fields['satusehat_id'],\n          'field:strength': obat.fields['strength'],\n          'field:strength_unit': obat.fields['strength_unit'],\n        }\n        return data\n      })\n  \n    state.medicationMappedData = {\n      types: [{\n        'DELETE(Y/N)': 'N',\n        table_id: 'test_obat', \n        'is_global?': 'yes',\n        'field 1': 'Nama',\n        'field 2': 'Satuan',\n        'field 3': 'Harga',\n        'field 4': 'kfa_codes',\n        'field 5': 'satusehat_id',\n        'field 6': 'strength',\n        'field 7': 'strength_unit',\n      }],\n      test_obat: data,\n    }\n  \n    return state\n  })\n  \n  bulk(\n    'lookup-table',\n    state => state.medicationMappedData,\n    { replace: false }\n  )\n\n"})})]})}function u(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);