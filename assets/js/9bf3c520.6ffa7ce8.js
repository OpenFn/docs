"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[88021],{28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var t=o(96540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},96412:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"portability-versions","title":"Versions of the Portability Proposal","description":"OpenFn is currently designing a portable project configuration schema that can","source":"@site/versioned_docs/version-legacy/portability-versions.md","sourceDirName":".","slug":"/portability-versions","permalink":"/documentation/legacy/portability-versions","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/versioned_docs/version-legacy/portability-versions.md","tags":[],"version":"legacy","frontMatter":{"title":"Versions of the Portability Proposal"}}');var r=o(74848),s=o(28453);const a={title:"Versions of the Portability Proposal"},i=void 0,l={},c=[{value:"Proposal v4",id:"proposal-v4",level:2},{value:"Proposal v3",id:"proposal-v3",level:2},{value:"Proposal v2",id:"proposal-v2",level:2},{value:"Proposal v1",id:"proposal-v1",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"OpenFn is currently designing a portable project configuration schema that can\nbe used to import or export projects between OpenFn/platform and OpenFn/engine."}),"\n",(0,r.jsx)(n.h2,{id:"proposal-v4",children:"Proposal v4"}),"\n",(0,r.jsxs)(n.p,{children:["The portability specification v4 defines how entire projects (groups of\nworkflows with their associated triggers, credentials and jobs) can be\nrepresented as code. This specification has been written for\n",(0,r.jsx)(n.a,{href:"/documentation/legacy/getting-started/integration-toolkit#lightning-coming-soon",children:"Lightning"}),",\nthe fully open source webb app which extends the OpenFn DPG. It aims to (a)\nimprove developer experience, allowing them to build and test workflows locally;\n(b) enable version control and an audit trail of project changes; and (c) enable\nusers to port existing workflows from the OpenFn platform to Lightning."]}),"\n",(0,r.jsx)(n.p,{children:"This new specification has been designed and documented thanks to support from a\nDigital Square Global Goods grant."}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"project.zip"})," structure and files:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/globals\n   sample-clinic-map.json\n   sample-translations.json\n/workflow-a\n   job-1.js\n   job-2.js\n   job-3.js\n/workflow-b\n   job-4.js\nproject.yaml\nproject.state.yaml\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"project.yaml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'name: "My Project" # The project name\n\nglobals: # All global constants accessible to this project\n  clinic-map: file://./globals/clinic-map.json\n  project-expense-codes: file://./globals/project-expense-codes.json\n  service-codes:\n    body:\n      m126: Medical Referral\n      g01: General Checkup\n      ps: Psycho-social Support\n\nworkflows: # All workflows in a project\n  CommCare-to-OpenMRS: #The workflow name. Workflow names won\'t have spaces\n    jobs: # All jobs/steps in a workflow\n      Coerce-to-FHIR: # The job/step name\n        trigger: webhook #webhook urls are uids so are not included\n        adaptor: language-fhir\n        enabled: true\n        credential: my-fihr-credential #looks up credential in state by its name\n        # when running locally, the credentials values are taken from the overrides file\n        # cli run workflow "CommCare-to-OpenMRS" --overrides ./keys-and-values.yaml\n        body: "file://./CommCare-to-OpenMRS/Coerce-to-FHIR.js" # each job job-body is stored in a separate file, within a folder for the whole workflow\n\n      Load-to-openmrs:\n        trigger:\n          on-success: Coerce-to-FHIR\n        adaptor: language-openmrs\n        credential: my-other-credential\n        enabled: true\n        body:\n          # no "include", but pathlike doesn\'t work: if you\'re doing a uri you need to be explicit about it\n          # default to local fs -- no numbering because too complicated if users change the order\n          "file://./CommCare-to-OpenMRS/Load-to-openmrs.js"\n\n      Send-Wrap-Up-Reports:\n        trigger:\n          on-success: Load-to-openmrs\n        enabled: true\n        adaptor: language-mailgun\n        globals:\n          - service-codes\n          - clinic-map\n        body: >\n          # this triggers a new workflow\n          fn(state => state)\n          sendEmail(state => state.emailContent)\n\n  Kobo-to-DHIS2: #This is a second workflow\n    Fetch-Kobo-Submissions:\n      trigger:\n        cron: * 5 * * *\n      enabled: true\n      adaptor: language-kobotoolbox\n      body: "file://./Kobo-to-DHIS2/Fetch-Kobo-Submissions.js"\n\n    Upload-to-DHIS2:\n      trigger:\n        on-success: Fetch-Kobo-Submissions\n      adaptor: language-kobotoolbox\n      enabled: false\n      body: "file://./Kobo-to-DHIS2/Upload-to-DHIS2.js"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"project.state.yaml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"project:\n  - id: '45bffee'\n    key: 'My Project'\n\nglobals:\n  - id: 'sj23n36'\n    key: 'clinic-map'\n  - id: 'bss522g'\n    key: 'project-expense-codes'\n  - id: '22aa4st'\n    key: 'service-codes'\n\nworkflows:\n  - id: 'cfd7c68'\n    key: 'CommCare-to-OpenMRS' # this is the NAME and the KEY\n  - id: 'd1ecc4f'\n    key: 'Kobo-to-DHIS2'\n\njobs:\n  - id: 'ns6yw54'\n    key: 'Coerce-to-FHIR'\n  - id: '12bs52j'\n    key: 'Load-to-openmrs'\n  - id: 'lk81hs6'\n    key: 'Send-Wrap-Up-Reports'\n\n  - id: 'sn26sh2'\n    key: 'Fetch-Kobo-Submissions'\n  - id: 'sk1722h'\n    key: 'Upload-to-DHIS2'\n\ncredentials:\n  - id: '12ms62y'\n    key: 'My FHIR Credential'\n"})}),"\n",(0,r.jsx)(n.h2,{id:"proposal-v3",children:"Proposal v3"}),"\n",(0,r.jsxs)(n.p,{children:["v3 introduces\n",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier",children:"URI schemes"}),"\n",(0,r.jsx)(n.code,{children:"file://"}),", ",(0,r.jsx)(n.code,{children:"https://"}),", ",(0,r.jsx)(n.code,{children:"gcs://"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"jobs:\n  job-1:\n    expression: 'file://my-job.js' # URIs may be used (e.g., https://raw.githubusercontent.com/org/repo/my-job.js)\n    adaptor: '@openfn/language-common'\n    trigger: trigger-1\n    credential: my-secret-credential\n  recurring-job:\n    expression: >\n      fn(state => {\n        console.log(\"Hi there!\")\n        return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: every-minute\n  flow-job:\n    expression: >\n      fn(state => {\n        state.data.number = state.data.number * 3\n        return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: after-j1\n  catch-job:\n    expression: >\n      fn(state => {\n        state.message = \"handled it.\"\n        return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: j1-fails\n\ntriggers:\n  trigger-1:\n    criteria: '{\"number\":2}'\n  every-minute:\n    cron: '* * * * *'\n  after-j1:\n    success: job-1\n  j1-fails:\n    failure: job-1\n\ncredentials:\n  my-secret-credential:\n    username: '******' # Credential keys get exported, but values must be manually reentered\n    password: '******'\n  my-other-credential: 'file://gcp_credential.json' # And URIs may be specified directly for the credential body\n"})}),"\n",(0,r.jsx)(n.h2,{id:"proposal-v2",children:"Proposal v2"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"jobs:\n  job-1:\n    expression: >\n      registerPatient({\n        patient-id: state.data.id,\n        dob: state.data.birth\n      })\n    adaptor: '@openfn/language-openmrs'\n    trigger: trigger-1\n    credential: my-secret-credential\n  recurring-job:\n    expression: >\n      fn(state => {\n        console.log(\"Hi there!\")\n        return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: every-minute\n  flow-job:\n    expression: >\n      fn(state => {\n        state.data.number = state.data.number * 3\n        return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: after-j1\n  catch-job:\n    expression: >\n      fn(state => {\n        state.message = \"handled it.\"\n        return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: j1-fails\n\ntriggers:\n  trigger-1:\n    criteria: '{\"number\":2}'\n  every-minute:\n    cron: '* * * * *'\n  after-j1:\n    success: job-1\n  j1-fails:\n    failure: job-1\n\n# Note that credential keys get copied, but values must be manually entered\n# after the export is completed.\ncredentials:\n  my-secret-credential:\n    username: '******'\n    password: '******'\n"})}),"\n",(0,r.jsx)(n.h2,{id:"proposal-v1",children:"Proposal v1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const project = {\n  async: true,\n  triggers: {\n    uniqueTriggerId: {\n      // trigger properties\n    },\n    otherTrigger: {\n      // other trigger properties\n    },\n  },\n  credentials: {\n    // for now, credentials will not be synced //\n    // secret1: {\n    // username: 'mamadou',\n    // pass: 'shhh',\n  },\n  staticData: {\n    // static objects that can be accessed from any job\n  },\n  jobs: {\n    payHealthWorker: { trigger: 'otherTrigger' },\n    syncToSalesforce: {\n      expression: 'uri://github.com/jobs/expresion.js',\n      trigger: 'uniqueTriggerId',\n      credential: 'secret1',\n    },\n  },\n};\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);