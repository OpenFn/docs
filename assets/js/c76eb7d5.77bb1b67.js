"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[80878],{28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>d});var s=a(96540);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}},73634:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"packages/mysql-readme","title":"mysql developer readme","description":"Source//github.com/OpenFn/adaptors/tree/main/packages/mysql","source":"@site/adaptors/packages/mysql-readme.md","sourceDirName":"packages","slug":"/packages/mysql-readme","permalink":"/adaptors/packages/mysql-readme","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"mysql developer readme","id":"mysql-readme","keywords":["adaptor","readme","mysql"]},"sidebar":"adaptors","previous":{"title":"Changelog","permalink":"/adaptors/packages/mysql-changelog"},"next":{"title":"Functions","permalink":"/adaptors/packages/nexmo-docs"}}');var t=a(74848),r=a(28453);const i={title:"mysql developer readme",id:"mysql-readme",keywords:["adaptor","readme","mysql"]},d="mysql Adaptor developer README.md",o={},l=[{value:"Documentation",id:"documentation",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Execute a query",id:"execute-a-query",level:2},{value:"Execute a sql query",id:"execute-a-sql-query",level:2},{value:"Insert a single record",id:"insert-a-single-record",level:2},{value:"Insert or update a single record",id:"insert-or-update-a-single-record",level:2},{value:"Upsert many records",id:"upsert-many-records",level:2},{value:"Development",id:"development",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"mysql-adaptor-developer-readmemd",children:"mysql Adaptor developer README.md"})}),"\n",(0,t.jsxs)(n.p,{children:["Source: ",(0,t.jsx)(n.a,{href:"https://github.com/OpenFn/adaptors/tree/main/packages/mysql",children:"https://github.com/OpenFn/adaptors/tree/main/packages/mysql"})]}),"\n",(0,t.jsx)(n.h1,{id:"language-mysql",children:"Language MySQL"}),"\n",(0,t.jsx)(n.p,{children:"Language Pack for building expressions and operations to run MySQL queries."}),"\n",(0,t.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,t.jsxs)(n.p,{children:["View the ",(0,t.jsx)(n.a,{href:"https://docs.openfn.org/adaptors/packages/mysql-docs",children:"docs site"})," for\nfull technical documentation."]}),"\n",(0,t.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["View all the required and optional properties for ",(0,t.jsx)(n.code,{children:"state.configuration"})," in the\nofficial\n",(0,t.jsx)(n.a,{href:"https://docs.openfn.org/adaptors/packages/mysql-configuration-schema/",children:"configuration-schema"}),"\ndefinition."]}),"\n",(0,t.jsx)(n.h2,{id:"execute-a-query",children:"Execute a query"}),"\n",(0,t.jsx)(n.p,{children:"Execute an sql query with the node mysql package."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"query({\n  sql: state => {\n    return `select * from ${state.data.table} where id = ?;`;\n  },\n  timeout: 4000,\n  values: ['007'],\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"execute-a-sql-query",children:"Execute a sql query"}),"\n",(0,t.jsxs)(n.p,{children:["This function takes either a ",(0,t.jsx)(n.code,{children:"string"})," or a ",(0,t.jsx)(n.code,{children:"function"})," that takes states and\nreturns a string."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"sqlString(state => {\n  return (\n    `INSERT INTO untitled_table (name, the_geom) VALUES ('` +\n    state.data.version +\n    `', ` +\n    dataValue('form.Choix_tache')(state) +\n    `)`\n  );\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"insert-a-single-record",children:"Insert a single record"}),"\n",(0,t.jsx)(n.p,{children:"This function is used to insert a single record in a MySQL database."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"insert(\n  'some_table',\n  fields(\n    field('firstname', dataValue('form.patient_firstname')),\n    field('lastname', dataValue('form.patient_lastname'))\n  )\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"insert-or-update-a-single-record",children:"Insert or update a single record"}),"\n",(0,t.jsx)(n.p,{children:"This function is used to insert a single record in a MySQL database or update it\nif there is a match."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"upsert(\n  'some_table',\n  fields(\n    field('firstname', dataValue('form.patient_firstname')),\n    field('lastname', dataValue('form.patient_lastname'))\n  )\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"upsert-many-records",children:"Upsert many records"}),"\n",(0,t.jsx)(n.p,{children:"This function allows the upsert of a set of records inside a table all at once."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"upsertMany(\n  'users', // the DB table\n  [\n    { name: 'one', email: 'one@openfn.org' },\n    { name: 'two', email: 'two@openfn.org' },\n  ]\n);\n"})}),"\n",(0,t.jsx)(n.p,{children:"or"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"upsertMany('users', state =>\n  state.data.users.map(user => {\n    name: user['name'],\n    email: user['email']\n  })\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"development",children:"Development"}),"\n",(0,t.jsxs)(n.p,{children:["Clone the ",(0,t.jsx)(n.a,{href:"https://github.com/OpenFn/adaptors",children:"adaptors monorepo"}),". Follow the\n",(0,t.jsx)(n.code,{children:"Getting Started"})," guide inside to get set up."]}),"\n",(0,t.jsxs)(n.p,{children:["Run tests using ",(0,t.jsx)(n.code,{children:"pnpm run test"})," or ",(0,t.jsx)(n.code,{children:"pnpm run test:watch"})]}),"\n",(0,t.jsxs)(n.p,{children:["Build the project using ",(0,t.jsx)(n.code,{children:"pnpm build"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["To just build the docs run ",(0,t.jsx)(n.code,{children:"pnpm build docs"})]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);