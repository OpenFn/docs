"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[36421],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(96540);const s={},r=a.createContext(s);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:n},e.children)}},71061:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"library/jobs/auto/satusehat-create-observations","title":"Create an Observation","description":"\ud83d\udcdc This job is an official example from OpenFn.","source":"@site/adaptors/library/jobs/auto/satusehat-create-observations.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/satusehat-create-observations","permalink":"/adaptors/library/jobs/auto/satusehat-create-observations","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Create an Observation","sidebar_label":"\ud83d\udcdc Create an Observation","id":"satusehat-create-observations","keywords":["library","job","expression","satusehat","map","post","JSON"]},"sidebar":"adaptors","previous":{"title":"\ud83d\udcdc Create an Encounter Record","permalink":"/adaptors/library/jobs/auto/satusehat-create-encounter"},"next":{"title":"\ud83d\udcdc Create a Medication Record","permalink":"/adaptors/library/jobs/auto/satusehat-create-medication"}}');var s=t(74848),r=t(28453);const o={title:"Create an Observation",sidebar_label:"\ud83d\udcdc Create an Observation",id:"satusehat-create-observations",keywords:["library","job","expression","satusehat","map","post","JSON"]},i=void 0,l={},c=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["\ud83d\udcdc ",(0,s.jsx)("em",{children:"This job is an official example from OpenFn."})]}),"\n",(0,s.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Name: Create an Observation"}),"\n",(0,s.jsxs)(n.li,{children:["Adaptor: ",(0,s.jsx)(n.a,{href:"https://www.github.com/openfn/language-satusehat",children:(0,s.jsx)(n.code,{children:"@openfn/language-satusehat"})})]}),"\n",(0,s.jsxs)(n.li,{children:["Adaptor Version: ",(0,s.jsx)(n.a,{href:"https://www.github.com/openfn/language-satusehat",children:(0,s.jsx)(n.code,{children:"latest"})})]}),"\n",(0,s.jsx)(n.li,{children:"Created date unknown"}),"\n",(0,s.jsx)(n.li,{children:"Updated date unknown"}),"\n",(0,s.jsxs)(n.li,{children:["Score: ",(0,s.jsx)("b",{children:"100"})," (an ",(0,s.jsx)(n.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"map"}),", ",(0,s.jsx)(n.code,{children:"post"}),", ",(0,s.jsx)(n.code,{children:"JSON"})]}),"\n",(0,s.jsx)(n.h2,{id:"expression",children:"Expression"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Create observation in Satusehat based on an incoming Commcare visit\n\nfunction createObservationData(item, state, result) {\n  const patientReference = `Patient/${state.patient.ihs_number}`;\n  const encounterReference = `Encounter/${state.encounterId}`;\n  const encounterDisplay = `${state.patient.full_name}'s ${state.visit.properties.visit_type} on ${state.visit.properties.visit_date}`;\n  return {\n    resourceType: 'Observation',\n    status: 'final',\n    category: [\n      {\n        coding: item.category,\n      },\n    ],\n    code: {\n      coding: item.code,\n    },\n    subject: {\n      reference: patientReference,\n    },\n    performer: [\n      {\n        reference: `Practitioner/N10000001`,\n        display: 'Voigt',\n      },\n    ],\n    encounter: {\n      reference: encounterReference,\n      display: encounterDisplay,\n    },\n    effectiveDateTime: state.visit.visit_date,\n    ...result,\n  };\n}\n\nfn(state => {\n  //  Filtering and mapping observations based on the visit.\n  state.observations = state.visit.observations.map(item => {\n    const { value_type: valueType, value } = item;\n    const dataObjects = [];\n\n    if (valueType === 'valueCodeableConcept') {\n      value.forEach(value => {\n        const result = {\n          [valueType]: {\n            coding: [JSON.parse(value.snomed_code)],\n            value: JSON.parse(value.value),\n          },\n        };\n        const data = createObservationData(\n          { ...item, id: value.id },\n          state,\n          result\n        );\n        dataObjects.push(data);\n      });\n    } else if (valueType === 'valueQuantity') {\n      const result = {\n        [valueType]: {\n          coding: [value.snomed_code],\n          value: value.value,\n        },\n      };\n      const data = createObservationData(\n        { ...item, id: value.id },\n        state,\n        result\n      );\n      dataObjects.push(data);\n    } else if (valueType === 'valueInteger') {\n      const result = {\n        [valueType]: {\n          coding: value.snomed_code,\n          value: value.value,\n        },\n      };\n      const data = createObservationData(\n        { ...item, id: value.id },\n        state,\n        result\n      );\n      dataObjects.push(data);\n    } else if (valueType === 'valueDateTime') {\n      const result = {\n        [valueType]: {\n          coding: [JSON.parse(value.snomed_code)],\n          value: new Date(JSON.parse(value.value)).toISOString(),\n        },\n      };\n      const data = createObservationData(\n        { ...item, id: value.id },\n        state,\n        result\n      );\n      dataObjects.push(data);\n    } else if (valueType === 'valueBoolean') {\n      const result = {\n        [valueType]: {\n          coding: [JSON.parse(value.snomed_code)],\n          value: JSON.parse(value.value) === 'never' ? false : true,\n        },\n      };\n      const data = createObservationData(\n        { ...item, id: value.id },\n        state,\n        result\n      );\n      dataObjects.push(data);\n    } else {\n      const result = {\n        [valueType]: {\n          coding: [value.snomed_code],\n          value: value.value,\n        },\n      };\n\n      if (result) {\n        const data = createObservationData(item, state, result);\n        dataObjects.push(data);\n      }\n    }\n\n    return dataObjects;\n  });\n\n  return state;\n});\n\n// Post our observation resources to Satusehat\npost('Observation', $.observations);\n\n//  Store the newly created resources, created by the server, into state for the next step\nfn(state => {\n  state.observations = state.data;\n  return state;\n});\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);