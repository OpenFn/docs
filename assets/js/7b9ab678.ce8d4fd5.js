"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[16055],{28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>h});var n=t(96540);const r={},d=n.createContext(r);function i(e){const s=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function h(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(d.Provider,{value:s},e.children)}},80455:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>h,default:()=>j,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"packages/redis-docs","title":"redis@1.3.4","description":"get(key)","source":"@site/adaptors/packages/redis-docs.md","sourceDirName":"packages","slug":"/packages/redis-docs","permalink":"/adaptors/packages/redis-docs","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"redis@1.3.4","id":"redis-docs","keywords":["adaptor","redis","get","hGetAll","hget","hset","jGet","jSet","mGet","mSet","scan","set"]},"sidebar":"adaptors","previous":{"title":"Overview","permalink":"/adaptors/redis"},"next":{"title":"Configuration","permalink":"/adaptors/packages/redis-configuration-schema"}}');var r=t(74848),d=t(28453);const i={title:"redis@1.3.4",id:"redis-docs",keywords:["adaptor","redis","get","hGetAll","hget","hset","jGet","jSet","mGet","mSet","scan","set"]},h=void 0,l={},c=[{value:"Functions",id:"functions",level:2},{value:"get",id:"get",level:3},{value:"hget",id:"hget",level:3},{value:"hGetAll",id:"hgetall",level:3},{value:"hset",id:"hset",level:3},{value:"jGet",id:"jget",level:3},{value:"jSet",id:"jset",level:3},{value:"mGet",id:"mget",level:3},{value:"mSet",id:"mset",level:3},{value:"scan",id:"scan",level:3},{value:"set",id:"set",level:3},{value:"Interfaces",id:"interfaces",level:2},{value:"ScanOptions",id:"scanoptions",level:3}];function a(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("dl",{children:[(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#get",children:"get(key)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#hget",children:"hget(key, field)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#hgetall",children:"hGetAll(key)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#hset",children:"hset(key, value)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#jget",children:"jGet(key)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#jset",children:"jSet(key, value)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#mget",children:"mGet(keys)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#mset",children:"mSet(entries)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#scan",children:"scan(pattern, options)"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"#set",children:"set(key, value)"})})]}),"\n",(0,r.jsx)(s.p,{children:"This adaptor exports the following from common:"}),"\n",(0,r.jsxs)("dl",{children:[(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#cursor",children:"cursor()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#datapath",children:"dataPath()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#datavalue",children:"dataValue()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#datefns",children:"dateFns"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#each",children:"each()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#field",children:"field()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#fields",children:"fields()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#fn",children:"fn()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#fnif",children:"fnIf()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#lastreferencevalue",children:"lastReferenceValue()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#merge",children:"merge()"})}),(0,r.jsx)("dt",{children:(0,r.jsx)("a",{href:"/adaptors/packages/common-docs#sourcevalue",children:"sourceValue()"})})]}),"\n",(0,r.jsx)(s.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(s.h3,{id:"get",children:"get"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"get(key) \u21d2 Operation"})}),"\n",(0,r.jsxs)(s.p,{children:["Get the string value of a key.\nIf the key does not exist, null is returned.\nAn error is thrown if the value stored at key is not a string, because ",(0,r.jsx)(s.code,{children:"get()"})," only handles string values."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Param"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"key"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(s.td,{children:"The name of the key"})]})})]}),"\n",(0,r.jsx)(s.p,{children:"This operation writes the following keys to state:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"State Key"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"data"}),(0,r.jsx)(s.td,{children:"the result returned from Redis"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"references"}),(0,r.jsx)(s.td,{children:"an array of all previous data objects used in the Job"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Example:"})," Get the value of the patient key"]}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'get("patient");\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"hget",children:"hget"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"hget(key, field) \u21d2 Operation"})}),"\n",(0,r.jsx)(s.p,{children:"Get the value associated with a specific field in a hash stored at a specified key."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Param"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"key"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(s.td,{children:"The name of the key"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"field"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(s.td,{children:"Field"})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"This operation writes the following keys to state:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"State Key"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"data"}),(0,r.jsx)(s.td,{children:"the result returned from Redis"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"references"}),(0,r.jsx)(s.td,{children:"an array of all previous data objects used in the Job"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Example:"})," Get the value of the name field under the patient key"]}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'hget("patient", "name");\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"hgetall",children:"hGetAll"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"hGetAll(key) \u21d2 Operation"})}),"\n",(0,r.jsx)(s.p,{children:"Get all fields and values of a hash, as an object, for a specified key."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Param"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"key"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(s.td,{children:"The name of the key"})]})})]}),"\n",(0,r.jsx)(s.p,{children:"This operation writes the following keys to state:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"State Key"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"data"}),(0,r.jsx)(s.td,{children:"The hash as an object"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"references"}),(0,r.jsx)(s.td,{children:"an array of all previous data objects used in the Job"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Example:"})," Get the hash obejct at the noderedis:animals:1 key"]}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'hGetAll("noderedis:animals:1");\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"hset",children:"hset"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"hset(key, value) \u21d2 Operation"})}),"\n",(0,r.jsx)(s.p,{children:"Sets the specified fields to their respective values in the hash stored at key.\nThis function overwrites the values of specified fields that exist in the hash.\nIf key doesn't exist, a new key holding a hash is created."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Param"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"key"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(s.td,{children:"The name of the key"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"value"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"object"})}),(0,r.jsx)(s.td,{children:"The values to set"})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"This operation writes the following keys to state:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"State Key"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"references"}),(0,r.jsx)(s.td,{children:"an array of all previous data objects used in the Job"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Example:"})," Set a field and value for the ",(0,r.jsx)(s.code,{children:"patient"})," key"]}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"hset('patient', { name: 'mtuchi' });\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Example:"})," Set multiple field values for the ",(0,r.jsx)(s.code,{children:"patient"})," key"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"hset('patient', { name: 'victor', ihs_number: 12345  });\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"jget",children:"jGet"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"jGet(key) \u21d2 Operation"})}),"\n",(0,r.jsx)(s.p,{children:"Get the value at a specified path in a JSON document stored in a key"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Param"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"key"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(s.td,{children:"The key at which the JSON document is stored."})]})})]}),"\n",(0,r.jsx)(s.p,{children:"This operation writes the following keys to state:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"State Key"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"data"}),(0,r.jsx)(s.td,{children:"the result returned from Redis"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"references"}),(0,r.jsx)(s.td,{children:"an array of all previous data objects used in the Job"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Example:"})," Get JSON document value of the patient key"]}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'jGet("patient");\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"jset",children:"jSet"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"jSet(key, value) \u21d2 Operation"})}),"\n",(0,r.jsx)(s.p,{children:"Creates a JSON object at the specified key. If the key already exists, the\nexisting value will be replaced by the new value."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Param"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"key"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(s.td,{children:"The key to modify."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"value"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)("code",{children:"string"})," | ",(0,r.jsx)("code",{children:"object"})]}),(0,r.jsx)(s.td,{children:"The JSON object or string value to set."})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"This operation writes the following keys to state:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"State Key"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"references"}),(0,r.jsx)(s.td,{children:"an array of all previous data objects used in the Job"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Example:"})," Set a JSON object for the key ",(0,r.jsx)(s.code,{children:"patient"})]}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"jSet('patient', { name: 'victor', ihs_number: 12345  });\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"mget",children:"mGet"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"mGet(keys) \u21d2 Operation"})}),"\n",(0,r.jsx)(s.p,{children:"Get the values at specified paths in JSON documents stored at multiple keys."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Param"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"keys"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"Array.<string>"})}),(0,r.jsx)(s.td,{children:"The keys at which the JSON documents are stored."})]})})]}),"\n",(0,r.jsx)(s.p,{children:"This operation writes the following keys to state:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"State Key"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"data"}),(0,r.jsx)(s.td,{children:"the result returned from Redis"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"references"}),(0,r.jsx)(s.td,{children:"an array of all previous data objects used in the Job"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Example:"})," Get JSON document values of the patient and doctor keys"]}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'mGet(["patient", "doctor"]);\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"mset",children:"mSet"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"mSet(entries) \u21d2 Operation"})}),"\n",(0,r.jsx)(s.p,{children:"Set values at the root path ('$') in JSON documents stored at multiple keys.\nThis function allows setting multiple key-value pairs in Redis JSON documents in a single operation.\nIf a key already exists, its value will be replaced. If it does not exist, a new key-value pair will be created."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Param"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"entries"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"Array.<{key: string, value: (string|object)}>"})}),(0,r.jsx)(s.td,{children:"An array of key-value pairs to set in the JSON store."})]})})]}),"\n",(0,r.jsx)(s.p,{children:"This operation writes the following keys to state:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"State Key"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"references"}),(0,r.jsx)(s.td,{children:"an array of all previous data objects used in the Job"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Example:"})," Set multiple JSON objects"]}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"mSet([{ key: 'patient', value: { name: 'victor', ihs_number: 12345 } },\n      { key: 'doctor', value: { name: 'Alice', specialization: 'cardiology' } }]);\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"scan",children:"scan"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"scan(pattern, options) \u21d2 Operation"})}),"\n",(0,r.jsx)(s.p,{children:"Returns all keys which match the provided pattern.\nscan iterates the whole database to find the matching keys"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Param"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"pattern"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(s.td,{children:"A glob-style pattern"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"options"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"#scanoptions",children:(0,r.jsx)("code",{children:"ScanOptions"})})}),(0,r.jsx)(s.td,{children:"Scan options"})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"This operation writes the following keys to state:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"State Key"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"data"}),(0,r.jsx)(s.td,{children:"an array of keys which match the pattern"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"references"}),(0,r.jsx)(s.td,{children:"an array of all previous data objects used in the Job"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Example:"})," Scan for matching keys"]}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"scan('*:20240524T172736Z*');\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Example:"})," Scan for keys and fetch the string values inside"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"scan('*:20240524T172736Z*');\neach($.data, get($.data).then((state) => {\n   state.results ??= [];\n   state.results.push(state.data)\n   return state;\n})\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"set",children:"set"}),"\n",(0,r.jsx)("p",{children:(0,r.jsx)("code",{children:"set(key, value) \u21d2 Operation"})}),"\n",(0,r.jsx)(s.p,{children:"Set the string value of a key.\nIf the key already exists, its value is updated. Otherwise, a new key-value pair is created."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Param"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"key"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(s.td,{children:"The name of the key"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"value"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(s.td,{children:"The value to set"})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"This operation writes the following keys to state:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"State Key"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"references"}),(0,r.jsx)(s.td,{children:"an array of all previous data objects used in the Job"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Example:"}),' Set the "patient" key to value "mtuchi"']}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'set("patient", "mtuchi");\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,r.jsx)(s.h3,{id:"scanoptions",children:"ScanOptions"}),"\n",(0,r.jsx)(s.p,{children:"Options provided to the scan function"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Properties"})}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"type"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"string"})}),(0,r.jsx)(s.td,{children:"Limits the keys returned to those of a specified type (e.g., string, list, set, hash, json, zset or stream)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"count"}),(0,r.jsx)(s.td,{children:(0,r.jsx)("code",{children:"integer"})}),(0,r.jsx)(s.td,{children:"A hint to the server about how many elements to return in the call (default is 10)."})]})]})]}),"\n",(0,r.jsx)(s.hr,{})]})}function j(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);