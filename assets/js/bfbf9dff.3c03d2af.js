"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[81844],{70903:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=t(58168),o=(t(96540),t(15680));const l={title:"The CLI",sidebar_label:"CLI",slug:"/cli"},s=void 0,i={unversionedId:"cli",id:"version-legacy/cli",title:"The CLI",description:"- It's a hands-on way to learn about the new OpenFn CLI. By following the",source:"@site/versioned_docs/version-legacy/cli.md",sourceDirName:".",slug:"/cli",permalink:"/documentation/legacy/cli",draft:!1,editUrl:"https://github.com/openfn/docs/edit/main/versioned_docs/version-legacy/cli.md",tags:[],version:"legacy",frontMatter:{title:"The CLI",sidebar_label:"CLI",slug:"/cli"},sidebar:"docs",previous:{title:"Generic Sources",permalink:"/documentation/legacy/source-apps"},next:{title:"Troubleshooting",permalink:"/documentation/legacy/build/troubleshooting"}},r={},p=[{value:"Intro to the OpenFn CLI",id:"intro-to-the-openfn-cli",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Walkthrough &amp; Challenges",id:"walkthrough--challenges",level:2},{value:"1. Getting started with the CLI",id:"1-getting-started-with-the-cli",level:3},{value:"Tasks:",id:"tasks",level:4},{value:"\ud83c\udfc6 Challenge: Write a job that prints your name",id:"-challenge-write-a-job-that-prints-your-name",level:4},{value:"2. Using adaptor helper functions",id:"2-using-adaptor-helper-functions",level:3},{value:"Basic usage:",id:"basic-usage",level:4},{value:"Tasks:",id:"tasks-1",level:4},{value:"\ud83c\udfc6 Challenge: Get and inspect data via HTTP",id:"-challenge-get-and-inspect-data-via-http",level:4},{value:"3. Understanding <code>state</code>",id:"3-understanding-state",level:3},{value:"<code>state.configuration</code>",id:"stateconfiguration",level:4},{value:"<code>state.data</code>",id:"statedata",level:4},{value:"How can we use state?",id:"how-can-we-use-state",level:4},{value:"Tasks:",id:"tasks-2",level:4},{value:"\ud83c\udfc6 Challenge: Fetch Covid-19 metadata",id:"-challenge-fetch-covid-19-metadata",level:4},{value:"4. Additional arguments and commands",id:"4-additional-arguments-and-commands",level:3},{value:"\ud83c\udfc6 Challenge: Practice CLI arguments and commands",id:"-challenge-practice-cli-arguments-and-commands",level:4},{value:"5. Manipulating data in a sequence of operations",id:"5-manipulating-data-in-a-sequence-of-operations",level:3},{value:"Example:",id:"example",level:5},{value:"JavaScript Demo: <code>Array.reduce()</code>",id:"javascript-demo-arrayreduce",level:5},{value:"\ud83c\udfc6 Challenge: extract names &amp; emails",id:"-challenge-extract-names--emails",level:4},{value:"6. Debugging errors",id:"6-debugging-errors",level:3},{value:"Create <strong>debug.js</strong> and paste the code below",id:"create-debugjs-and-paste-the-code-below",level:5},{value:"Run <strong>openfn debug.js -a http</strong>",id:"run-openfn-debugjs--a-http",level:5},{value:"\ud83c\udfc6 Challenge: control error messages",id:"-challenge-control-error-messages",level:4},{value:"7. Each and array iteration",id:"7-each-and-array-iteration",level:3},{value:"Modify getPosts.js to group posts by user-ID",id:"modify-getpostsjs-to-group-posts-by-user-id",level:5},{value:"Run <strong>openfn getPosts.js -a http -o tmp/output.json</strong>",id:"run-openfn-getpostsjs--a-http--o-tmpoutputjson",level:5},{value:"\ud83c\udfc6 Challenge: Reduce, filter, and map",id:"-challenge-reduce-filter-and-map",level:4},{value:"8. Running Workflows",id:"8-running-workflows",level:3},{value:"Workflow",id:"workflow",level:5},{value:"Example of a workflow",id:"example-of-a-workflow",level:6},{value:"CLI Usage - Key Commands",id:"cli-usage---key-commands",level:2},{value:"Check the version",id:"check-the-version",level:3},{value:"Get help",id:"get-help",level:3},{value:"Run a job",id:"run-a-job",level:3},{value:"Change log level",id:"change-log-level",level:3},{value:"Compilation",id:"compilation",level:3}],g={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.yg)(u,(0,a.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("admonition",{title:"What is this tutorial?",type:"info"},(0,o.yg)("ul",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ul"},"It's a ",(0,o.yg)("em",{parentName:"li"},"hands-on"),' way to learn about the new OpenFn CLI. By following the\nprompts and "challenges", a developer with a bit of Javascript experience\nshould be able to write, run, and debug complex, multi-step jobs with OpenFn,\nusing nothing but a text editor and their terminal.'),(0,o.yg)("li",{parentName:"ul"},"The estimated time to finish this developer challenge is 1 to 2 hours\n(depending on your familiarity with the underlying concepts and tooling)"),(0,o.yg)("li",{parentName:"ul"},"If you are stuck and need help, please post in\n",(0,o.yg)("a",{parentName:"li",href:"https://community.openfn.org/t/about-the-job-writing-category/11/1"},"community.openfn.org")))),(0,o.yg)("h2",{id:"intro-to-the-openfn-cli"},"Intro to the OpenFn CLI"),(0,o.yg)("p",null,"The ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/OpenFn/kit/tree/main/packages/cli"},"@openfn/cli")," is a\ncommand line interface for running OpenFn workflows locally. It enables\ndevelopers to run, build, and test steps in an OpenFn workflow."),(0,o.yg)("p",null,"This CLI replaces ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/OpenFn/devtools"},"@openfn/devtools")," and\nprovides a new suite of features and improvements, including:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"a new runtime and compiler for executing and creating runnable OpenFn jobs,"),(0,o.yg)("li",{parentName:"ul"},"customizable logging output,"),(0,o.yg)("li",{parentName:"ul"},"automatic installation of language adaptors,"),(0,o.yg)("li",{parentName:"ul"},"and support for the adaptors monorepo\n(",(0,o.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors"},"@openfn/adaptors"),") where all OpenFn\nadaptor source code and documentation lives.")),(0,o.yg)("p",null,"These features are designed to make it easier and more convenient for developers\nto use and understand OpenFn."),(0,o.yg)("admonition",{title:"Looking for a way to execute jobs from OpenFn v1 locally? Use Core!",type:"caution"},(0,o.yg)("p",{parentName:"admonition"},"If you're looking for a way to execute jobs running on the OpenFn v1 platform,\nplease see the documentation for\n",(0,o.yg)("strong",{parentName:"p"},(0,o.yg)("a",{parentName:"strong",href:"https://github.com/OpenFn/core"},"@openfn/core"))," and\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/OpenFn/devtools"},"Devtools"),".")),(0,o.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Ensure you have a code editor installed on your machine (e.g.\n",(0,o.yg)("a",{parentName:"p",href:"https://code.visualstudio.com/"},"VS Code"),",\n",(0,o.yg)("a",{parentName:"p",href:"https://www.sublimetext.com/"},"Sublime"),")")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Install NodeJs ",(0,o.yg)("strong",{parentName:"p"},"v18 is the minimum version required")),(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"To install a specific version of Node.js (in this case, version 18) on\nLinux, Windows, or macOS, you can use a version manager such as nvm (Node\nVersion Manager) or any multiple runtime version manager eg:\n",(0,o.yg)("a",{parentName:"li",href:"https://github.com/asdf-vm/asdf"},"asdf"),". These tools allow you to install\nand switch between multiple versions of Node.js on the same machine. See\nbelow for instructions for different operating systems."),(0,o.yg)("li",{parentName:"ul"},"Read this article to learn how to install NodeJs in your machine\n",(0,o.yg)("a",{parentName:"li",href:"https://kinsta.com/blog/how-to-install-node-js/"},"kinsta.com/blog/how-to-install-node-js/")))),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Have a basic understanding of OpenFn\u2014check out jobs and adaptors, at least,\nin the ",(0,o.yg)("a",{parentName:"p",href:"getting-started/terminology"},"OpenFn Concepts")," of this site.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Install the OpenFn CLI with ",(0,o.yg)("inlineCode",{parentName:"p"},"npm install -g @openfn/cli")))),(0,o.yg)("h2",{id:"walkthrough--challenges"},"Walkthrough & Challenges"),(0,o.yg)("h3",{id:"1-getting-started-with-the-cli"},"1. Getting started with the CLI"),(0,o.yg)("p",null,"Let's start by running a simple command with the CLI. Type the following into\nyour terminal:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn test\n")),(0,o.yg)("p",null,"The word ",(0,o.yg)("inlineCode",{parentName:"p"},"openfn")," will invoke the CLI. The word ",(0,o.yg)("inlineCode",{parentName:"p"},"test")," will invoke the test\ncommand."),(0,o.yg)("details",null,(0,o.yg)("summary",null,"You should see some output like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},'[CLI] \u2139 Versions:\n        \u25b8 node.js     18.12.1\n        \u25b8 cli         0.0.39\n        \u25b8 runtime     0.0.24\n        \u25b8 compiler    0.0.32\n[CLI] \u2139 Running test job...\n[CLI] \u2139 Workflow object:\n[CLI] \u2139 {\n  "start": "start",\n  "jobs": [\n    {\n      "id": "start",\n      "data": {\n        "defaultAnswer": 42\n      },\n      "expression": "const fn = () => (state) => { console.log(\'Starting computer...\'); return state; }; fn()",\n      "next": {\n        "calculate": "!state.error"\n      }\n    },\n    {\n      "id": "calculate",\n      "expression": "const fn = () => (state) => { console.log(\'Calculating to life, the universe, and everything..\'); return state }; fn()",\n      "next": {\n        "result": true\n      }\n    },\n    {\n      "id": "result",\n      "expression": "const fn = () => (state) => ({ data: { answer: state.data.answer || state.data.defaultAnswer } }); fn()"\n    }\n  ]\n}\n\n[CLI] \u2714 Compilation complete\n[R/T] \u2666 Starting job start\n[JOB] \u2139 Starting computer...\n[R/T] \u2139 Operation 1 complete in 0ms\n[R/T] \u2714 Completed job start in 1ms\n[R/T] \u2666 Starting job calculate\n[JOB] \u2139 Calculating to life, the universe, and everything..\n[R/T] \u2139 Operation 1 complete in 0ms\n[R/T] \u2714 Completed job calculate in 1ms\n[R/T] \u2666 Starting job result\n[R/T] \u2139 Operation 1 complete in 0ms\n[R/T] \u2714 Completed job result in 0ms\n[CLI] \u2714 Result: 42\n\n'))),(0,o.yg)("p",null,"What we've just done is executed a JavaScript expression, which we call a ",(0,o.yg)("em",{parentName:"p"},"job"),".\nThe output prefixed with ",(0,o.yg)("inlineCode",{parentName:"p"},"[JOB]")," comes directly from ",(0,o.yg)("inlineCode",{parentName:"p"},"console.log")," statements in\nour job code. All other output is the CLI trying to tell us what it is doing."),(0,o.yg)("details",null,(0,o.yg)("summary",null,"What is a job?"),"A job is Javascript code which follows a particular set of conventions. Typically a job has one or more ",(0,o.yg)("i",null,"operations")," which perform a particular task (like pulling information from a database, creating a record, etc.) and return state for the next operation to use.",(0,o.yg)("p",null,"The test job we just ran looks like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"const fn = () => state => {\n  console.log(\n    'Calculating the answer to life, the universe, and everything...'\n  );\n  return state * 2;\n};\nexport default [fn()];\n")),(0,o.yg)("p",null,"You can see this (and a lot more detail) by running the test command with\ndebug-level logging:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn test --log debug\n"))),(0,o.yg)("h4",{id:"tasks"},"Tasks:"),(0,o.yg)("admonition",{title:"To get started with @openfn/cli",type:"info"},(0,o.yg)("ol",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Create a new folder for the repository you'll be working on by running the\nfollowing command: ",(0,o.yg)("inlineCode",{parentName:"p"},"mkdir devchallenge && cd devchallenge"))),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"While you can keep your job scripts anywhere, it's a good practice to store\n",(0,o.yg)("inlineCode",{parentName:"p"},"state.json")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"output.json")," in a ",(0,o.yg)("inlineCode",{parentName:"p"},"tmp")," folder. To do this, create a new\ndirectory called ",(0,o.yg)("inlineCode",{parentName:"p"},"tmp")," within your ",(0,o.yg)("inlineCode",{parentName:"p"},"devchallenge")," folder: ",(0,o.yg)("inlineCode",{parentName:"p"},"mkdir tmp"))),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Since ",(0,o.yg)("inlineCode",{parentName:"p"},"state.json")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"output.json")," may contain sensitive configuration\ninformation and project data, it's important to never upload them to GitHub.\nTo ensure that GitHub ignores these files, add the ",(0,o.yg)("inlineCode",{parentName:"p"},"tmp")," directory to your\n",(0,o.yg)("inlineCode",{parentName:"p"},".gitignore")," file: ",(0,o.yg)("inlineCode",{parentName:"p"},'echo "tmp" >> .gitignore'))),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"(Optional) Use the ",(0,o.yg)("inlineCode",{parentName:"p"},"tree")," command to check that your directory structure\nlooks correct. Running ",(0,o.yg)("inlineCode",{parentName:"p"},"tree -a")," in your ",(0,o.yg)("inlineCode",{parentName:"p"},"devchallenge")," folder should display\na structure like this:"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-bash"}," devchallenge\n \u251c\u2500\u2500 .gitignore\n \u2514\u2500\u2500 tmp\n     \u251c\u2500\u2500 state.json\n     \u2514\u2500\u2500 output.json\n"))))),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Create a file called ",(0,o.yg)("inlineCode",{parentName:"p"},"hello.js")," and write the following code."),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-js"},"console.log('Hello World!');\n")),(0,o.yg)("details",null,(0,o.yg)("summary",null,"What is console.log?"),(0,o.yg)("code",null,"console.log")," is a core JavaScript language function which lets us send messages to the terminal window.")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Run the job using the CLI"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn hello.js -o tmp/output.json\n")),(0,o.yg)("details",null,(0,o.yg)("summary",null,"View expected output"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"  [CLI] \u26a0 WARNING: No adaptor provided!\n  [CLI] \u26a0 This job will probably fail. Pass an adaptor with the -a flag, eg:\n            openfn job.js -a common\n  [CLI] \u2714 Compiled from helo.js\n  [R/T] \u2666 Starting job job-1\n  [JOB] \u2139 Hello World!\n  [R/T] \u2714 Completed job job-1 in 1ms\n  [CLI] \u2714 State written to tmp/output.json\n  [CLI] \u2714 Finished in 17ms \u2728\n"))))),(0,o.yg)("p",null,"Note that our ",(0,o.yg)("inlineCode",{parentName:"p"},"console.log")," statement was printed as ",(0,o.yg)("inlineCode",{parentName:"p"},"[JOB] Hello world!"),". Using\nthe console like this is helpful for debugging and/or understanding what's\nhappening inside our jobs."),(0,o.yg)("h4",{id:"-challenge-write-a-job-that-prints-your-name"},"\ud83c\udfc6 Challenge: Write a job that prints your name"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Modify ",(0,o.yg)("inlineCode",{parentName:"li"},"hello.js")," to print your name."),(0,o.yg)("li",{parentName:"ol"},"Re-run the job by running ",(0,o.yg)("inlineCode",{parentName:"li"},"openfn hello.js -a common -o tmp/output.json"),"."),(0,o.yg)("li",{parentName:"ol"},"Validate that you receive the logs below:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"[CLI] \u2714 Compiled job from hello.js\n[JOB] \u2139 My name is { YourName }\n[R/T] \u2714 Operation 1 complete in 0ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 366ms! \u2728\n")),(0,o.yg)("h3",{id:"2-using-adaptor-helper-functions"},"2. Using adaptor helper functions"),(0,o.yg)("p",null,"Adaptors are Javascript or Typescript modules that provide OpenFn users with a\nset of helper functions for simplifying communication with a specific external\nsystem. Learn more about adaptors here: ",(0,o.yg)("a",{parentName:"p",href:"/adaptors/"},"docs.openfn.org/adaptors")),(0,o.yg)("h4",{id:"basic-usage"},"Basic usage:"),(0,o.yg)("p",null,"Let\u2019s use\n",(0,o.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/@openfn/language-http"},"@openfn/language-http"),"\nadaptor to fetch a list of forms from\n",(0,o.yg)("a",{parentName:"p",href:"https://jsonplaceholder.typicode.com/"},"https://jsonplaceholder.typicode.com/")),(0,o.yg)("admonition",{title:"Understanding CLI arguments",type:"info"},(0,o.yg)("p",{parentName:"admonition"},"Use ",(0,o.yg)("inlineCode",{parentName:"p"},"-a")," to specify the adaptor; use ",(0,o.yg)("inlineCode",{parentName:"p"},"-i")," to auto-install the necessary adaptor"),(0,o.yg)("p",{parentName:"admonition"},"Run ",(0,o.yg)("inlineCode",{parentName:"p"},"openfn help")," to see the full list of CLI arguments.")),(0,o.yg)("h4",{id:"tasks-1"},"Tasks:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Create a file called ",(0,o.yg)("inlineCode",{parentName:"p"},"getPosts.js")," and write the following code"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-jsx",metastring:"title=getPosts.js",title:"getPosts.js"},"get('https://jsonplaceholder.typicode.com/posts');\nfn(state => {\n  console.log(state.data[0]);\n  return state;\n});\n"))),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Run the job by running"))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn getPosts.js -i -a http -o tmp/output.json\n")),(0,o.yg)("p",null,"Since it is our first time using the ",(0,o.yg)("inlineCode",{parentName:"p"},"http")," adaptor, we are installing the\nadaptor using ",(0,o.yg)("inlineCode",{parentName:"p"},"-i")," argument"),(0,o.yg)("details",null,(0,o.yg)("summary",null,"3. See expected CLI logs"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"  [CLI] \u2714 Installing packages...\n  [CLI] \u2714 Installed @openfn/language-http@4.2.8\n  [CLI] \u2714 Installation complete in 14.555s\n  [CLI] \u2714 Compiled from getPosts.js\n  [R/T] \u2666 Starting job job-1\n  GET request succeeded with 200 \u2713\n  [JOB] \u2139 {\n    userId: 1,\n    id: 1,\n    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n    body: 'quia et suscipit\\n' +\n      'suscipit recusandae consequuntur expedita et cum\\n' +\n      'reprehenderit molestiae ut ut quas totam\\n' +\n      'nostrum rerum est autem sunt rem eveniet architecto'\n  }\n  [R/T] \u2714 Completed job job-1 in 872ms\n  [CLI] \u2714 State written to tmp/output.json\n  [CLI] \u2714 Finished in 15.518s \u2728\n\n"))),(0,o.yg)("h4",{id:"-challenge-get-and-inspect-data-via-http"},"\ud83c\udfc6 Challenge: Get and inspect data via HTTP"),(0,o.yg)("p",null,"Using the\n",(0,o.yg)("a",{parentName:"p",href:"https://jsonplaceholder.typicode.com/users"},"https://jsonplaceholder.typicode.com/users"),"\nAPI, get a list of users and print the first user object."),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Create file called ",(0,o.yg)("inlineCode",{parentName:"li"},"getUsers.js")," and write your operation to fetch the user."),(0,o.yg)("li",{parentName:"ol"},"Run the job using the OpenFn/cli\n",(0,o.yg)("inlineCode",{parentName:"li"},"openfn getUsers.js -a http -o tmp/output.json"),"."),(0,o.yg)("li",{parentName:"ol"},"Validate that you receive this expected CLI logs:")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn getUsers.js -a http -o tmp/output.json\n")),(0,o.yg)("details",null,(0,o.yg)("summary",null,"See expected CLI logs:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"[CLI] \u2714 Compiled job from hello.js GET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 581ms\n[JOB] \u2139 {\n  id: 1,\n  name: 'Leanne Graham',\n  username: 'Bret',\n  email: 'Sincere@april.biz',\n  address: {\n    street: 'Kulas Light',\n    suite: 'Apt. 556',\n    city: 'Gwenborough',\n    zipcode: '92998-3874',\n    geo: { lat: '-37.3159', lng: '81.1496' }\n  },\n  phone: '1-770-736-8031 x56442',\n  website: 'hildegard.org',\n  company: {\n    name: 'Romaguera-Crona',\n    catchPhrase: 'Multi-layered client-server neural-net',\n    bs: 'harness real-time e-markets'\n  }\n}\n[R/T] \u2714 Operation 2 complete in 2ms\n[CLI] \u2714 Writing output to tmp/output.json [CLI] \u2714 Done in 950ms! \u2728\n"))),(0,o.yg)("h3",{id:"3-understanding-state"},"3. Understanding ",(0,o.yg)("inlineCode",{parentName:"h3"},"state")),(0,o.yg)("p",null,"If a job expression is a set of instructions for a chef (a recipe?) then the\ninitial state is all of the ingredients they need tied up in a perfect little\nbundle. See\n",(0,o.yg)("a",{parentName:"p",href:"/articles/2021/07/05/wrapping-my-head-around-jobs/#it-all-starts-with-state"},'"It all starts with state\u200b"'),"\nin the knowledge base for extra context."),(0,o.yg)("p",null,"It usually looks something like this"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "configuration": {\n    "hostUrl": "https://moh.kenya.gov.ke/dhis2",\n    "username": "someone",\n    "password": "something-secret"\n  },\n  "data": {\n    "type": "registration",\n    "patient": {\n      "age": 24,\n      "gender": "M",\n      "nationalId": "321cs7"\n    }\n  }\n}\n')),(0,o.yg)("h4",{id:"stateconfiguration"},(0,o.yg)("inlineCode",{parentName:"h4"},"state.configuration")),(0,o.yg)("p",null,"This key is where we put credentials which are used to authorize connections to\nany authenticated system that the job will interact with. (Note that this part\nof ",(0,o.yg)("inlineCode",{parentName:"p"},"state"),' is usually overwritten at runtime with a real "credential" when using\nthe OpenFn platform, rather than the CLI.)'),(0,o.yg)("admonition",{title:"Important",type:"warning"},(0,o.yg)("p",{parentName:"admonition"},"Note that ",(0,o.yg)("inlineCode",{parentName:"p"},"console.log(state)")," will display the whole state, including\n",(0,o.yg)("inlineCode",{parentName:"p"},"state.configuration")," elements such as ",(0,o.yg)("strong",{parentName:"p"},"username and password"),". Remove this\nlog whenever you're done debugging to avoid accidentally exposing sensitive\ninformation when the job is successfully deployed on production."),(0,o.yg)("p",{parentName:"admonition"},"The OpenFn platform has built in protections to \"scrub\" state from the logs, but\nwhen you're using the CLI directly you're on your own!")),(0,o.yg)("h4",{id:"statedata"},(0,o.yg)("inlineCode",{parentName:"h4"},"state.data")),(0,o.yg)("p",null,"This key is where we put data related to a specific job run. On the platform,\nit's the work-order-specific data from a triggering HTTP request or some bit of\ninformation that's passed from one job to another."),(0,o.yg)("p",null,"Using CLI, ",(0,o.yg)("inlineCode",{parentName:"p"},"state.json")," will be loaded automatically from the current directory"),(0,o.yg)("p",null,"Or you can specify the path to the state file by passing the option -s,\n--state-path"),(0,o.yg)("p",null,"Specify a path to your ",(0,o.yg)("inlineCode",{parentName:"p"},"state.json")," file with this command:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn hello.js -a http -s tmp/state.json -o tmp/output.json\n")),(0,o.yg)("p",null,"Expected CLI logs"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"[CLI] \u2714 Compiled job from hello.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 876ms\n[R/T] \u2714 Operation 2 complete in 0ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 1.222s! \u2728\n")),(0,o.yg)("h4",{id:"how-can-we-use-state"},"How can we use state?"),(0,o.yg)("p",null,"Each adaptor has a configuration schema that's recommended for use in your\n",(0,o.yg)("inlineCode",{parentName:"p"},"state.json"),". ",(0,o.yg)("a",{parentName:"p",href:"/adaptors/packages/http-configuration-schema"},"Here is an example"),"\nof how to set up ",(0,o.yg)("inlineCode",{parentName:"p"},"state.configuration")," for ",(0,o.yg)("inlineCode",{parentName:"p"},"language-http"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "username": "name@email",\n  "password": "supersecret",\n  "baseUrl": "https://jsonplaceholder.typicode.com"\n}\n')),(0,o.yg)("h4",{id:"tasks-2"},"Tasks:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Update your ",(0,o.yg)("inlineCode",{parentName:"p"},"state.json")," to look like this:"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-json",metastring:"title=state.json",title:"state.json"},'{\n  "configuration": {\n    "baseUrl": "https://jsonplaceholder.typicode.com"\n  }\n}\n')),(0,o.yg)("p",{parentName:"li"},"Since we have update our configuration in our ",(0,o.yg)("inlineCode",{parentName:"p"},"state.json")," we can now use\n",(0,o.yg)("inlineCode",{parentName:"p"},"get()")," helper function without the need to specify the ",(0,o.yg)("strong",{parentName:"p"},"baseUrl"),"\u2014i.e\n",(0,o.yg)("inlineCode",{parentName:"p"},"get('posts')"))),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Update your ",(0,o.yg)("inlineCode",{parentName:"p"},"getPosts.js")," job to look like this:"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="getPosts.js"',title:'"getPosts.js"'},"// Get all posts\nget('posts');\n\nfn(state => {\n  const posts = state.data;\n  console.log(posts[0]);\n  return state;\n});\n"))),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Now run the job using the following command"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn getPosts.js -a http -s tmp/state.json -o tmp/output.json\n")),(0,o.yg)("p",{parentName:"li"},"And validate that you see the expected CLI logs:"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"[CLI] \u2714 Compiled job from getPosts.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 120ms\n[JOB] \u2139 {\n userId: 1,\n id: 1,\n title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n body: 'quia et suscipit\\n' +\n   'suscipit recusandae consequuntur expedita et cum\\n' +\n   'reprehenderit molestiae ut ut quas totam\\n' +\n   'nostrum rerum est autem sunt rem eveniet architecto'\n}\n[R/T] \u2714 Operation 2 complete in 0ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 470ms! \u2728\n")))),(0,o.yg)("h4",{id:"-challenge-fetch-covid-19-metadata"},"\ud83c\udfc6 Challenge: Fetch Covid-19 metadata"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Using the\n",(0,o.yg)("a",{parentName:"li",href:"https://covidtracking.com/data/api"},"The Atlantic's COVID Tracking Project API"),".,\nwrite an operation that returns all covid-19 metadata.")),(0,o.yg)("admonition",{type:"tip"},(0,o.yg)("p",{parentName:"admonition"},(0,o.yg)("inlineCode",{parentName:"p"},"https://api.covidtracking.com")," as your ",(0,o.yg)("strong",{parentName:"p"},"baseUrl")," in ",(0,o.yg)("inlineCode",{parentName:"p"},"state.configuration"))),(0,o.yg)("ol",{start:2},(0,o.yg)("li",{parentName:"ol"},"Validate your output: there are a lot of ways you might choose to format or\ndisplay this data. Share your results with your administrator for feedback.")),(0,o.yg)("h3",{id:"4-additional-arguments-and-commands"},"4. Additional arguments and commands"),(0,o.yg)("h4",{id:"-challenge-practice-cli-arguments-and-commands"},"\ud83c\udfc6 Challenge: Practice CLI arguments and commands"),(0,o.yg)("p",null,"Perform these tasks and submit answers to the discussion questions to your\nadministrator for feedback."),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Compile a openfn job (",(0,o.yg)("strong",{parentName:"p"},"hello.js"),")."),(0,o.yg)("blockquote",{parentName:"li"},(0,o.yg)("p",{parentName:"blockquote"},"What's the difference between the job you wrote and the compiled job?"))),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Run a job with the log level set to ",(0,o.yg)("inlineCode",{parentName:"p"},"none"),", and then run it again with the\nlog level set to ",(0,o.yg)("inlineCode",{parentName:"p"},"debug"),"."),(0,o.yg)("blockquote",{parentName:"li"},(0,o.yg)("p",{parentName:"blockquote"},"When is it appropriate to use these different log levels?")))),(0,o.yg)("h3",{id:"5-manipulating-data-in-a-sequence-of-operations"},"5. Manipulating data in a sequence of operations"),(0,o.yg)("p",null,"In most cases you need to manipulate, clean, or transform data at some step in\nyour workflow. For example after we get data from the\n",(0,o.yg)("inlineCode",{parentName:"p"},"https://jsonplaceholder.typicode.com")," registry we might need to group the posts\nby user id. The example below shows how we can:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"get all posts and return them in ",(0,o.yg)("inlineCode",{parentName:"li"},"state.data")),(0,o.yg)("li",{parentName:"ol"},"group returned posts by ",(0,o.yg)("inlineCode",{parentName:"li"},"userId")),(0,o.yg)("li",{parentName:"ol"},"log posts with userId 1")),(0,o.yg)("h5",{id:"example"},"Example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="getPosts.js"',title:'"getPosts.js"'},"// Get all posts\nget('posts');\n\n// Group posts by user id\nfn(state => {\n  const posts = state.data;\n\n  // Group posts by userId\n  const groupPostsByUserId = posts.reduce((acc, post) => {\n    const existingValue = acc[post.userId] || [];\n    return { ...acc, [post.userId]: [...existingValue, post] };\n  }, {});\n\n  // console.log(groupPostsByUserId);\n  return { ...state, groupPostsByUserId };\n});\n\n// Log posts where userId = 1\nfn(state => {\n  const { groupPostsByUserId } = state;\n  console.log('Post with userId 1', groupPostsByUserId[1]);\n  return state;\n});\n")),(0,o.yg)("details",null,(0,o.yg)("summary",null,"What is ",(0,o.yg)("code",null,"array.reduce"),"?"),"The ",(0,o.yg)("code",null,"reduce()")," method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.",(0,o.yg)("p",null,"Perhaps the easiest-to-understand case for ",(0,o.yg)("code",null,"reduce()")," is to return\nthe sum of all the elements in an array:"),(0,o.yg)("h5",{id:"javascript-demo-arrayreduce"},"JavaScript Demo: ",(0,o.yg)("inlineCode",{parentName:"h5"},"Array.reduce()")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"const array1 = [1, 2, 3, 4];\n\n// 0 + 1 + 2 + 3 + 4\nconst initialValue = 0;\nconst sumWithInitial = array1.reduce(\n  (accumulator, currentValue) => accumulator + currentValue,\n  initialValue\n);\n\nconsole.log(sumWithInitial);\n// Expected output: 10\n\n")),(0,o.yg)("p",null,"You can learn more about ",(0,o.yg)("inlineCode",{parentName:"p"},"array.reduce")," from\n",(0,o.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"},"this article"))),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"Expected CLI logs")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"[CLI] \u2714 Compiled job from getPosts.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 825ms\n[R/T] \u2714 Operation 2 complete in 0ms\n[JOB] \u2139 Post with userId 1 [\n //All of posts for userId 1\n]\n[R/T] \u2714 Operation 3 complete in 12ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 1.239s! \u2728\n")),(0,o.yg)("h4",{id:"-challenge-extract-names--emails"},"\ud83c\udfc6 Challenge: extract names & emails"),(0,o.yg)("p",null,"Using\n",(0,o.yg)("a",{parentName:"p",href:"https://jsonplaceholder.typicode.com/posts/1/comments"},"https://jsonplaceholder.typicode.com/posts/1/comments"),"\nAPI fetch comments for post with id 1 and extract name and email from each\ncomment in that post"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Get post all comments for post id 1"),(0,o.yg)("li",{parentName:"ol"},"Extract name and email from comments"),(0,o.yg)("li",{parentName:"ol"},"Log the extracted data from comments")),(0,o.yg)("p",null,"Discuss the results with your administrator."),(0,o.yg)("h3",{id:"6-debugging-errors"},"6. Debugging errors"),(0,o.yg)("p",null,"When debugging, it\u2019s interesting to use log to have a visual representation of\nthe content of the manipulated objects (such as state)."),(0,o.yg)("p",null,"When you want to inspect the content of state in between operations, add an\n",(0,o.yg)("inlineCode",{parentName:"p"},"fn()")," block with a ",(0,o.yg)("inlineCode",{parentName:"p"},"console.log"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"// firstOperation(...);\n\nfn(state => {\n  console.log(state);\n  return state;\n});\n\n// secondOperation(...);\n")),(0,o.yg)("h5",{id:"create-debugjs-and-paste-the-code-below"},"Create ",(0,o.yg)("strong",{parentName:"h5"},"debug.js")," and paste the code below"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx",metastring:'title="debug.js"',title:'"debug.js"'},"// Get all posts\nget('posts');\n\n// Get post by index helper function\nfn(state => {\n  // const getPostbyIndex = (index) => dataValue(index)(state);\n  console.log(dataValue(1));\n\n  return { ...state };\n});\n")),(0,o.yg)("h5",{id:"run-openfn-debugjs--a-http"},"Run ",(0,o.yg)("strong",{parentName:"h5"},"openfn debug.js -a http")),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"Expected CLI logs")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"[CLI] \u2718 TypeError: path.match is not a function\n    at dataPath (/tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:258:26)\n    at dataValue (/tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:262:22)\n    at getPostbyIndex (vm:module(0):5:37)\n    at vm:module(0):18:36\n    at /tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:241:12\n    at file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/node_modules/@openfn/runtime/dist/index.js:288:26\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async run (file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/node_modules/@openfn/runtime/dist/index.js:269:18)\n    at async executeHandler (file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/dist/process/runner.js:388:20)\n")),(0,o.yg)("p",null,"As you can see from our logs that helper function ",(0,o.yg)("inlineCode",{parentName:"p"},"dataValue")," has a TypeError,\nTo troubleshoot this you can go to the documentation for ",(0,o.yg)("strong",{parentName:"p"},"dataValue ->\n",(0,o.yg)("a",{parentName:"strong",href:"/adaptors/packages/common-docs/#datavaluepath--operation"},"docs.openfn.org/adaptors/packages/common-docs/#datavaluepath--operation"))),(0,o.yg)("p",null,"According to the docs, dataValue take path which is a string type. But in our\noperation we were passing an integer, that\u2019s why we have a ",(0,o.yg)("em",{parentName:"p"},"TypeError"),". You can\nfix the error by passing a string in dataValue i.e ",(0,o.yg)("inlineCode",{parentName:"p"},"console.log(dataValue(\u201c1\u201d))")),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"Expected CLI logs")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"[CLI] \u2714 Compiled job from debug.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 722ms\n[JOB] \u2139 [Function (anonymous)]\n[R/T] \u2714 Operation 2 complete in 1ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 1.102s \u2728\n")),(0,o.yg)("p",null,"If you need more information for debugging you can pass -l debug which will give\nall information about the run"),(0,o.yg)("p",null,"i.e ",(0,o.yg)("inlineCode",{parentName:"p"},"openfn debug.js -a http -l debug")),(0,o.yg)("h4",{id:"-challenge-control-error-messages"},"\ud83c\udfc6 Challenge: control error messages"),(0,o.yg)("p",null,"Debug what is causing an error on the following line of code and display the\nerror message"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-jsx"},"// Get post where id is 180\nget('posts/180');\n")),(0,o.yg)("p",null,"Discuss the results with your administrator."),(0,o.yg)("h3",{id:"7-each-and-array-iteration"},"7. Each and array iteration"),(0,o.yg)("p",null,"We often have to perform the same operation multiple times for items in an\narray. Most of the helper functions for data manipulation are inherited from\n@openfn/language-common and are available in most of the adaptors."),(0,o.yg)("h5",{id:"modify-getpostsjs-to-group-posts-by-user-id"},"Modify getPosts.js to group posts by user-ID"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="getPosts.js"',title:'"getPosts.js"'},"// Get all posts\nget('posts');\n\n// Group posts by user\nfn(state => {\n  const posts = state.data;\n\n  // Group posts by userId\n  const groupPostsByUserId = posts.reduce((acc, post) => {\n    const existingValue = acc[post.userId] || [];\n    return { ...acc, [post.userId]: [...existingValue, post] };\n  }, {});\n\n  // console.log(groupPostsByUserId);\n  return { ...state, groupPostsByUserId };\n});\n\n// Log posts where userId = 1\nfn(state => {\n  const { groupPostsByUserId } = state;\n  const posts = groupPostsByUserId[1];\n\n  // console.log(\"Post with userId 1\", groupPostsByUserId[1]);\n  return { ...state, posts };\n});\n\neach('posts[*]', state => {\n  console.log('Post', JSON.stringify(state.data, null, 2));\n  return state;\n});\n")),(0,o.yg)("p",null,"Notice how this code uses the ",(0,o.yg)("inlineCode",{parentName:"p"},"each")," function, a helper function defined in\n",(0,o.yg)("a",{parentName:"p",href:"/adaptors/packages/common-docs/#eachdatasource-operation--operation"},"language-common"),"\nbut accessed from this job that is using language-http. Most adaptors import and\nexport many functions from ",(0,o.yg)("inlineCode",{parentName:"p"},"language-common"),"."),(0,o.yg)("h5",{id:"run-openfn-getpostsjs--a-http--o-tmpoutputjson"},"Run ",(0,o.yg)("strong",{parentName:"h5"},"openfn getPosts.js -a http -o tmp/output.json")),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"Expected CLI logs")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"[CLI] \u2714 Compiled job from getPosts.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 730ms\n[R/T] \u2714 Operation 2 complete in 0ms\n[R/T] \u2714 Operation 3 complete in 0ms\n[JOB] \u2139 Posts [\n// Posts\n]\n[R/T] \u2714 Operation 4 complete in 10ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 1.091s! \u2728\n")),(0,o.yg)("h4",{id:"-challenge-reduce-filter-and-map"},"\ud83c\udfc6 Challenge: Reduce, filter, and map"),(0,o.yg)("p",null,"Using Javascript globals i.e ",(0,o.yg)("inlineCode",{parentName:"p"},"Array.reduce"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"Array.filter")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"Array.map"),",\nbuild function that will get posts by user id."),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Create a file called job1.js"),(0,o.yg)("li",{parentName:"ol"},"Add the 1st operation which is get all posts"),(0,o.yg)("li",{parentName:"ol"},"Add 2nd operation which has a function that filter posts by id"),(0,o.yg)("li",{parentName:"ol"},"Use the function from 2nd operation to get all post for user id 1")),(0,o.yg)("p",null,"Discuss the results with your administrator."),(0,o.yg)("h3",{id:"8-running-workflows"},"8. Running Workflows"),(0,o.yg)("p",null,"As of ",(0,o.yg)("inlineCode",{parentName:"p"},"v0.0.35")," the ",(0,o.yg)("inlineCode",{parentName:"p"},"@openfn/cli")," supports running not only jobs, but also\n",(0,o.yg)("em",{parentName:"p"},"workflows"),". Running a workflow allows you to define a list of jobs and rules\nfor executing them. You can use a workflow to orchestrate the flow of data\nbetween systems in a structured and automated way."),(0,o.yg)("p",null,(0,o.yg)("em",{parentName:"p"},"For example, if you have two jobs in your workflow (GET users from system A &\nPOST users to system B), you can set up your workflow to run all jobs in\nsequence from start to finish. This imitates the\n",(0,o.yg)("a",{parentName:"em",href:"/documentation/legacy/build/triggers#flow-triggers"},"flow trigger patterns")," on the OpenFn\nplatform where a second job should run after the first one succeeds,\nrespectively, using the data returned from the first job. \u201c")),(0,o.yg)("admonition",{title:"tl;dr",type:"info"},(0,o.yg)("p",{parentName:"admonition"},"You won't have to assemble the initial state of the next job, the final state of\nthe upstream job will automatically be passed down to the downstream job as the\ninitial state.")),(0,o.yg)("h5",{id:"workflow"},"Workflow"),(0,o.yg)("p",null,"A workflow is the execution plan for running several jobs in a sequence. It is\ndefined as a JSON object that consists of the following properties:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"start")," (optional): The ID of the job that should be executed first (defaults\nto jobs","[0]",")."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"jobs")," (required): An array of job objects, each of which represents a\nspecific task to be executed.",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"id")," (required): A job name that is unique to the workflow and helps you ID\nyour job."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"configuration"),": (optional) Specifies the configuration file associated with\nthe job."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"data")," (optional): A JSON object that contains the pre-populated data."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"adaptor")," (required): Specifies the adaptor used for the job (version\noptional)."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"expression")," (required): Specifies the JavaScript file associated with the\njob. It can also be a string that contains a JavaScript function to be\nexecuted as the job."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"next")," (optional): An object that specifies which jobs to call next. All\nedges returning true will run. The object should have one or more key-value\npairs, where the key is the ID of the next job, and the value is a boolean\nexpression that determines whether the next job should be executed.If there\nare no next edges, the workflow will end.")))),(0,o.yg)("h6",{id:"example-of-a-workflow"},"Example of a workflow"),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Here's an example of a simple workflow that consists of three jobs:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="workflow.json"',title:'"workflow.json"'},'{\n  "start": "getPatients",\n  "jobs": [\n    {\n      "id": "getPatients",\n      "adaptor": "http",\n      "expression": "getPatients.js",\n      "configuration": "tmp/http-creds.json",\n      "next": {\n        "getGlobalOrgUnits": true\n      }\n    },\n    {\n      "id": "getGlobalOrgUnits",\n      "adaptor": "common",\n      "expression": "getGlobalOrgUnits.js",\n      "next": {\n        "createTEIs": true\n      }\n    },\n    {\n      "id": "createTEIs",\n      "adaptor": "dhis2",\n      "expression": "createTEIs.js",\n      "configuration": "tmp/dhis2-creds.json"\n    }\n  ]\n}\n'))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"tmp/http-creds.json"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="tmp/http-creds.json"',title:'"tmp/http-creds.json"'},'{\n  "baseUrl": "https://jsonplaceholder.typicode.com/"\n}\n'))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"tmp/dhis2-creds.json"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="tmp/dhis2-creds.json"',title:'"tmp/dhis2-creds.json"'},'{\n  "hostUrl": "https://play.dhis2.org/2.39.1.2",\n  "password": "district",\n  "username": "admin"\n}\n'))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"getPatients.js"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="getPatients.js"',title:'"getPatients.js"'},"// Get users from jsonplaceholder\nget('users');\n\n// Prepare new users as new patients\nfn(state => {\n  const newPatients = state.data;\n  return { ...state, newPatients };\n});\n"))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"getGlobalOrgUnits.js"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="getGlobalOrgUnits.js"',title:'"getGlobalOrgUnits.js"'},"// Globals: orgUnits\nfn(state => {\n  const globalOrgUnits = [\n    {\n      label: 'Njandama MCHP',\n      id: 'g8upMTyEZGZ',\n      source: 'Gwenborough',\n    },\n    {\n      label: 'Njandama MCHP',\n      id: 'g8upMTyEZGZ',\n      source: 'Wisokyburgh',\n    },\n    {\n      label: 'Njandama MCHP',\n      id: 'g8upMTyEZGZ',\n      source: 'McKenziehaven',\n    },\n    {\n      label: 'Njandama MCHP',\n      id: 'g8upMTyEZGZ',\n      source: 'South Elvis',\n    },\n    {\n      label: 'Ngelehun CHC',\n      id: 'IpHINAT79UW',\n      source: 'Roscoeview',\n    },\n    {\n      label: 'Ngelehun CHC',\n      id: 'IpHINAT79UW',\n      source: 'South Christy',\n    },\n    {\n      label: 'Ngelehun CHC',\n      id: 'IpHINAT79UW',\n      source: 'Howemouth',\n    },\n    {\n      label: 'Ngelehun CHC',\n      id: 'IpHINAT79UW',\n      source: 'Aliyaview',\n    },\n    {\n      label: 'Baoma Station CHP',\n      id: 'jNb63DIHuwU',\n      source: 'Bartholomebury',\n    },\n    {\n      label: 'Baoma Station CHP',\n      id: 'jNb63DIHuwU',\n      source: 'Lebsackbury',\n    },\n  ];\n\n  return { ...state, globalOrgUnits };\n});\n"))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"createTEIs.js"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="createTEIs.js"',title:'"createTEIs.js"'},"fn(state => {\n  const { newPatients, globalOrgUnits } = state;\n\n  const getOrgUnit = city =>\n    globalOrgUnits.find(orgUnit => orgUnit.source === city).id;\n\n  const mappedEntities = newPatients.map(patient => {\n    const [firstName = 'Patient', lastName = 'Test'] = (\n      patient.name || ''\n    ).split(' ');\n\n    const orgUnit = getOrgUnit(patient.address.city);\n\n    const attributes = [\n      { attribute: 'w75KJ2mc4zz', value: firstName },\n      { attribute: 'zDhUuAYrxNC', value: lastName },\n      { attribute: 'cejWyOfXge6', value: 'Male' },\n    ];\n\n    return { ...patient, attributes: attributes, orgUnit: orgUnit };\n  });\n\n  return { ...state, mappedEntities };\n});\n\neach(\n  'mappedEntities[*]',\n  create('trackedEntityInstances', {\n    orgUnit: dataValue('orgUnit'),\n    trackedEntityType: 'nEenWmSyUEp',\n    attributes: dataValue('attributes'),\n  })\n);\n"))),(0,o.yg)("p",null,"Run ",(0,o.yg)("inlineCode",{parentName:"p"},"openfn [path/to/workflow.json]")," to execute the workflow."),(0,o.yg)("details",null,(0,o.yg)("summary",null,"For example if you created ",(0,o.yg)("code",null,"workflow.json")," in the root of your project directory, This is how your project will look like"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"    devchallenge\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 getPatients.js\n    \u251c\u2500\u2500 createTEIs.js\n    \u251c\u2500\u2500 getGlobalOrgUnits.js\n    \u251c\u2500\u2500 workflow.json\n    \u2514\u2500\u2500 tmp\n        \u251c\u2500\u2500 http-creds.json\n        \u251c\u2500\u2500 dhis2-creds.json\n        \u2514\u2500\u2500 output.json\n"))),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn workflow.json -o tmp/output.json\n")),(0,o.yg)("p",null,"On execution, this workflow will first run the ",(0,o.yg)("inlineCode",{parentName:"p"},"getPatients.js")," job. If is\nsuccessful, ",(0,o.yg)("inlineCode",{parentName:"p"},"getGlobalOrgUnits.js")," will run using the final state of\n",(0,o.yg)("inlineCode",{parentName:"p"},"getPatients.js"),". If ",(0,o.yg)("inlineCode",{parentName:"p"},"getGlobalOrgUnits.js")," is successful, ",(0,o.yg)("inlineCode",{parentName:"p"},"createTEIs.js")," will\nrun using the final state of ",(0,o.yg)("inlineCode",{parentName:"p"},"getGlobalOrgUnits.js"),"."),(0,o.yg)("p",null,"Note that without the ",(0,o.yg)("inlineCode",{parentName:"p"},"-i")," flag, you'll need to already have your adaptor\ninstalled. To execute the workflow with the adaptor autoinstall option run this\ncommand:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn workflow.json -i -o tmp/output.json\n")),(0,o.yg)("p",null,"On execution, this workflow will first auto-install the adaptors then run the\nworkflow"),(0,o.yg)("admonition",{title:"Important",type:"danger"},(0,o.yg)("p",{parentName:"admonition"},"When working with the ",(0,o.yg)("inlineCode",{parentName:"p"},"workflow.json")," file, it is important to handle sensitive\ninformation, such as credentials and initial input data, in a secure manner. To\nensure the protection of your sensitive data, please follow the guidelines\noutlined below:"),(0,o.yg)("ol",{parentName:"admonition"},(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Configuration Key: In the ",(0,o.yg)("inlineCode",{parentName:"p"},"workflow.json")," file, specify a path to a git\nignored configuration file that will contain necessary credentials that will\nbe used to access the destination system. For example:"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n   ...\n   "configuration": "tmp/openMRS-credentials.json"\n },\n'))),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"Data Key: Incase you need to pass initial data to your job, specify a path to\na gitignored data file"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n...\n "data": "tmp/initial-data.json",\n}\n'))))),(0,o.yg)("h2",{id:"cli-usage---key-commands"},"CLI Usage - Key Commands"),(0,o.yg)("p",null,"You\u2019ll learn about these commands in the following challenges, but please refer\nto this section for the key commands used in working with the CLI."),(0,o.yg)("h3",{id:"check-the-version"},"Check the version"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn version\n")),(0,o.yg)("h3",{id:"get-help"},"Get help"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn help\n")),(0,o.yg)("h3",{id:"run-a-job"},"Run a job"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn path/to/job.js -ia {adaptor-name}\n")),(0,o.yg)("p",null,"Note: You MUST specify which adaptor to use. Pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"-i")," flag to auto-install\nthat adaptor (it's safe to do this redundantly)."),(0,o.yg)("p",null,"You can find the list of publicly available adaptors ",(0,o.yg)("a",{parentName:"p",href:"/adaptors"},"here"),"."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"Path is the job to load the job from (a .js file or a dir containing a job.js\nfile) For example ",(0,o.yg)("inlineCode",{parentName:"p"},"openfn execute hello.js ")," Reads hello.js, looks for state\nand output in foo")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"-i, --autoinstall Auto-install the language adaptor\n-a, --adaptors, --adaptor A language adaptor to use for the job\n")),(0,o.yg)("p",null,"If an adaptor is already installed by auto install, you can use the command\nwithout the ",(0,o.yg)("inlineCode",{parentName:"p"},"-i")," options. i.e ",(0,o.yg)("inlineCode",{parentName:"p"},"openfn hello.js -a http")),(0,o.yg)("h3",{id:"change-log-level"},"Change log level"),(0,o.yg)("p",null,"You can pass ",(0,o.yg)("inlineCode",{parentName:"p"},"-l info")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"--log info")," to get more feedback about what's\nhappening, or ",(0,o.yg)("inlineCode",{parentName:"p"},"--log debug")," for more details than you could ever use. Below is\nthe list of different log levels"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn hello.js -a http -l none\n")),(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:null},"log level"),(0,o.yg)("th",{parentName:"tr",align:null},"description"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"-l none")),(0,o.yg)("td",{parentName:"tr",align:null},"Quiet mode")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"-l default")),(0,o.yg)("td",{parentName:"tr",align:null},"Top level information of what is happening")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"-l info")),(0,o.yg)("td",{parentName:"tr",align:null},"Get more feedback on what is happening openfn")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"-l debug")),(0,o.yg)("td",{parentName:"tr",align:null},"Get information about runtime, cli, compiler and the job")))),(0,o.yg)("h3",{id:"compilation"},"Compilation"),(0,o.yg)("p",null,"The CLI will attempt to compile your job code into normalized Javascript. It\nwill do a number of things to make your code robust, portable, and easier to\ndebug from a pure JS perspective."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"openfn compile [path]\n")),(0,o.yg)("p",null,"Will compile the openfn job and print or save the resulting js."),(0,o.yg)("p",null,"Learn more about CLI\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/OpenFn/kit/tree/main/packages/cli"},"github.com/OpenFn/kit/")))}d.isMDXComponent=!0},15680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>c});var a=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var r=a.createContext({}),p=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},g=function(e){var n=p(e.components);return a.createElement(r.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,r=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,c=u["".concat(r,".").concat(m)]||u[m]||d[m]||l;return t?a.createElement(c,s(s({ref:n},g),{},{components:t})):a.createElement(c,s({ref:n},g))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,s=new Array(l);s[0]=m;var i={};for(var r in n)hasOwnProperty.call(n,r)&&(i[r]=n[r]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<l;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);