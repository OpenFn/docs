"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[34446],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(96540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}},65295:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"library/jobs/auto/Attendance-Non-Skillz-2021-06-14","title":"Attendance Non Skillz","description":"This job was provided by an OpenFn.org user via the job library API.","source":"@site/adaptors/library/jobs/auto/Attendance-Non-Skillz-2021-06-14.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/Attendance-Non-Skillz-2021-06-14","permalink":"/adaptors/library/jobs/auto/Attendance-Non-Skillz-2021-06-14","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Attendance Non Skillz","sidebar_label":"Attendance Non Skillz","id":"Attendance-Non-Skillz-2021-06-14","keywords":["library","job","expression","salesforce","dataPath","dataValue","each","field","fields","lastReferenceValue","map","merge","query","relationship","upsert","Array"]},"sidebar":"adaptors","previous":{"title":"Coach Session Register","permalink":"/adaptors/library/jobs/auto/Coach-Session-Register-2021-05-03"},"next":{"title":"Malaria Testing Event Statistics","permalink":"/adaptors/library/jobs/auto/Malaria-Testing-Event-Statistics-2021-05-03"}}');var s=t(74848),i=t(28453);const r={title:"Attendance Non Skillz",sidebar_label:"Attendance Non Skillz",id:"Attendance-Non-Skillz-2021-06-14",keywords:["library","job","expression","salesforce","dataPath","dataValue","each","field","fields","lastReferenceValue","map","merge","query","relationship","upsert","Array"]},o=void 0,c={},d=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("em",{children:"This job was provided by an OpenFn.org user via the job library API."}),"\n",(0,s.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Name: Attendance Non Skillz"}),"\n",(0,s.jsxs)(n.li,{children:["Adaptor: ",(0,s.jsx)(n.a,{href:"https://www.github.com/openfn/language-salesforce",children:(0,s.jsx)(n.code,{children:"@openfn/language-salesforce"})})]}),"\n",(0,s.jsxs)(n.li,{children:["Adaptor Version: ",(0,s.jsx)(n.a,{href:"https://www.github.com/openfn/language-salesforce/releases/tag/v4.3.0",children:(0,s.jsx)(n.code,{children:"v4.3.0"})})]}),"\n",(0,s.jsx)(n.li,{children:"Created about 4 years ago"}),"\n",(0,s.jsx)(n.li,{children:"Updated 5 months ago"}),"\n",(0,s.jsxs)(n.li,{children:["Score: ",(0,s.jsx)("b",{children:"0"})," (an ",(0,s.jsx)(n.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"dataPath"}),", ",(0,s.jsx)(n.code,{children:"dataValue"}),", ",(0,s.jsx)(n.code,{children:"each"}),", ",(0,s.jsx)(n.code,{children:"field"}),", ",(0,s.jsx)(n.code,{children:"fields"}),", ",(0,s.jsx)(n.code,{children:"lastReferenceValue"}),", ",(0,s.jsx)(n.code,{children:"map"}),", ",(0,s.jsx)(n.code,{children:"merge"}),", ",(0,s.jsx)(n.code,{children:"query"}),", ",(0,s.jsx)(n.code,{children:"relationship"}),", ",(0,s.jsx)(n.code,{children:"upsert"}),", ",(0,s.jsx)(n.code,{children:"Array"})]}),"\n",(0,s.jsx)(n.h2,{id:"expression",children:"Expression"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn(state => {\n  if (!state.data.form.attendance_list.update_participant_cases.item) {\n    console.log('No participant attendance data was provided, not upserting to Salesforce.');\n    return state;\n  } else {\n    // query(\n    //   `SELECT Id, Name, CommCare_Ext_ID__c FROM Event__c WHERE CommCare_Case_ID__c = '${state.data.form.attendance_list.update_participant_cases.item[0]['@id']}'`\n    // );\n\n    // fn(state => {\n    const records = lastReferenceValue('records')(state);\n    const eventName = lastReferenceValue('records[0].CommCare_Ext_ID__c')(state);\n\n    // if (!eventName) {\n    //   console.log(\n    //     `Participant not found with CommCare_Case_ID__c: ${state.data.form.attendance_list.update_participant_cases.item[0]['@id']}`\n    //   );\n    //   return state;\n    // }\n\n    return execute(\n      fn(state => {\n        // Note: lastReferenceValue selects the first item in the references array.\n        state.data.eventName = eventName ? eventName.replace(/\\//gi, '') : null;\n\n        function getSessionValue(present) {\n          switch (present.toString().toLowerCase()) {\n            case 'yes':\n              return 'X';\n            case 'no':\n              return 'A';\n            case '':\n              return 'N';\n            default:\n              return 'U';\n          }\n        }\n\n        function getSessionId(session_text) {\n          return session_text.toString().trim().slice(0, session_text.indexOf(' ')).slice(1);\n        }\n\n        function objectToArray(object) {\n          if (!object) return [];\n          return !Array.isArray(object) ? [object] : object;\n        }\n\n        state.data.form.attendance_list.update_participant_cases.item = objectToArray(\n          state.data.form.attendance_list.update_participant_cases.item\n        );\n        \n        //When GRS enters session names incorrectly in CommCare (e.g., session: \"P8 // My body is mine)\n        function findPValue(input) {\n          // Regular expression to match \"P\" followed by one or more digits, then \"//\"\n            const regex = /P(\\d+)\\s*\\/\\//;\n    \n          // Match the input against the regex\n          const match = input.match(regex);\n    \n          // If a match is found, return the captured digits as an integer\n          if (match) {\n            return parseInt(match[1], 10);\n          } else {\n            // If no match is found, return null or handle as needed\n          return 'Session_not_found';\n        }\n}\n\n        const sessionText = dataValue('form.attendance_list.session')(state);\n        const sessionId = sessionText.includes('//') ? findPValue(sessionText) : getSessionId(sessionText);\n        \n        console.log('sessionText:: ', sessionText); \n        console.log('sessionId:: ', sessionText); \n        \n        const sessionDate = dataValue(\"form.case['@date_modified']\")(state);\n\n        state.data.form.attendance_list.update_participant_cases.item =\n          state.data.form.attendance_list.update_participant_cases.item.map(item => {\n            const sessionValue = getSessionValue(item.attendance_session);\n            return {\n              ...item,\n              dynamicFields: {\n                [`Session_${sessionId}__c`]: sessionValue,\n                [`Session_${sessionId}_Date__c`]: sessionDate,\n              },\n            };\n          });\n\n        return state;\n      }),\n\n      each(\n        merge(\n          dataPath('form.attendance_list.update_participant_cases.item[*]'),\n          fields(\n            field('intervention_name', dataValue('form.intervention_name')),\n            field('eventName', dataValue('eventName')),\n            field('caseid', dataValue('form.case.@case_id'))\n          )\n        ),\n        upsert('Attendance__c', 'CommCare_Ext_ID__c', state => ({\n          ...fields(\n            relationship('Event__r', 'CommCare_Case_ID__c', dataValue('caseid')),\n            field(\n              'CommCare_Ext_ID__c',\n              state => `${state.data['@id']}-${toUTF8(state.data.intervention_name)}`\n            ),\n            relationship('Person_Attendance__r', 'Participant_Identification_Number_PID__c', dataValue('@id'))\n          ),\n          ...state.data.dynamicFields,\n        }))\n      )\n    )(state);\n  }\n});\n\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);