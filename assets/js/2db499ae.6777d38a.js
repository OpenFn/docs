"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[38991],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(96540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}},93858:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"library/jobs/auto/Load-to-DHIS2-2023-07-17","title":"Load to DHIS2","description":"This job was provided by an OpenFn.org user via the job library API.","source":"@site/adaptors/library/jobs/auto/Load-to-DHIS2-2023-07-17.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/Load-to-DHIS2-2023-07-17","permalink":"/adaptors/library/jobs/auto/Load-to-DHIS2-2023-07-17","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Load to DHIS2","sidebar_label":"Load to DHIS2","id":"Load-to-DHIS2-2023-07-17","keywords":["library","job","expression","dhis2","create","get","join","map","async"]},"sidebar":"adaptors","previous":{"title":"\ud83d\udcdc Create new events","permalink":"/adaptors/library/jobs/auto/DHIS2-Events-API"},"next":{"title":"DHIS2 Events","permalink":"/adaptors/library/jobs/auto/DHIS2-Events-2016-01-27"}}');var r=t(74848),s=t(28453);const i={title:"Load to DHIS2",sidebar_label:"Load to DHIS2",id:"Load-to-DHIS2-2023-07-17",keywords:["library","job","expression","dhis2","create","get","join","map","async"]},o=void 0,c={},l=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("em",{children:"This job was provided by an OpenFn.org user via the job library API."}),"\n",(0,r.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Name: Load to DHIS2"}),"\n",(0,r.jsxs)(n.li,{children:["Adaptor: ",(0,r.jsx)(n.a,{href:"https://www.github.com/openfn/language-dhis2",children:(0,r.jsx)(n.code,{children:"@openfn/language-dhis2"})})]}),"\n",(0,r.jsxs)(n.li,{children:["Adaptor Version: ",(0,r.jsx)(n.a,{href:"https://www.github.com/openfn/language-dhis2/releases/tag/v3.2.11",children:(0,r.jsx)(n.code,{children:"v3.2.11"})})]}),"\n",(0,r.jsx)(n.li,{children:"Created about 2 years ago"}),"\n",(0,r.jsx)(n.li,{children:"Updated 12 months ago"}),"\n",(0,r.jsxs)(n.li,{children:["Score: ",(0,r.jsx)("b",{children:"0"})," (an ",(0,r.jsx)(n.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"create"}),", ",(0,r.jsx)(n.code,{children:"get"}),", ",(0,r.jsx)(n.code,{children:"join"}),", ",(0,r.jsx)(n.code,{children:"map"}),", ",(0,r.jsx)(n.code,{children:"async"})]}),"\n",(0,r.jsx)(n.h2,{id:"expression",children:"Expression"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// build and log nested dhis2 records\nfn(state => {\n  const { patientsWithClaims } = state.data;\n  const today = new Date().toISOString().split('T')[0];\n\n  const teis = patientsWithClaims.map(p => {\n    const patient = p.resource;\n    const claims = p.claims;\n    const treatments = claims\n      .map(c => c.resource.item[0])\n      .map(t => t.productOrService.coding[0].display)\n      .join('; ');\n\n    const enrollments = claims.map(c => {\n      const claim = c.resource;\n      const display = claim.insurance && claim.insurance[0].coverage.display;\n\n      const oclMapping = {\n        PARN: 'GMfuAqBFS1g',\n        'Programme Vaccination': 'GMfuAqBFS1g',\n        'Sant\xe9 Maternelle': 'wBUDpZSS4Bh',\n      };\n\n      console.log(\n        `We could use OCL to map \"${display}\" to \"${\n          oclMapping[display] || 'q5Qyv66pIAI (mTOMADY Other)'\n        }\"`\n      );\n\n      return {\n        orgUnit: 'KUVJPjmUmWc',\n        program: oclMapping[display] || 'q5Qyv66pIAI',\n        status: 'ACTIVE', // active\n        enrolledAt: today,\n        occurredAt: today,\n      };\n    });\n\n    return {\n      orgUnit: 'KUVJPjmUmWc', // Madagascar\n      trackedEntityType: 'x5fZpgCyv50', // Patient\n      attributes: [\n        { attribute: 'rDeWj9yYtzv', value: patient.identifier[0].value },\n        { attribute: 'E4f4wBsDVgR', value: patient.name[0].family },\n        { attribute: 'Fz33peSkK1I', value: patient.name[0].given[0] },\n        {\n          attribute: 'POCXiJxpYX1',\n          value: `${treatments}`,\n        },\n        { attribute: 'dA6ShmrHmhk', value: patient.birthDate },\n        { attribute: 'mWOlfweGigO', value: patient.gender },\n      ],\n      enrollments: enrollments,\n    };\n  });\n\n  return { ...state, teis };\n});\n\n// get current TEIs\nget('tracker/trackedEntities', {\n  orgUnit: 'KUVJPjmUmWc',\n  trackedEntityType: 'x5fZpgCyv50',\n});\n\n// create upsertable array\nfn(state => {\n  const { configuration, teis } = state;\n  const existing = state.data.instances;\n\n  const createable = [];\n  const updateable = [];\n\n  teis.forEach(t => {\n    const match = existing.find(e => {\n      const idAttr = e.attributes.find(a => a.displayName == 'Unique ID');\n      return idAttr && idAttr.value == t.attributes[0].value;\n    });\n\n    if (match) {\n      const enrollments =\n        (match.enrollments && match.enrollments.concat(t.enrollments)) ||\n        t.enrollments;\n\n      updateable.push({ ...match, ...t, enrollments });\n    } else {\n      createable.push(t);\n    }\n  });\n\n  console.log(`${updateable.length} to update; ${createable.length} to create`);\n  const trackedEntities = [...createable, ...updateable];\n\n  return { configuration, trackedEntities, references: [] };\n});\n\n// send data to DHIS2\ncreate('tracker', state => ({ trackedEntities: state.trackedEntities }), {\n  params: {\n    importStrategy: 'CREATE_AND_UPDATE',\n    atomicMode: 'OBJECT',\n    async: 'false',\n  },\n});\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);