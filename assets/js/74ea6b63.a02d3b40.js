"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[11681],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var o=s(96540);const t={},i=o.createContext(t);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},82167:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"build/inbox","title":"The Inbox","description":"How it works","source":"@site/versioned_docs/version-legacy/build/inbox.md","sourceDirName":"build","slug":"/build/inbox","permalink":"/documentation/legacy/build/inbox","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/versioned_docs/version-legacy/build/inbox.md","tags":[],"version":"legacy","frontMatter":{"title":"The Inbox","sidebar_label":"Your Inbox"},"sidebar":"docs","previous":{"title":"Credentials","permalink":"/documentation/legacy/build/credentials"},"next":{"title":"Generic Sources","permalink":"/documentation/legacy/source-apps"}}');var t=s(74848),i=s(28453);const r={title:"The Inbox",sidebar_label:"Your Inbox"},a=void 0,c={},d=[{value:"How it works",id:"how-it-works",level:2},{value:"<code>202/Accepted vs 201/Created</code>",id:"202accepted-vs-201created",level:2},{value:"Synchronous vs. Asynchronous Processing",id:"synchronous-vs-asynchronous-processing",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,t.jsxs)(n.p,{children:["On the platform, each project has their own unique inbox URL, something like\n",(0,t.jsx)(n.code,{children:"https://www.openfn.org/inbox/54804f1a-4a70-4392-97cb-1f350e98e9c8"}),". That big\nstring of numbers and letters is called a ",(0,t.jsx)(n.code,{children:"UUID"}),'. It\'s your address, and the\n"place" on the web that you\'ll send data for processing by OpenFn if you\'re\ndoing real-time or "event-based" integration.']}),"\n",(0,t.jsxs)(n.p,{children:["Your project will always be listening, and whenever an HTTP request is received\nat that URL, we'll respond with a ",(0,t.jsx)(n.code,{children:"202/Accepted"})," and start processing the data\nsent either in the ",(0,t.jsx)(n.code,{children:"body"})," or the ",(0,t.jsx)(n.code,{children:"parameters"})," of that request."]}),"\n",(0,t.jsx)(n.h2,{id:"202accepted-vs-201created",children:(0,t.jsx)(n.code,{children:"202/Accepted vs 201/Created"})}),"\n",(0,t.jsxs)(n.p,{children:["You've probably heard of ",(0,t.jsx)(n.code,{children:"200/OK"}),' or other common "status codes", but the\ndifference between a ',(0,t.jsx)(n.code,{children:"201"})," and a ",(0,t.jsx)(n.code,{children:"202"})," is very interesting from an integration\nperspective."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"201/Created"})," means that we've completed processing whatever data was sent\nto us by the requester. Usually, this response is accompanied by a payload with\na new ",(0,t.jsx)(n.code,{children:"id"})," for whatever resource what created. This is ",(0,t.jsx)(n.em,{children:"not"})," what OpenFn does,\ninstead we send a ",(0,t.jsx)(n.code,{children:"202/Accepted"})," indicating that your request was acceptable and\nwe'll get to work."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["OpenFn sends a ",(0,t.jsx)(n.code,{children:"202/Accepted"})," indicating that your request has passed our\ninitial validation (i.e. the data is valid ",(0,t.jsx)(n.code,{children:"JSON"})," or parseable ",(0,t.jsx)(n.code,{children:"XML"})," and the\ninbox URL exists) and that we've enqueued it for processing."]})}),"\n",(0,t.jsx)(n.p,{children:"Behind the scenes, we've now a system of simple, durable queues that ensure we\ndon't \"drop\" this event at any point in time from here on forward."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:'We\'ll load it into the database and soon it will appear as a new "message"\nrecord in your "Inbox" page.'}),"\n",(0,t.jsx)(n.li,{children:"We'll check the triggers for all the active jobs in your project and if it\nmatches one of those triggers we'll send it to another queue for job running."}),"\n",(0,t.jsx)(n.li,{children:"We'll make sure your project is configured properly and that you haven't\nexceeded your usage limits."}),"\n",(0,t.jsx)(n.li,{children:"We'll start executing a job run, which may itself may hundreds of unique HTTP\nrequests to other endpoints."}),"\n",(0,t.jsx)(n.li,{children:'And finally we\'ll report back on the status of that run and soon it will\nappear as a new "run" in your "Activity History" page.'}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Depending on how many requests your job makes, how much data is being processed,\nand the response time of your other systems, all of this could take quite some\ntime\u2014anywhere from ",(0,t.jsx)(n.code,{children:"200ms"})," to ",(0,t.jsx)(n.code,{children:"20 minutes"}),"!"]}),"\n",(0,t.jsxs)(n.p,{children:["If the system that sends the data to OpenFn needs to know whether all the\noperations in step 4 completed successfully (what do you count as a success with\nthese various custom actions, by the way?) you should consider implementing a\nSAGA pattern, whereby after all this processing is complete you trigger another\nrequest back to the initial system reporting on the downstream tasks. This can\nbe done in OpenFn with ",(0,t.jsx)(n.a,{href:"/documentation/legacy/jobs/multiple-operations",children:"Flow Triggers"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"synchronous-vs-asynchronous-processing",children:"Synchronous vs. Asynchronous Processing"}),"\n",(0,t.jsxs)(n.p,{children:["On ",(0,t.jsx)(n.strong,{children:"OpenFn/platform"}),", processing is asynchronous by default. Multiple complex workflows may be initiated, error handling and notifications all happen downstream."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["If you send data to OpenFn Inbox, you'll receive a ",(0,t.jsx)(n.code,{children:"202"})," if successful (and ",(0,t.jsx)(n.code,{children:"502"})," if we didn't receive your data/bad request)."]}),"\n",(0,t.jsx)(n.li,{children:'We\'ll then load it into the database and soon it will appear as a new "message"\nrecord in your "Inbox" page.'}),"\n",(0,t.jsx)(n.li,{children:"We'll check the triggers for all the active jobs in your project and if it\nmatches one of those triggers we'll send it to another queue for job running."}),"\n",(0,t.jsx)(n.li,{children:"We'll make sure your project is configured properly and that you haven't\nexceeded your usage limits."}),"\n",(0,t.jsx)(n.li,{children:"We'll start executing a job run, which may itself may hundreds of unique HTTP\nrequests to other endpoints."}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.em,{children:"If you want to then send an update back to the source system... you may configure another job to send requests and updates back to the triggering source system."})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.strong,{children:"OpenFn/microservice"})," or using open-source tools, you could create a synchronous system. We've created a way to set up inbox endpoints as\n\"synchronous\", meaning they'll actually hold a connection open ",(0,t.jsx)(n.em,{children:"until"})," all of\nthe processing above is completed, and then respond with a ",(0,t.jsx)(n.code,{children:"2XX"}),", ",(0,t.jsx)(n.code,{children:"4xx"}),", or\n",(0,t.jsx)(n.code,{children:"5XX"}),". This is not recommended for high volume systems, but may be a requirement\nfor some implementations; the sprit of ",(0,t.jsx)(n.strong,{children:"OpenFn/microservice"})," is to give as much\ncontrol as possible to whoever is deploying it on their servers."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);