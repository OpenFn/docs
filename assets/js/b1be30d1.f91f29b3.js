"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[1511],{4012:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"library/jobs/auto/timeout","title":"Timeout to create a delay","description":"\ud83d\udcdc This job is an official example from OpenFn.","source":"@site/adaptors/library/jobs/auto/timeout.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/timeout","permalink":"/adaptors/library/jobs/auto/timeout","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Timeout to create a delay","sidebar_label":"\ud83d\udcdc Timeout to create a delay","id":"timeout","keywords":["library","job","expression","http","get"]},"sidebar":"adaptors","previous":{"title":"\ud83d\udcdc Promises and nested requests","permalink":"/adaptors/library/jobs/auto/promise-all-nested-requests"},"next":{"title":"\ud83d\udcdc Chaining synchronous http requests","permalink":"/adaptors/library/jobs/auto/synchronous-http-request"}}');var s=n(74848),r=n(28453);const a={title:"Timeout to create a delay",sidebar_label:"\ud83d\udcdc Timeout to create a delay",id:"timeout",keywords:["library","job","expression","http","get"]},i=void 0,l={},d=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["\ud83d\udcdc ",(0,s.jsx)("em",{children:"This job is an official example from OpenFn."})]}),"\n",(0,s.jsx)(t.h2,{id:"metadata",children:"Metadata"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Name: Timeout to create a delay"}),"\n",(0,s.jsxs)(t.li,{children:["Adaptor: ",(0,s.jsx)(t.a,{href:"https://www.github.com/openfn/language-http",children:(0,s.jsx)(t.code,{children:"@openfn/language-http"})})]}),"\n",(0,s.jsxs)(t.li,{children:["Adaptor Version: ",(0,s.jsx)(t.a,{href:"https://www.github.com/openfn/language-http",children:(0,s.jsx)(t.code,{children:"latest"})})]}),"\n",(0,s.jsx)(t.li,{children:"Created date unknown"}),"\n",(0,s.jsx)(t.li,{children:"Updated date unknown"}),"\n",(0,s.jsxs)(t.li,{children:["Score: ",(0,s.jsx)("b",{children:"100"})," (an ",(0,s.jsx)(t.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"get"})}),"\n",(0,s.jsx)(t.h2,{id:"expression",children:"Expression"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"// To properly use a timeout, wrap it in a promise. This job has two operations\n// and it executes the get(...) operation after the fn(...) operation\n// waits for 4000ms.\nfn(state => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      console.log('wait, and then resolve');\n      resolve(state);\n    }, 4000);\n  });\n});\n\nget('https://jsonplaceholder.typicode.com/todos/1');\n\n"})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var o=n(96540);const s={},r=o.createContext(s);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);