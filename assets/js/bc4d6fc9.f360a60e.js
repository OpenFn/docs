"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[55662],{28453:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>i});var o=n(96540);const t={},d=o.createContext(t);function r(e){const a=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(d.Provider,{value:a},e.children)}},76235:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>_,frontMatter:()=>r,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"library/jobs/auto/bring-formId-into-data-array-then-create-parent-and-children-in-salesforce","title":"Using merge and each","description":"\ud83d\udcdc This job is an official example from OpenFn.","source":"@site/adaptors/library/jobs/auto/bring-formId-into-data-array-then-create-parent-and-children-in-salesforce.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/bring-formId-into-data-array-then-create-parent-and-children-in-salesforce","permalink":"/adaptors/library/jobs/auto/bring-formId-into-data-array-then-create-parent-and-children-in-salesforce","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Using merge and each","sidebar_label":"\ud83d\udcdc Using merge and each","id":"bring-formId-into-data-array-then-create-parent-and-children-in-salesforce","keywords":["library","job","expression","salesforce","create","dataPath","dataValue","each","field","fields","index","join","lastReferenceValue","merge","relationship"]},"sidebar":"adaptors","previous":{"title":"\ud83d\udcdc Pre-processing data","permalink":"/adaptors/library/jobs/auto/alter-state-before-operations"},"next":{"title":"\ud83d\udcdc Using promises","permalink":"/adaptors/library/jobs/auto/complex-state-control"}}');var t=n(74848),d=n(28453);const r={title:"Using merge and each",sidebar_label:"\ud83d\udcdc Using merge and each",id:"bring-formId-into-data-array-then-create-parent-and-children-in-salesforce",keywords:["library","job","expression","salesforce","create","dataPath","dataValue","each","field","fields","index","join","lastReferenceValue","merge","relationship"]},i=void 0,l={},s=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function c(e){const a={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a.p,{children:["\ud83d\udcdc ",(0,t.jsx)("em",{children:"This job is an official example from OpenFn."})]}),"\n",(0,t.jsx)(a.h2,{id:"metadata",children:"Metadata"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Name: Using merge and each"}),"\n",(0,t.jsxs)(a.li,{children:["Adaptor: ",(0,t.jsx)(a.a,{href:"https://www.github.com/openfn/language-salesforce",children:(0,t.jsx)(a.code,{children:"@openfn/language-salesforce"})})]}),"\n",(0,t.jsxs)(a.li,{children:["Adaptor Version: ",(0,t.jsx)(a.a,{href:"https://www.github.com/openfn/language-salesforce",children:(0,t.jsx)(a.code,{children:"latest"})})]}),"\n",(0,t.jsx)(a.li,{children:"Created date unknown"}),"\n",(0,t.jsx)(a.li,{children:"Updated date unknown"}),"\n",(0,t.jsxs)(a.li,{children:["Score: ",(0,t.jsx)("b",{children:"100"})," (an ",(0,t.jsx)(a.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.code,{children:"create"}),", ",(0,t.jsx)(a.code,{children:"dataPath"}),", ",(0,t.jsx)(a.code,{children:"dataValue"}),", ",(0,t.jsx)(a.code,{children:"each"}),", ",(0,t.jsx)(a.code,{children:"field"}),", ",(0,t.jsx)(a.code,{children:"fields"}),", ",(0,t.jsx)(a.code,{children:"index"}),", ",(0,t.jsx)(a.code,{children:"join"}),", ",(0,t.jsx)(a.code,{children:"lastReferenceValue"}),", ",(0,t.jsx)(a.code,{children:"merge"}),", ",(0,t.jsx)(a.code,{children:"relationship"})]}),"\n",(0,t.jsx)(a.h2,{id:"expression",children:"Expression"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-js",children:"each(\n  join('$.data.data[*]', '$.data.formId', 'formId'),\n  create(\n    'ODK_Submission__c',\n    fields(\n      //bridgetest sandbox record type, comment out when not in use\n      field('RecordTypeId', '012J00000005hlb'),\n      //prduction record type, comment out when not in use\n      //field(\"RecordType\", \"XXXXXXXXXXXXXXXX\"),\n      // or\n      //relationship(\"RecordType\", \"name\", dataValue(\"recort_type_name\")),\n      field('Record_Type_Name__c', dataValue('record_type_id')),\n      field('ODK_Form_Name__c', dataValue('formId')),\n      field('Site_School_ID_Number__c', dataValue('site')),\n      field('BT_Staff_ID__c', dataValue('recorded_by')),\n      field('Date__c', dataValue('today')),\n      field('Head_of_Household__c', dataValue('head_of_household')),\n      field(\n        'Head_of_Household_Gender__c',\n        dataValue('head_of_household_gender')\n      ),\n      field('Head_of_Household_age__c', dataValue('head_of_household_age')),\n      field('Light_Source__c', dataValue('light_source')),\n      field('communication__c', dataValue('communication')),\n      field('transport__c', dataValue('transport')),\n      field(\n        'number_of_children_in_household__c',\n        dataValue('number_of_children')\n      ),\n      field('school_visits__c', dataValue('school_visits')),\n      field('school_visit_reason__c', dataValue('school_visit_reason')),\n      field('Village__c', dataValue('village')),\n      field('ODK_Key__c', dataValue('*meta-instance-id*'))\n    )\n  )\n),\n  each(\n    merge(\n      dataPath('individual_na[*]'),\n      fields(\n        field('metaId', dataValue('*meta-instance-id*')),\n        field('parentId', lastReferenceValue('id')),\n        field('village', dataValue('$data.village'))\n      )\n    ),\n    create(\n      'ODK_Submission__c',\n      fields(\n        //bridgetest sandbox record type, comment out when not in use\n        field('RecordTypeId', '012J00000005hla'),\n        //prduction record type, comment out when not in use\n        //field(\"RecordType\", \"XXXXXXXXXXXXXXXX\"),\n        // or\n        //relationship(\"RecordType\", \"name\", dataValue(\"recort_type_name\")),\n        field('Related_ODK_Submission__c', dataValue('parentId')),\n        field('family_name__c', dataValue('given_name')),\n        field('school_coded__c', dataValue('school_coded')),\n        field('school_type__c', dataValue('school_type')),\n        field('gender__c', dataValue('gender')),\n        field('Pays_School_Fees__c', dataValue('school_fees_yes_no')),\n        field('in_primary_school__c', dataValue('in_primary_school')),\n        field('School_Fee_Amount__c', dataValue('school_fees')),\n        field('Age__c', dataValue('age')),\n        field('surname__c', dataValue('surname')),\n        field('out_of_school_reason__c', dataValue('out_of_school_reason')),\n        field('class_level__c', dataValue('class_level')),\n        field(\n          'other_out_of_school_reason__c',\n          dataValue('other_out_of_school_reason')\n        ),\n        field('Village__c', dataValue('village')),\n        // This is a concatenation, adding the unique child ID.\n        field('ODK_Key__c', function (state) {\n          return dataValue('metaId')(state).concat('(', index()(state), ')');\n        })\n      )\n    )\n  );\n\n"})})]})}function _(e={}){const{wrapper:a}={...(0,d.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);