"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[40069],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var t=s(96540);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}},95707:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"library/jobs/auto/complex-state-control","title":"Using promises","description":"\ud83d\udcdc This job is an official example from OpenFn.","source":"@site/adaptors/library/jobs/auto/complex-state-control.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/complex-state-control","permalink":"/adaptors/library/jobs/auto/complex-state-control","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Using promises","sidebar_label":"\ud83d\udcdc Using promises","id":"complex-state-control","keywords":["library","job","expression","salesforce","query"]},"sidebar":"adaptors","previous":{"title":"\ud83d\udcdc Using merge and each","permalink":"/adaptors/library/jobs/auto/bring-formId-into-data-array-then-create-parent-and-children-in-salesforce"},"next":{"title":"\ud83d\udcdc Concat fields with nulls","permalink":"/adaptors/library/jobs/auto/concatenate-many-fields-with-nulls"}}');var r=s(74848),o=s(28453);const a={title:"Using promises",sidebar_label:"\ud83d\udcdc Using promises",id:"complex-state-control",keywords:["library","job","expression","salesforce","query"]},i=void 0,l={},c=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["\ud83d\udcdc ",(0,r.jsx)("em",{children:"This job is an official example from OpenFn."})]}),"\n",(0,r.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Name: Using promises"}),"\n",(0,r.jsxs)(n.li,{children:["Adaptor: ",(0,r.jsx)(n.a,{href:"https://www.github.com/openfn/language-salesforce",children:(0,r.jsx)(n.code,{children:"@openfn/language-salesforce"})})]}),"\n",(0,r.jsxs)(n.li,{children:["Adaptor Version: ",(0,r.jsx)(n.a,{href:"https://www.github.com/openfn/language-salesforce",children:(0,r.jsx)(n.code,{children:"latest"})})]}),"\n",(0,r.jsx)(n.li,{children:"Created date unknown"}),"\n",(0,r.jsx)(n.li,{children:"Updated date unknown"}),"\n",(0,r.jsxs)(n.li,{children:["Score: ",(0,r.jsx)("b",{children:"100"})," (an ",(0,r.jsx)(n.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"query"})}),"\n",(0,r.jsx)(n.h2,{id:"expression",children:"Expression"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Example with language-salesforce\nfn(state => {\n  // return state => {\n  return new Promise((resolve, reject) => {\n    query('SELECT Name FROM Account')(state)\n      .then(state => {\n        console.log(state.references[0].records);\n        console.log('doing stuff here');\n        return state;\n      })\n      .then(state => {\n        console.log('and in here');\n        resolve(state);\n      });\n  });\n  // };\n});\n\nfn(state => {\n  console.log('and also in here!');\n  console.log(state.references);\n  return state;\n});\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);