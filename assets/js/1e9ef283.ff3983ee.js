"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[71500],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(96540);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}},32666:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"library/jobs/auto/WF3-1-Bulk-get-Person-Visit-cases-2023-05-19","title":"WF3-1 Bulk get Person Visit cases","description":"This job was provided by an OpenFn.org user via the job library API.","source":"@site/adaptors/library/jobs/auto/WF3-1-Bulk-get-Person-Visit-cases-2023-05-19.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/WF3-1-Bulk-get-Person-Visit-cases-2023-05-19","permalink":"/adaptors/library/jobs/auto/WF3-1-Bulk-get-Person-Visit-cases-2023-05-19","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"WF3-1 Bulk get Person Visit cases","sidebar_label":"WF3-1 Bulk get Person Visit cases","id":"WF3-1-Bulk-get-Person-Visit-cases-2023-05-19","keywords":["library","job","expression","http","each","get","map"]},"sidebar":"adaptors","previous":{"title":"WF4-1 Bulk get Referral Cases","permalink":"/adaptors/library/jobs/auto/WF4-1-Bulk-get-Referral-Cases-2023-05-19"},"next":{"title":"WF2-1 Bulk get Person cases","permalink":"/adaptors/library/jobs/auto/WF2-1-Bulk-get-Person-cases-2023-05-19"}}');var s=n(74848),a=n(28453);const o={title:"WF3-1 Bulk get Person Visit cases",sidebar_label:"WF3-1 Bulk get Person Visit cases",id:"WF3-1-Bulk-get-Person-Visit-cases-2023-05-19",keywords:["library","job","expression","http","each","get","map"]},i=void 0,l={},c=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("em",{children:"This job was provided by an OpenFn.org user via the job library API."}),"\n",(0,s.jsx)(t.h2,{id:"metadata",children:"Metadata"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Name: WF3-1 Bulk get Person Visit cases"}),"\n",(0,s.jsxs)(t.li,{children:["Adaptor: ",(0,s.jsx)(t.a,{href:"https://www.github.com/openfn/language-http",children:(0,s.jsx)(t.code,{children:"@openfn/language-http"})})]}),"\n",(0,s.jsxs)(t.li,{children:["Adaptor Version: ",(0,s.jsx)(t.a,{href:"https://www.github.com/openfn/language-http/releases/tag/v4.2.8",children:(0,s.jsx)(t.code,{children:"v4.2.8"})})]}),"\n",(0,s.jsx)(t.li,{children:"Created about 2 years ago"}),"\n",(0,s.jsx)(t.li,{children:"Updated 4 months ago"}),"\n",(0,s.jsxs)(t.li,{children:["Score: ",(0,s.jsx)("b",{children:"0"})," (an ",(0,s.jsx)(t.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"each"}),", ",(0,s.jsx)(t.code,{children:"get"}),", ",(0,s.jsx)(t.code,{children:"map"})]}),"\n",(0,s.jsx)(t.h2,{id:"expression",children:"Expression"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"fn(state => {\r\n  const { baseUrl } = state.configuration;\r\n\r\n  const caseTypes = ['visite'];\r\n\r\n  //NOTE: You can use 'limit' to modify this batch size as desired\r\n  const limit = 1000; //E.g., change to 10 to process records in smaller batch sizes\r\n\r\n  //NOTE: indexedOnStart is the default sync start data the FIRST time the job runs\r\n  const indexedOnStart = '2024-05-30T03:00:00';\r\n\r\n  //NOTE: After first job run, OpenFn will check the job sync data (\"lastRunAt\") to set as the indexedOnStart\r\n  const lastRunAt =\r\n    typeof state.lastRunAt !== 'undefined' ? state.lastRunAt : indexedOnStart;\r\n  console.log('Filtering cases with indexed_on_start > than ::', lastRunAt);\r\n  \r\n  const aMinuteAgo = new Date( Date.now() - 1000 * 60 );\r\n  console.log(aMinuteAgo);\r\n\r\n  const queries = caseTypes.map(\r\n   t => `?type=${t}&indexed_on_start=${lastRunAt}&limit=${limit}`\r\n    //NOTE: If for testing, you want to fetch data for a specific historical range (e.g., between April 23 and 24)...\r\n    //...then use the query string below instead of the one above on L16, and custom adjust the index_on start/end dates\r\n   //t => `?type=${t}&indexed_on_start=2024-01-15T00:00:00&limit=${limit}&indexed_on_end=2024-01-16T23:59:59`\r\n  );\r\n\r\n  return { ...state, queries, baseUrl, payloads: [] };\r\n});\r\n\r\n// create a \"recursiveGet\" which will call itself if CommCare tells us there's\r\n// more data to fetch for the same form\r\n\r\nfn(state => {\r\n  const recursiveGet = url =>\r\n    get(\r\n      url,\r\n      {\r\n        headers: { 'content-type': 'application/json' },\r\n      },\r\n      nextState => {\r\n        const now = new Date();\r\n        const { baseUrl, data, payloads } = nextState;\r\n\r\n        const { meta, objects } = data;\r\n        console.log('Metadata in CommCare response:', meta);\r\n\r\n        const finalState = {\r\n          ...nextState,\r\n          payloads: [...payloads, ...objects],\r\n        };\r\n\r\n        if (meta.next) {\r\n          console.log('Next query detected, recursing...');\r\n          return recursiveGet(`${baseUrl}${meta.next}`)(finalState);\r\n        }\r\n        finalState.lastRunAt = now.toISOString().slice(0, 19);\r\n        return finalState;\r\n      }\r\n    );\r\n\r\n  return { ...state, recursiveGet };\r\n});\r\n\r\n// for each initial query, fetch data recursively\r\neach(\r\n  '$.queries[*]',\r\n  fn(state => {\r\n    return state.recursiveGet(`${state.baseUrl}${state.data}`)(state);\r\n  })\r\n);\r\n// log the total number of payloads returned\r\nfn(state => {\r\n  console.log('Count of payloads', state.payloads.length);\r\n\r\n  return { ...state, references: [], data: {} };\r\n});\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);