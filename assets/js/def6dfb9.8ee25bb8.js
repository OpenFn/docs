"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[3663],{8563:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var s=t(29819),a=t(74848),i=t(28453);const r={layout:"post",title:"How learning JavaScript helps me better understand OpenFn jobs",authors:"aicha",tags:["javascript","tips","jobs","learning"],featured:!0},o=void 0,l={authorsImageUrls:[void 0]},d=[{value:"What is that little <code>=&gt;</code> arrow?",id:"what-is-that-little--arrow",level:2},{value:"Falsy values",id:"falsy-values",level:2},{value:"Short-circuit evaluation, template literals, and all the short hand that used to confuse me",id:"short-circuit-evaluation-template-literals-and-all-the-short-hand-that-used-to-confuse-me",level:2},{value:"Higher-order functions &amp; iterators",id:"higher-order-functions--iterators",level:2},{value:"Objects &amp; job mappings",id:"objects--job-mappings",level:2},{value:"Next steps",id:"next-steps",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["OpenFn automation happens via ",(0,a.jsx)(n.a,{href:"/documentation/build/workflows",children:"jobs"}),' which\ndefine specific steps ("operations") that OpenFn should perform. They\'re written\nin a basic scripting language that runs on top of (and has full access to)\n',(0,a.jsx)(n.strong,{children:"Javascript"}),". A basic understanding of Javascript will take your job writing\non OpenFn to the next level. To improve my limited knowledge of JavaScript, I\nhave been taking Codecademy's\n",(0,a.jsx)(n.a,{href:"https://www.codecademy.com/learn/introduction-to-javascript",children:"Introduction to JavaScript Course"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"In this post we'll discuss:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Arrow functions"}),"\n",(0,a.jsx)(n.li,{children:"Falsy values"}),"\n",(0,a.jsx)(n.li,{children:"Other short-hand notation"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Keep reading for all the important learnings I have taken from just the first\nfour modules!"}),"\n",(0,a.jsxs)(n.h2,{id:"what-is-that-little--arrow",children:["What is that little ",(0,a.jsx)(n.code,{children:"=>"})," arrow?"]}),"\n",(0,a.jsxs)(n.p,{children:["Javascript allows us to create ",(0,a.jsx)(n.em,{children:"functions"})," which take ",(0,a.jsx)(n.em,{children:"arguments"})," and ",(0,a.jsx)(n.em,{children:"do stuff"}),"\nwith them. Most times, function declaration in Javascript looks like this:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function getAge(dateString) {\n  if (!dateString) return;\n\n  const today = new Date();\n  const birthDate = new Date(dateString);\n  var age = today.getFullYear() - birthDate.getFullYear();\n  var m = today.getMonth() - birthDate.getMonth();\n  if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n    age--;\n  }\n  return age;\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This was simple enough for me to follow. We are declaring a function,\n",(0,a.jsx)(n.code,{children:"getAge()"}),", which has the steps to calculate a person's age and can be easily\nreused throughout the job."]}),"\n",(0,a.jsx)(n.p,{children:"But other times, function writing looks like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const getAge(dateString) => {\n  if (!dateString) return;\n  // and so on...\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In OpenFn, you're often writing unnamed functions that take ",(0,a.jsx)(n.code,{children:"state"})," as their\nonly argument and you use them right away. See how concise writing and using a\nfunction can be with the arrow:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"upsert('tbl_study', 'study_id', {\n  study_id: state => state.studyIDMap[state.formType],\n});\n"})}),"\n",(0,a.jsxs)(n.p,{children:["These ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"arrow functions"})})," confused me when reading through jobs. I've learned\nthat, for the most part, they can be thought of as short-hand notation which\nremoves the need to type out ",(0,a.jsx)(n.code,{children:"function"})," for every function declaration."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["MDN has a great explanation\n",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",children:"here"}),'.\nTl;dr: "An arrow function expression is a compact alternative to a traditional\nfunction expression, but is limited and can\'t be used in all situations."']})}),"\n",(0,a.jsxs)(n.p,{children:["Further, we can make the code even more concise by also removing the\nparenthesis, curly braces, and the return keyword when certain criteria are met.\nIn the code above, the parenthesis are omitted because there are no parameters,\nand the curly braces and return keyword are omitted because the function body is\ncomposed of a single-line block. As you can see, there are a variety of ways to\nwrite functions and this course is helping me better recognize them. Some key\nterminology here is: ",(0,a.jsx)(n.code,{children:"function expression"}),", ",(0,a.jsx)(n.code,{children:"arrow function"}),",\n",(0,a.jsx)(n.code,{children:"concise function"}),", ",(0,a.jsx)(n.code,{children:"anonymous function"}),", and ",(0,a.jsx)(n.code,{children:"implicit returns"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"falsy-values",children:"Falsy values"}),"\n",(0,a.jsxs)(n.p,{children:["During the ",(0,a.jsx)(n.a,{href:"/adaptors/salesforce/#mapping-and-design-considerations",children:"mapping"}),"\nphase of integration design, we often discuss how each answer choice for\n",(0,a.jsx)(n.strong,{children:"picklist"})," values should map from the source system to the destination system.\nSometimes the mapping is simple but other times, there is an extensive list of\npossible choices that can be found in the\n",(0,a.jsx)(n.a,{href:"/documentation/get-started/terminology/#message",children:"message"})," and not all are\nrelevant to the destination system. Then the question is, ",(0,a.jsx)(n.strong,{children:"how should the job\nhandle values which are not explicitly mapped?"})]}),"\n",(0,a.jsxs)(n.p,{children:['Sometimes we hear clients say to "ignore" those values. ',(0,a.jsx)(n.strong,{children:'But what does it\nreally mean to "ignore" a value?'})," Should we set it to ",(0,a.jsx)(n.code,{children:"0"}),"? An empty string? How\nabout ",(0,a.jsx)(n.code,{children:"null"}),", ",(0,a.jsx)(n.code,{children:"undefined"})," or ",(0,a.jsx)(n.code,{children:"NaN"}),"? In Javascript these are all ",(0,a.jsx)(n.code,{children:"falsy"})," values."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["MDN is great for falsy values too! Check their explanation out\n",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Falsy",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.p,{children:"Determining what is really meant here is important and the value selected has\ndifferent implications depending on the system."}),"\n",(0,a.jsx)(n.p,{children:"Take this sample mapping for different districts in Conakry. The value left of\nthe colon is from the source system and the value to the right is for the\ndestination system."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const districtMapping = {\n  Ratoma: 'RT',\n  Kaloum: 'KL',\n  Dixinn: 'DX',\n  Matam: 'MA',\n  Matoto: 'MT',\n  Other: undefined,\n};\n"})}),"\n",(0,a.jsxs)(n.p,{children:['If the destination system is Salesforce, this mapping would not upload "Other"\nto Salesforce. However if "Other" mapped to an empty string instead, this would\nupload the empty string to Salesforce. ',(0,a.jsx)(n.strong,{children:"This distinction is especially\nimportant in cases where we are overwriting existing data."}),' For instance, if a\nstudent previously lived in Ratoma and then moved to an unknown district marked\nas "Other", ',(0,a.jsx)(n.code,{children:"undefined"})," ",(0,a.jsx)(n.em,{children:"would not"})," update the student's district in Salesforce\nbut the empty string would. Both of these are falsy values but have different\nmeanings in Salesforce."]}),"\n",(0,a.jsxs)(n.p,{children:["How about if the message includes a value for a district that ",(0,a.jsx)(n.em,{children:"is not"}),' in the\nmapping? Such as "New York". Should the job default to ',(0,a.jsx)(n.code,{children:"undefined"}),"? Or ",(0,a.jsx)(n.code,{children:"null"}),"?"]}),"\n",(0,a.jsxs)(n.p,{children:["These questions are just a few examples of how understanding ",(0,a.jsx)(n.code,{children:"falsy"})," values in\nJavascript can make it easier to implement the best mapping for the real-world\nuse case."]}),"\n",(0,a.jsx)(n.h2,{id:"short-circuit-evaluation-template-literals-and-all-the-short-hand-that-used-to-confuse-me",children:"Short-circuit evaluation, template literals, and all the short hand that used to confuse me"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Short-circuit evaluation"})}),"\n",(0,a.jsxs)(n.p,{children:["When we are syncing forms to a database, we sometimes expect different versions\nof the same form with fields present one version but not the other. One way to\nmitigate this discrepancy is by submitting a dummy value for the field whenever\nit is missing in the message. I just learned the fastest way to add this code to\nmy jobs! For example, the code below will ensure that ",(0,a.jsx)(n.code,{children:"household_id"})," always has\na value in the destination system: if ",(0,a.jsx)(n.code,{children:"survey_info/household_id"})," is present in\nthe message this will be the assigned value, otherwise it will assign the dummy\nvalue ",(0,a.jsx)(n.code,{children:"state.data.body._id"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"household_id: state.data.body['survey_info/household_id'] || state.data.body._id,\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Template literals"})}),"\n",(0,a.jsxs)(n.p,{children:['Like the arrow discussed above, the "dollar sign" was another symbol that often\nconfused me. But template literals are actually very straightforward. They\nincrease the readability of the code and make it easier to see what the\nresulting string will be. Wrap your template in the backtick (`) symbols and\nthen each variable in ',(0,a.jsx)(n.code,{children:"${}"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const sign = '$';\nconsole.log(`The ${sign} isn't so confusing!`);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"higher-order-functions--iterators",children:"Higher-order functions & iterators"}),"\n",(0,a.jsxs)(n.p,{children:["The most challenging module in the course covered ",(0,a.jsx)(n.strong,{children:"higher-order functions"}),".\nThese are defined as ",(0,a.jsx)(n.strong,{children:"functions that accept other functions as arguments and/or\nreturn functions as output."})," But why are these important and how are they used\nin OpenFn jobs? It turns out we use them quite alot! The code below is an\nexample from an existing integration with the field names replaced."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const participantsToUpdate = state.data.json.filter(data =>\n  state.idList.includes(data.id)\n);\nconst participantsToCreate = state.data.json.filter(\n  data => !state.idList.includes(data.id)\n);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This code is using a built-in JavaScript method that ",(0,a.jsx)(n.strong,{children:"helps us iterate on\narrays to manipulate elements and return values."})," The ",(0,a.jsx)(n.code,{children:".filter()"})," method is\nbeing used to return a new array after filtering out certain elements from the\noriginal array. We have declared two variables to store the new arrays:\n",(0,a.jsx)(n.code,{children:"participantsToUpdate"})," and ",(0,a.jsx)(n.code,{children:"participantsToCreate"}),". Participants whose ids are\nexisting in the destination system (or who are in the ",(0,a.jsx)(n.code,{children:"idList"})," array) are added\nto ",(0,a.jsx)(n.code,{children:"participantsToUpdate"}),", and any remaining participants are added to\n",(0,a.jsx)(n.code,{children:"participantsToCreate"}),". This filtering helped us perform the correct operations\non each participant type. For instance, later in the job, we use the filtered\narrays to only overwrite a participant's ",(0,a.jsx)(n.code,{children:"reportNumber"})," field if it is a new\nparticipant. ",(0,a.jsx)(n.code,{children:".filter()"})," is just one of many higher-order functions that power\nOpenFn jobs."]}),"\n",(0,a.jsx)(n.h2,{id:"objects--job-mappings",children:"Objects & job mappings"}),"\n",(0,a.jsxs)(n.p,{children:["The final lesson was on objects and key-value pairs--something used in almost\nevery OpenFn job! The result of the design and mapping phase of requirements\ngathering is almost always a mapping document which includes key-value pairs in\nplain English. These specifications are then translated to JavaScript via\n",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.em,{children:"objects"})}),". The code below is a snippet of an object which captures the\nkey-value pairs for states in the US."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const stateMapping = {\n   AK: 'ALASKA',\n   AZ: 'ARIZONA',\n   AR: 'ARKANSAS',\n   CA: 'CALIFORNIA',\n   ....\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The value left of the colon is how the state is represented in the source\nsystem, and the value right of the colon represents how OpenFn will send the\ndata to the destination system. This mapping process is key to integration\ndesign. Learn more about mappings\n",(0,a.jsx)(n.a,{href:"/adaptors/salesforce/#mapping-and-design-considerations",children:"here"}),"."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["MDN has more details on objects\n",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",children:"here"}),'.\nTl;dr: "The Object class represents one of JavaScript\'s data types. It is used\nto store various keyed collections and more complex entities."']})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,a.jsx)(n.p,{children:"I'm well on my way to becoming a better job reader and writer. Here are some\nnext steps:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Understand ",(0,a.jsx)(n.code,{children:"fn(state)"})," and how ",(0,a.jsx)(n.code,{children:"state"})," can be manipulated in OpenFn jobs."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Explore what's available on the JavaScript docs\n",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript",children:"site"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Sign up for the next level JavaScript course."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(96540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},29819:e=>{e.exports=JSON.parse('{"permalink":"/articles/2021/10/29/how-learning-javascript-helped-me-better-understand-jobs","editUrl":"https://github.com/openfn/docs/edit/main/articles/2021-10-29-how-learning-javascript-helped-me-better-understand-jobs.md","source":"@site/articles/2021-10-29-how-learning-javascript-helped-me-better-understand-jobs.md","title":"How learning JavaScript helps me better understand OpenFn jobs","description":"OpenFn automation happens via jobs which","date":"2021-10-29T00:00:00.000Z","tags":[{"inline":true,"label":"javascript","permalink":"/articles/tags/javascript"},{"inline":true,"label":"tips","permalink":"/articles/tags/tips"},{"inline":true,"label":"jobs","permalink":"/articles/tags/jobs"},{"inline":true,"label":"learning","permalink":"/articles/tags/learning"}],"readingTime":7.16,"hasTruncateMarker":true,"authors":[{"name":"Aicha Diallo","socials":{"github":"https://github.com/daissatou2"},"imageURL":"https://avatars.githubusercontent.com/daissatou2","key":"aicha","page":null}],"frontMatter":{"layout":"post","title":"How learning JavaScript helps me better understand OpenFn jobs","authors":"aicha","tags":["javascript","tips","jobs","learning"],"featured":true},"unlisted":false,"prevItem":{"title":"Workflow Automation; Why do it yourself when a program can do it for you?","permalink":"/articles/2022/06/07/workflow-automation"},"nextItem":{"title":"Testing a React app, the blurred line between Unit, integration and E2E","permalink":"/articles/2021/10/22/testing-react-app-with-jest-hound"}}')}}]);