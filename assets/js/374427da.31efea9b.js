"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[22869],{13748:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"jobs/each","title":"The each(...) operation","description":"The each operation allows you to perform another operation on each item in an","source":"@site/versioned_docs/version-legacy/jobs/each.md","sourceDirName":"jobs","slug":"/jobs/each","permalink":"/documentation/legacy/jobs/each","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/versioned_docs/version-legacy/jobs/each.md","tags":[],"version":"legacy","frontMatter":{"id":"each","title":"The each(...) operation"},"sidebar":"docs","previous":{"title":"Initial and final state for runs","permalink":"/documentation/legacy/jobs/state"},"next":{"title":"The OpenFn Job Studio","permalink":"/documentation/legacy/jobs/job-studio"}}');var i=n(74848),r=n(28453);const o={id:"each",title:"The each(...) operation"},s=void 0,c={},d=[{value:"Each takes two arguments",id:"each-takes-two-arguments",level:2},{value:"arrayPath",id:"arraypath",level:3},{value:"the operation",id:"the-operation",level:3},{value:"dataValue(...) <em>inside</em> each(...)",id:"datavalue-inside-each",level:2},{value:"merge(...) and bringing data &#39;down&#39; into an array:",id:"merge-and-bringing-data-down-into-an-array",level:2},{value:"beta.each",id:"betaeach",level:2}];function l(e){const a={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(a.p,{children:["The ",(0,i.jsx)(a.code,{children:"each"})," operation allows you to perform another operation on each item in an\narray."]}),"\n",(0,i.jsx)(a.h2,{id:"each-takes-two-arguments",children:"Each takes two arguments"}),"\n",(0,i.jsxs)(a.p,{children:["In other words, ",(0,i.jsx)(a.code,{children:"each(arrayPath, operation)"})," will ",(0,i.jsx)(a.em,{children:"do"})," ",(0,i.jsx)(a.code,{children:"operation"})," on each item\nit finds in the ",(0,i.jsx)(a.code,{children:"arrayPath"})," array. It takes just two arguments:"]}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsx)(a.li,{children:"an arrayPath"}),"\n",(0,i.jsx)(a.li,{children:"an operation(...)"}),"\n"]}),"\n",(0,i.jsx)(a.h3,{id:"arraypath",children:"arrayPath"}),"\n",(0,i.jsxs)(a.p,{children:["Let's look at the first argument in ",(0,i.jsx)(a.code,{children:"each"}),"... the path to the array. Consider\nthe following code using the Salesforce adaptor:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-js",children:"each(\n  dataPath('form.participants[*]'),\n  upsert(\n    'Person__c',\n    'Participant_Identification_Number_PID__c',\n    fields(\n      field('Participant_Identification_Number_PID__c', dataValue('pid')),\n      relationship('RecordType', 'Name', 'Participant'),\n      field('First_Name__c', dataValue('participant_first_name')),\n      field('Surname__c', dataValue('participant_surname')),\n      field('Mobile_Number_1__c', dataValue('mobile_number'))\n      field('Sex__c', dataValue('gender')),\n    )\n  )\n);\n"})}),"\n",(0,i.jsxs)(a.p,{children:["This will upsert a ",(0,i.jsx)(a.code,{children:"Person__c"})," resource in Salesforce for each item found in the\n",(0,i.jsx)(a.code,{children:"state.data.form.participants"})," array. You could specify this path in the\nfollowing ways:"]}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:(0,i.jsx)(a.code,{children:"'$.data.form.participants[*]'"})}),"\n",(0,i.jsx)(a.li,{children:(0,i.jsx)(a.code,{children:"dataPath('form.participants[*]')"})}),"\n"]}),"\n",(0,i.jsx)(a.p,{children:"Note the JSON path syntax."}),"\n",(0,i.jsx)(a.h3,{id:"the-operation",children:"the operation"}),"\n",(0,i.jsxs)(a.p,{children:["If there are 5 participants in there, it will execute the ",(0,i.jsx)(a.code,{children:"upsert"})," operation on\nall 5 items, in sequence. ",(0,i.jsx)(a.code,{children:"upsert"})," takes whatever arguments it takes normally\nbut it operates ",(0,i.jsx)(a.em,{children:"inside"})," the array. See below for more details on the ",(0,i.jsx)(a.em,{children:"scope"})," of\nthis operation."]}),"\n",(0,i.jsxs)(a.h2,{id:"datavalue-inside-each",children:["dataValue(...) ",(0,i.jsx)(a.em,{children:"inside"})," each(...)"]}),"\n",(0,i.jsxs)(a.p,{children:["Note that inside the ",(0,i.jsx)(a.code,{children:"each(...)"})," operation, using ",(0,i.jsx)(a.code,{children:"dataValue(path)"})," will\nevaluate a path inside each item in the array."]}),"\n",(0,i.jsx)(a.h2,{id:"merge-and-bringing-data-down-into-an-array",children:"merge(...) and bringing data 'down' into an array:"}),"\n",(0,i.jsxs)(a.p,{children:["What if you want to access data in your ",(0,i.jsx)(a.code,{children:"upsert"})," operation that does ",(0,i.jsx)(a.em,{children:"not"})," exist\nin the array itself. You could use a data preparation step (see: ",(0,i.jsx)(a.code,{children:"alterState"}),")\nor make use of ",(0,i.jsx)(a.code,{children:"merge(path, data)"})," which allows you to merge data from the\ninitial scope down into your array and access it from the ",(0,i.jsx)(a.code,{children:"upsert"})," operation."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-js",children:"each(\n  merge(\n    dataPath('form.participants[*]'),\n    fields(\n      field('school_id', dataValue('form.school.id')),\n      field('intervention_type', dataValue('form.type'))\n    )\n  ),\n  upsert(\n    'Person__c',\n    'Participant_Identification_Number_PID__c',\n    fields(\n      field('Participant_Identification_Number_PID__c', dataValue('pid')),\n      relationship('RecordType', 'Name', 'Participant'),\n      field('First_Name__c', dataValue('participant_first_name')),\n      field('Surname__c', dataValue('participant_surname')),\n      field('Mobile_Number_1__c', dataValue('mobile_number'))\n      field('Sex__c', dataValue('gender')),\n      // new fields...\n      field('School__c', dataValue('school_id')),\n      field('Intervention_Type__c', dataValue('intervention_type'))\n    )\n  )\n);\n"})}),"\n",(0,i.jsx)(a.h2,{id:"betaeach",children:"beta.each"}),"\n",(0,i.jsxs)(a.p,{children:["After using an ",(0,i.jsx)(a.code,{children:"each(...)"})," operation the scope of subsequent operations will be\ninside the array at ",(0,i.jsx)(a.code,{children:"arrayPath"}),". If you want to return to the top-level scope so\nthat you can iterate through another array rather than continuing to work inside\nthe first array called with ",(0,i.jsx)(a.code,{children:"each()"}),", you can use ",(0,i.jsx)(a.code,{children:"beta.each"})]}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.code,{children:"beta.each(...)"})," will scopes an array of data based on a JSONPath but then\n",(0,i.jsx)(a.strong,{children:"return"})," to the state it was given upon completion. See the\n",(0,i.jsx)(a.a,{href:"https://github.com/OpenFn/language-common/blob/master/src/beta.js#L44",children:"source"}),"\nhere."]}),"\n",(0,i.jsxs)(a.p,{children:["This is necessary if you string multiple ",(0,i.jsx)(a.code,{children:"each(...)"})," functions together in-line\nin the same expression. (E.g., given data which has multiple separate 'repeat\ngroups' in a form which are rendered as arrays, you want to create new records\nfor each item inside the first repeat group, then ",(0,i.jsx)(a.em,{children:"RETURN TO THE TOP LEVEL"})," of\nthe data, and then create new records for each item in the second repeat group.\nUsing ",(0,i.jsx)(a.code,{children:"beta.each(...)"})," lets you enter the first array, create your records, then\nreturn to the top level and be able to enter the second array."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-js",children:"// create some schools from the state.data.form.schools array...\nbeta.each(\n  dataPath('form.schools[*]'),\n  upsert(\n    'School__c',\n    'School_ID__c',\n    fields(\n      field('School_ID__c', dataValue('schoolId')),\n      field('School_Name__c', dataValue('schoolName')),\n    )\n  )\n);\n\n// back up at the top level, we scope the next array with each...\nbeta.each(\n  dataPath('form.participants[*]'),\n  upsert(\n    'Person__c',\n    'Participant_Identification_Number_PID__c',\n    fields(\n      field('Participant_Identification_Number_PID__c', dataValue('pid')),\n      relationship('RecordType', 'Name', 'Participant'),\n      field('First_Name__c', dataValue('participant_first_name')),\n      field('Surname__c', dataValue('participant_surname')),\n      field('Mobile_Number_1__c', dataValue('mobile_number'))\n      field('Sex__c', dataValue('gender')),\n    )\n  )\n);\n"})})]})}function h(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>s});var t=n(96540);const i={},r=t.createContext(i);function o(e){const a=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:a},e.children)}}}]);