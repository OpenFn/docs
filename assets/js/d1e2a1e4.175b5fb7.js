"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[182],{28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var r=n(96540);const d={},t=r.createContext(d);function i(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),r.createElement(t.Provider,{value:s},e.children)}},69480:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>o,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"packages/mssql-docs","title":"mssql@6.0.0","description":"describeTable(tableName, options)","source":"@site/adaptors/packages/mssql-docs.md","sourceDirName":"packages","slug":"/packages/mssql-docs","permalink":"/adaptors/packages/mssql-docs","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"mssql@6.0.0","id":"mssql-docs","keywords":["adaptor","mssql","describeTable","findValue","insert","insertMany","insertTable","modifyTable","sql","upsert","upsertIf","upsertMany"]},"sidebar":"adaptors","previous":{"title":"Overview","permalink":"/adaptors/mssql"},"next":{"title":"Configuration","permalink":"/adaptors/packages/mssql-configuration-schema"}}');var d=n(74848),t=n(28453);const i={title:"mssql@6.0.0",id:"mssql-docs",keywords:["adaptor","mssql","describeTable","findValue","insert","insertMany","insertTable","modifyTable","sql","upsert","upsertIf","upsertMany"]},l=void 0,c={},a=[{value:"Functions",id:"functions",level:2},{value:"describeTable",id:"describetable",level:3},{value:"findValue",id:"findvalue",level:3},{value:"insert",id:"insert",level:3},{value:"insertMany",id:"insertmany",level:3},{value:"insertTable",id:"inserttable",level:3},{value:"modifyTable",id:"modifytable",level:3},{value:"sql",id:"sql",level:3},{value:"upsert",id:"upsert",level:3},{value:"upsertIf",id:"upsertif",level:3},{value:"upsertMany",id:"upsertmany",level:3}];function h(e){const s={code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)("dl",{children:[(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"#describetable",children:"describeTable(tableName, options)"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"#findvalue",children:"findValue(filter)"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"#insert",children:"insert(table, record, options)"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"#insertmany",children:"insertMany(table, records, options)"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"#inserttable",children:"insertTable(tableName, columns, options)"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"#modifytable",children:"modifyTable(tableName, columns, options)"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"#sql",children:"sql(params)"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"#upsert",children:"upsert(table, uuid, record, options)"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"#upsertif",children:"upsertIf(logical, table, uuid, record, options)"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"#upsertmany",children:"upsertMany(table, uuid, records, options)"})})]}),"\n",(0,d.jsx)(s.p,{children:"This adaptor exports the following from common:"}),"\n",(0,d.jsxs)("dl",{children:[(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#alterstate",children:"alterState()"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#as",children:"as()"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#combine",children:"combine()"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#cursor",children:"cursor()"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#datapath",children:"dataPath()"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#datavalue",children:"dataValue()"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#datefns",children:"dateFns"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#each",children:"each()"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#field",children:"field()"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#fields",children:"fields()"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#fn",children:"fn()"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#fnif",children:"fnIf()"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#lastreferencevalue",children:"lastReferenceValue()"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#merge",children:"merge()"})}),(0,d.jsx)("dt",{children:(0,d.jsx)("a",{href:"/adaptors/packages/common-docs#sourcevalue",children:"sourceValue()"})})]}),"\n",(0,d.jsx)(s.h2,{id:"functions",children:"Functions"}),"\n",(0,d.jsx)(s.h3,{id:"describetable",children:"describeTable"}),"\n",(0,d.jsx)("p",{children:(0,d.jsx)("code",{children:"describeTable(tableName, options) \u21d2 Operation"})}),"\n",(0,d.jsx)(s.p,{children:"List the columns of a table in a database."}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Param"}),(0,d.jsx)(s.th,{children:"Type"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"tableName"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"The name of the table to describe"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"options"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"Optional options argument"})]})]})]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.strong,{children:"Example"})}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-js",children:"describeTable('clinic_visits')\n"})}),"\n",(0,d.jsx)(s.hr,{}),"\n",(0,d.jsx)(s.h3,{id:"findvalue",children:"findValue"}),"\n",(0,d.jsx)("p",{children:(0,d.jsx)("code",{children:"findValue(filter) \u21d2 Operation"})}),"\n",(0,d.jsx)(s.p,{children:"Fetch a uuid key given a condition"}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Param"}),(0,d.jsx)(s.th,{children:"Type"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"filter"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"A filter object with the lookup table, a uuid and the condition"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"filter.uuid"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"The uuid column to determine a matching/existing record"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"filter.relation"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"The table to lookup the value in"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"filter.where"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"The condition to use for the lookup. Values are automatically escaped for security."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"filter.operator"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"The operator to use for the lookup"})]})]})]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.strong,{children:"Example"})}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-js",children:"findValue({\n   uuid: 'id',\n   relation: 'users',\n   where: { first_name: 'Mama%', last_name: 'Cisse'},\n   operator: { first_name: 'like', last_name: '='}\n })\n"})}),"\n",(0,d.jsx)(s.hr,{}),"\n",(0,d.jsx)(s.h3,{id:"insert",children:"insert"}),"\n",(0,d.jsx)("p",{children:(0,d.jsx)("code",{children:"insert(table, record, options) \u21d2 Operation"})}),"\n",(0,d.jsx)(s.p,{children:"Insert a record"}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Param"}),(0,d.jsx)(s.th,{children:"Type"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"table"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"The target table"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"record"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"Payload data for the record as a JS object"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"options"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"Optional options argument"})]})]})]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.strong,{children:"Example"})}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-js",children:"insert(table, record, {setNull: [\"'undefined'\", \"''\"], logValues: false})\n"})}),"\n",(0,d.jsx)(s.hr,{}),"\n",(0,d.jsx)(s.h3,{id:"insertmany",children:"insertMany"}),"\n",(0,d.jsx)("p",{children:(0,d.jsx)("code",{children:"insertMany(table, records, options) \u21d2 Operation"})}),"\n",(0,d.jsx)(s.p,{children:"Insert many records, using the keys of the first as the column template"}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Param"}),(0,d.jsx)(s.th,{children:"Type"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"table"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"The target table"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"records"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"function"})}),(0,d.jsx)(s.td,{children:"A function that takes state and returns an array of records"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"options"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"Optional options argument"})]})]})]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.strong,{children:"Example"})}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-js",children:"insertMany(table, records, { setNull: false, writeSql: true, logValues: false })\n"})}),"\n",(0,d.jsx)(s.hr,{}),"\n",(0,d.jsx)(s.h3,{id:"inserttable",children:"insertTable"}),"\n",(0,d.jsx)("p",{children:(0,d.jsx)("code",{children:"insertTable(tableName, columns, options) \u21d2 Operation"})}),"\n",(0,d.jsx)(s.p,{children:"Create a table in database when given an array of columns and a table_name."}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Param"}),(0,d.jsx)(s.th,{children:"Type"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"tableName"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"The name of the table to create"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"columns"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"array"})}),(0,d.jsx)(s.td,{children:"An array of form columns"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"options"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"Optional options argument"})]})]})]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.strong,{children:"Example"})}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-js",children:"insertTable('table_name', state => state.data.map(\n  column => ({\n    name: column.name,\n    type: column.type,\n    required: true, // optional\n    unique: false, // optional - to be set to true for unique constraint\n  })\n));\n"})}),"\n",(0,d.jsx)(s.hr,{}),"\n",(0,d.jsx)(s.h3,{id:"modifytable",children:"modifyTable"}),"\n",(0,d.jsx)("p",{children:(0,d.jsx)("code",{children:"modifyTable(tableName, columns, options) \u21d2 Operation"})}),"\n",(0,d.jsx)(s.p,{children:"Alter an existing table in the database."}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Param"}),(0,d.jsx)(s.th,{children:"Type"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"tableName"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"The name of the table to alter"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"columns"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"array"})}),(0,d.jsx)(s.td,{children:"An array of form columns"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"options"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"Optional options argument"})]})]})]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.strong,{children:"Example"})}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-js",children:"modifyTable('table_name', state => state.data.map(\n  newColumn => ({\n    name: newColumn.name,\n    type: newColumn.type,\n    required: true, // optional\n    unique: false, // optional - to be set to true for unique constraint\n  })\n));\n"})}),"\n",(0,d.jsx)(s.hr,{}),"\n",(0,d.jsx)(s.h3,{id:"sql",children:"sql"}),"\n",(0,d.jsx)("p",{children:(0,d.jsx)("code",{children:"sql(params) \u21d2 Operation"})}),"\n",(0,d.jsx)(s.p,{children:"Execute an SQL statement"}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Param"}),(0,d.jsx)(s.th,{children:"Type"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsx)(s.tbody,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"params"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"Payload data for the message"})]})})]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.strong,{children:"Example"})}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-js",children:"sql({ query, options })\n"})}),"\n",(0,d.jsx)(s.hr,{}),"\n",(0,d.jsx)(s.h3,{id:"upsert",children:"upsert"}),"\n",(0,d.jsx)("p",{children:(0,d.jsx)("code",{children:"upsert(table, uuid, record, options) \u21d2 Operation"})}),"\n",(0,d.jsx)(s.p,{children:"Insert or update a record using SQL MERGE"}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Param"}),(0,d.jsx)(s.th,{children:"Type"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"table"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"The target table"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"uuid"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"The uuid column to determine a matching/existing record"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"record"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"Payload data for the record as a JS object"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"options"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"Optional options argument"})]})]})]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.strong,{children:"Example"})}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-js",children:"upsert(table, uuid, record, { setNull: \"'undefined'\", logValues: false})\nupsert(table, [uuid1, uuid2], record, { setNull: \"'undefined'\", logValues: false})\n"})}),"\n",(0,d.jsx)(s.hr,{}),"\n",(0,d.jsx)(s.h3,{id:"upsertif",children:"upsertIf"}),"\n",(0,d.jsx)("p",{children:(0,d.jsx)("code",{children:"upsertIf(logical, table, uuid, record, options) \u21d2 Operation"})}),"\n",(0,d.jsx)(s.p,{children:"Insert or update a record based on a logical condition using ON CONFLICT UPDATE"}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Param"}),(0,d.jsx)(s.th,{children:"Type"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"logical"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"a data to check existing value for."})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"table"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"The target table"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"uuid"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"The uuid column to determine a matching/existing record"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"record"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"Payload data for the record as a JS object or function"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"options"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"Optional options argument"})]})]})]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.strong,{children:"Example"})}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-js",children:"upsertIf(\n  dataValue('name'),\n  'users', // the DB table\n  'uuid', // a DB column with a unique constraint\n  { name: 'Elodie', id: 7 },\n  { writeSql:true, execute: true, logValues: false }\n)\n"})}),"\n",(0,d.jsx)(s.hr,{}),"\n",(0,d.jsx)(s.h3,{id:"upsertmany",children:"upsertMany"}),"\n",(0,d.jsx)("p",{children:(0,d.jsx)("code",{children:"upsertMany(table, uuid, records, options) \u21d2 Operation"})}),"\n",(0,d.jsx)(s.p,{children:"Insert or update multiple records using ON CONFLICT UPDATE and excluded"}),"\n",(0,d.jsxs)(s.table,{children:[(0,d.jsx)(s.thead,{children:(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.th,{children:"Param"}),(0,d.jsx)(s.th,{children:"Type"}),(0,d.jsx)(s.th,{children:"Description"})]})}),(0,d.jsxs)(s.tbody,{children:[(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"table"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"The target table"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"uuid"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"string"})}),(0,d.jsx)(s.td,{children:"The uuid column to determine a matching/existing record"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"records"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"function"})}),(0,d.jsx)(s.td,{children:"A function that takes state and returns an array of records"})]}),(0,d.jsxs)(s.tr,{children:[(0,d.jsx)(s.td,{children:"options"}),(0,d.jsx)(s.td,{children:(0,d.jsx)("code",{children:"object"})}),(0,d.jsx)(s.td,{children:"Optional options argument"})]})]})]}),"\n",(0,d.jsx)(s.p,{children:(0,d.jsx)(s.strong,{children:"Example"})}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-js",children:"upsertMany(\n 'users', 'email', records, { logValues: false }\n)\nupsertMany(\n 'users', ['email', 'phone'], records, { logValues: false }\n)\n"})}),"\n",(0,d.jsx)(s.hr,{})]})}function o(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,d.jsx)(s,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}}}]);