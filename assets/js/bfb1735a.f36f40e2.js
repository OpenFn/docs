"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[33188],{28453:(e,r,o)=>{o.d(r,{R:()=>s,x:()=>d});var t=o(96540);const n={},i=t.createContext(n);function s(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),t.createElement(i.Provider,{value:r},e.children)}},54149:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"jobs/errors","title":"Exit Codes & Errors","description":"About errors","source":"@site/versioned_docs/version-legacy/jobs/errors.md","sourceDirName":"jobs","slug":"/jobs/errors","permalink":"/documentation/legacy/jobs/errors","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/versioned_docs/version-legacy/jobs/errors.md","tags":[],"version":"legacy","frontMatter":{"title":"Exit Codes & Errors"},"sidebar":"docs","previous":{"title":"Troubleshooting","permalink":"/documentation/legacy/manage/troubleshooting-tips-on-platform"},"next":{"title":"Limits","permalink":"/documentation/legacy/jobs/limits"}}');var n=o(74848),i=o(28453);const s={title:"Exit Codes & Errors"},d=void 0,a={},l=[{value:"About errors",id:"about-errors",level:2},{value:"Standard Exit Codes",id:"standard-exit-codes",level:2},{value:"0: Success",id:"0-success",level:3},{value:"1: Error",id:"1-error",level:3},{value:"2: Timeout",id:"2-timeout",level:3},{value:"10: Core Error",id:"10-core-error",level:3},{value:"134: Out of memory",id:"134-out-of-memory",level:3},{value:"Special Exit Codes (Platform)",id:"special-exit-codes-platform",level:2},{value:"3: Failed to start",id:"3-failed-to-start",level:3},{value:"4: The NodeVM is unresponsive",id:"4-the-nodevm-is-unresponsive",level:3},{value:"5: Elixir/ErlangVM Error",id:"5-elixirerlangvm-error",level:3},{value:"6: Aborted by project administrator",id:"6-aborted-by-project-administrator",level:3},{value:"11: Node.js Error",id:"11-nodejs-error",level:3},{value:"Limits",id:"limits",level:2},{value:"NodeVM memory limits",id:"nodevm-memory-limits",level:3},{value:"Job state limits",id:"job-state-limits",level:3}];function c(e){const r={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h2,{id:"about-errors",children:"About errors"}),"\n",(0,n.jsxs)(r.p,{children:["Errors are your friends. The most important thing you can do when encountering\nan error in any step of a data integration project is to ",(0,n.jsx)(r.em,{children:"read"})," what's on the\nscreen. While this may sound obvious, it's very easy to see a big block of\ntechnical language and switch off."]}),"\n",(0,n.jsx)(r.p,{children:"Often, there are simple business reasons that a run is failing and they can be\nidentified from the error messages displayed in the logs by @openfn/core."}),"\n",(0,n.jsx)(r.h2,{id:"standard-exit-codes",children:"Standard Exit Codes"}),"\n",(0,n.jsx)(r.h3,{id:"0-success",children:"0: Success"}),"\n",(0,n.jsxs)(r.p,{children:["Exit code ",(0,n.jsx)(r.code,{children:"0"})," is a success (run succeeded, e.g. a destination system responded\nwith a ",(0,n.jsx)(r.code,{children:"200"}),")"]}),"\n",(0,n.jsx)(r.h3,{id:"1-error",children:"1: Error"}),"\n",(0,n.jsxs)(r.p,{children:["Exit code ",(0,n.jsx)(r.code,{children:"1"})," is a normally-handled error (run failed normally, e.g. a\ndestination system responded with a ",(0,n.jsx)(r.code,{children:"4XX"}),", ",(0,n.jsx)(r.code,{children:"5XX"}),", or some specialized\n",(0,n.jsx)(r.code,{children:"RequiredFieldMissing"})," error.)"]}),"\n",(0,n.jsx)(r.h3,{id:"2-timeout",children:"2: Timeout"}),"\n",(0,n.jsxs)(r.p,{children:["Exit code ",(0,n.jsx)(r.code,{children:"2"})," means that your run timed out. It exceeded the timeout you set for\nyour job, or if you're using the hosted platform on a non-enterprise plan, it\nexceeded ",(0,n.jsx)(r.code,{children:"100"})," seconds."]}),"\n",(0,n.jsx)(r.h3,{id:"10-core-error",children:"10: Core Error"}),"\n",(0,n.jsxs)(r.p,{children:["Exit code ",(0,n.jsx)(r.code,{children:"10"})," means there was an error in ",(0,n.jsx)(r.code,{children:"@openfn/core/cli.js execute"}),". It's\npossible that you job can't be run how it's written, but that various validation\nchecks failed to warn you earlier."]}),"\n",(0,n.jsx)(r.h3,{id:"134-out-of-memory",children:"134: Out of memory"}),"\n",(0,n.jsxs)(r.p,{children:["This is a standard out of memory error from the NodeVM. See\n",(0,n.jsx)(r.a,{href:"#nodevm-limits",children:"NodeVM memory limits"})," below."]}),"\n",(0,n.jsx)(r.h2,{id:"special-exit-codes-platform",children:"Special Exit Codes (Platform)"}),"\n",(0,n.jsxs)(r.p,{children:["The OpenFn platform controls the execution of all of your jobs via the ErlangVM.\n(Learn about Erlang ",(0,n.jsx)(r.a,{href:"https://www.erlang.org/",children:"here"}),".) The following exit codes\nare applied at the level of this controlling VM, rather than down inside your\nrun's NodeVM."]}),"\n",(0,n.jsx)(r.h3,{id:"3-failed-to-start",children:"3: Failed to start"}),"\n",(0,n.jsxs)(r.p,{children:["Exit code ",(0,n.jsx)(r.code,{children:"3"})," means the run could not be started due to an Erlang error. This\ncould relate to network traffic, but very rare as an error which takes place\n",(0,n.jsx)(r.em,{children:"before"})," the run is started will be retried\u2014with an exponential backoff\u2014for a\nvery long time."]}),"\n",(0,n.jsx)(r.h3,{id:"4-the-nodevm-is-unresponsive",children:"4: The NodeVM is unresponsive"}),"\n",(0,n.jsxs)(r.p,{children:["Exit code ",(0,n.jsx)(r.code,{children:"4"})," means that the NodeVM running your job became unresponsive. It\nattempted to exit after the timeout but couldn't, so we shut down the process\nfrom the controlling ErlangVM."]}),"\n",(0,n.jsx)(r.h3,{id:"5-elixirerlangvm-error",children:"5: Elixir/ErlangVM Error"}),"\n",(0,n.jsxs)(r.p,{children:["Exit code ",(0,n.jsx)(r.code,{children:"5"})," means we encountered an unexpected error during the execution of\nyour job which could only be caught by the controlling ErlangVM. Errors like\nthis are very rare and trigger an internal audit by the OpenFN engineering team."]}),"\n",(0,n.jsx)(r.h3,{id:"6-aborted-by-project-administrator",children:"6: Aborted by project administrator"}),"\n",(0,n.jsxs)(r.p,{children:["Exit code ",(0,n.jsx)(r.code,{children:"6"})," means that a run created and queued for execution but then\nsubsequently aborted by request of an administrator or owner of that project."]}),"\n",(0,n.jsx)(r.h3,{id:"11-nodejs-error",children:"11: Node.js Error"}),"\n",(0,n.jsxs)(r.p,{children:["Exit code ",(0,n.jsx)(r.code,{children:"11"})," means that there was an error in the NodeVM execution but the\nexit code itself couldn't be captured by our application."]}),"\n",(0,n.jsx)(r.h2,{id:"limits",children:"Limits"}),"\n",(0,n.jsxs)(r.p,{children:["We've shifted this content to a dedicated ",(0,n.jsx)(r.a,{href:"/documentation/legacy/jobs/limits",children:"limits"}),"\npage."]}),"\n",(0,n.jsx)(r.h3,{id:"nodevm-memory-limits",children:(0,n.jsx)(r.a,{href:"/documentation/legacy/jobs/limits#nodevm-memory-limits",children:"NodeVM memory limits"})}),"\n",(0,n.jsx)(r.h3,{id:"job-state-limits",children:(0,n.jsx)(r.a,{href:"/documentation/legacy/jobs/limits#job-state-limits",children:"Job state limits"})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);