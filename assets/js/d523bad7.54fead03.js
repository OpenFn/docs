"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[86963],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(96540);const a={},r=s.createContext(a);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:t},e.children)}},33832:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/passing-state-steps-17bc7cfe23cd67dd8cf13db396f77c9b.png"},46074:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/state-javascript-3f1f25457b3d41d55ff5192953265f65.png"},91929:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"jobs/state","title":"Input and output state","description":"Each Job requires an input state and (in most cases) will produce an output","source":"@site/docs/jobs/state.md","sourceDirName":"jobs","slug":"/jobs/state","permalink":"/documentation/jobs/state","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/docs/jobs/state.md","tags":[],"version":"current","frontMatter":{"title":"Input and output state"},"sidebar":"docs","previous":{"title":"Job Writing Guide","permalink":"/documentation/jobs/job-writing-guide"},"next":{"title":"Javascript Tips","permalink":"/documentation/jobs/javascript"}}');var a=n(74848),r=n(28453);const o={title:"Input and output state"},i=void 0,l={},d=[{value:"State Keys",id:"state-keys",level:2},{value:"Input &amp; output state for runs",id:"input--output-state-for-runs",level:2},{value:"Webhook triggered runs",id:"webhook-triggered-runs",level:3},{value:"Kafka triggered runs",id:"kafka-triggered-runs",level:3},{value:"Cron triggered runs",id:"cron-triggered-runs",level:3},{value:"Input &amp; output state for steps",id:"input--output-state-for-steps",level:2},{value:"On success",id:"on-success",level:3},{value:"On failure",id:"on-failure",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Each Job requires an input state and (in most cases) will produce an output\nstate. This article explains these concepts in greater detail."}),"\n",(0,a.jsx)(t.p,{children:"State is just a Javascript object. It is the means via which Jobs share\ninformation between each other. It also provides a common scope for Operations\nto read from and write to."}),"\n",(0,a.jsx)(t.p,{children:"The final state form a Job must always be a serializable Javascript object (ie,\na JSON object). Any non-serializable keys will be removed."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Job State Overview",src:n(46074).A+"",width:"960",height:"540"})}),"\n",(0,a.jsx)(t.admonition,{title:"A note on terminology",type:"tip",children:(0,a.jsxs)(t.p,{children:["Input state is often referred to as ",(0,a.jsx)(t.em,{children:"initial state"}),", and output state is often\nreferred as ",(0,a.jsx)(t.em,{children:"final state"}),". These terms can safely be used interchangeably."]})}),"\n",(0,a.jsx)(t.h2,{id:"state-keys",children:"State Keys"}),"\n",(0,a.jsx)(t.p,{children:"State objects tend to have the following keys:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"data"}),": a temporary information store, usually used to save the result of\nparticular operation"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"configuration"}),": an object containing credential data"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"references"}),": a history of previous ",(0,a.jsx)(t.code,{children:"data"})," values"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"response"}),": often used by adaptors (like http) to save the raw http response\nfrom a request"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"errors"}),": a list of errors generated by a particular Workflow, indexed by Job\nname."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"At the end of a Job, the configuration key will be removed, along with any other\nnon serialisable keys."}),"\n",(0,a.jsxs)(t.p,{children:["Adaptors will occasionally write extra information to state during a run - for\nexample, database Adaptors tend to write a ",(0,a.jsx)(t.code,{children:"client"})," key to state, used to track\nthe database connection. These will be removed at the end of a Job."]}),"\n",(0,a.jsx)(t.h2,{id:"input--output-state-for-runs",children:"Input & output state for runs"}),"\n",(0,a.jsx)(t.p,{children:"Depending on whether you're running Workflows locally via the CLI or on the app, the input\nstate for a Run must be generated differently:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["When manually creating a work order, you must select or generate your input\nmanually (e.g., by creating a custom ",(0,a.jsx)(t.code,{children:"Input"})," on the app or ",(0,a.jsx)(t.code,{children:"state.json"})," file\nif working locally ",(0,a.jsx)(t.a,{href:"/documentation/cli",children:"in the CLI"}),")."]}),"\n",(0,a.jsx)(t.li,{children:"When a work order is automatically created via a webhook trigger or cron\ntrigger, state will be created as described below."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"The final state of a Run is determined by what's returned from the last\noperation. Remember that job expressions are a series of operations: they each\ntake state and return state, after creating any number of side effects. The final returned\nstate controls what is output by the run at the end of all of these operations."}),"\n",(0,a.jsx)(t.p,{children:"Best practice is to include a final state cleanup step that removes any data\nthat should not persist between runs or be output (like PII), for example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"// get data from a data source\nget('https://jsonplaceholder.typicode.com/users')\n\n// store retrieved data in state for use later in job\nfn(state => {\n    state.users = state.data;\n  return state;\n});\n\n// get more data from another data source\nget('https://jsonplaceholder.typicode.com/posts')\n\n// store additional retrieved data in state for use later in job\nfn(state => {\n  state.posts = state.data;\n  return state;\n});\n\n// compare data\nfn(state => {\n  if (state.users.length > state.posts.length) {\n    // do something based on the comparison\n  }\n  return state;\n});\n\n// cleanup state at the end before finshing job\nfn(state => {\n  state.data = null\n  state.users = null\n  state.posts = null\n \n  return state;\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"webhook-triggered-runs",children:"Webhook triggered runs"}),"\n",(0,a.jsxs)(t.p,{children:["On the platform, when a Run is triggered by a webhook event, the input state\ncontains important parts of the inbound ",(0,a.jsx)(t.strong,{children:"http request"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"The input state will look something like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'{\n  data: { // the body of the http request\n    formId: "patient_enrollment",\n    name: "John Doe"\n  },\n  request: {\n    method: "POST",\n    path: [\'i\', \'your-webhook-url-uuid\'] // an ordered array with optional additional paths\n    headers: { "content-type": "application/json" }, // an object containing the headers of the request\n    query_params: {} // an object containig any query parameters\n  },\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"kafka-triggered-runs",children:"Kafka triggered runs"}),"\n",(0,a.jsx)(t.p,{children:"When a Kafka message is fetched by the trigger, the input state contains the\nmessage body and information that can be used for auditing or recovery if\nconnections are lost or workorders fail."}),"\n",(0,a.jsx)(t.p,{children:"The input state looks like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'{\n  data: { // the message value\n    formId: "patient_enrollment",\n    name: "John Doe"\n  },\n  request: {\n    "headers": [\n      // kafka headers can be used to provide additional metadata\n    ],\n    "key": "", // the key assigned to the message by the publisher\n    "offset": 168321,\n    "partition": 1,\n    "topic": "fhir-data-pipes",\n    "ts": 1721889238000 // the kafka message timestamp\n  }\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"cron-triggered-runs",children:"Cron triggered runs"}),"\n",(0,a.jsxs)(t.p,{children:["On the platform, when a Run is triggered by a cron job, the input state will the\nfinal output state of the ",(0,a.jsx)(t.strong,{children:"last succesful run"})," for this workflow. This allows\neach subsequent run to ",(0,a.jsx)(t.em,{children:"know"})," about previous runs\u2014i.e., you can pass information\nfrom one run to another even if they happen days apart."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"{\n  ...finalStateOfLastSuccessfulRun,\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["If this is the first time the workflow has run, the initial state will simply by\nan empty Javascript object: ",(0,a.jsx)(t.code,{children:"{}"})]}),"\n",(0,a.jsx)(t.h2,{id:"input--output-state-for-steps",children:"Input & output state for steps"}),"\n",(0,a.jsx)(t.p,{children:"State is also passed between each step in a workflow. The output state of the\nprevious step is used as the input state for the next step."}),"\n",(0,a.jsx)(t.h3,{id:"on-success",children:"On success"}),"\n",(0,a.jsx)(t.p,{children:"When a job succeeds, its output state will be whatever is returned by the last\noperation."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"{\n  data: { patients: [] },\n  references: [1, 2, 3]\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"on-failure",children:"On failure"}),"\n",(0,a.jsxs)(t.p,{children:["When a step in a workflow fails, the error will be added to an ",(0,a.jsx)(t.code,{children:"errors"})," object\non state, keyed by the ID of the job that failed."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"{\n  data: { patients: [] },\n  references: [1, 2, 3],\n  errors: {\n    jobId: { /* error details */ }\n  }\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"See the below diagram for a visual description of how state might be passed\nbetween Steps in a Workflow."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Passing State",src:n(33832).A+"",width:"960",height:"540"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);