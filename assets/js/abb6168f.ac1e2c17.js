"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[69033],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(96540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},48885:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"fhir-4","title":"FHIR r4 Adaptor","description":"Language support for FHIR version 4. This adaptor is compatible with any FHIR R4","source":"@site/adaptors/fhir-4.md","sourceDirName":".","slug":"/fhir-4","permalink":"/adaptors/fhir-4","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"FHIR r4 Adaptor"},"sidebar":"adaptors","previous":{"title":"README.md","permalink":"/adaptors/packages/fhir-readme"},"next":{"title":"Functions","permalink":"/adaptors/packages/fhir-4-docs"}}');var t=i(74848),r=i(28453);const a={title:"FHIR r4 Adaptor"},o=void 0,d={},l=[{value:"About FHIR",id:"about-fhir",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Code Assist",id:"code-assist",level:2},{value:"Bundles",id:"bundles",level:2},{value:"Builder Functions",id:"builder-functions",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Cardinality",id:"cardinality",level:2},{value:"DataTypes Builders",id:"datatypes-builders",level:2},{value:"Identifiers",id:"identifiers",level:3},{value:"Codings",id:"codings",level:3},{value:"Codeable Concepts",id:"codeable-concepts",level:3},{value:"References",id:"references",level:3},{value:"Multiple Types",id:"multiple-types",level:3},{value:"Extensions",id:"extensions",level:3},{value:"System Mappings",id:"system-mappings",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Language support for FHIR version 4. This adaptor is compatible with any FHIR R4\ncompliant server."}),"\n",(0,t.jsx)(n.p,{children:"The FHIR 4 adaptor is implemented in TypeScript and comes complete with full\nTypeScript definitions."}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["This adaptor is strictly only compatible with\n",(0,t.jsx)(n.a,{href:"https://www.hl7.org/fhir/R4",children:"FHIR R4"}),". But all versions are supported by our\n",(0,t.jsx)(n.a,{href:"/adaptors/fhir",children:"generic fhir"})," adaptor!"]})}),"\n",(0,t.jsx)(n.h2,{id:"about-fhir",children:"About FHIR"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.hl7.org/fhir/overview.html",children:"FHIR"})," stands for Fast Healthcare\nInteroperability Resources. It is a standard for representing and exchanging\nhealthcare data electronically."]}),"\n",(0,t.jsxs)(n.p,{children:["Learn more about FHIR and\n",(0,t.jsx)(n.a,{href:"/documentation/get-started/standards#fhir-for-health-data-exchange",children:"FHIR for heath data exchange"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,t.jsxs)(n.p,{children:["The FHIR standard does not directly prescribe authentication and authorization\nmethods. Instead, it provides security guidelines and leaves the choice of\nimplementation to the developers of FHIR servers and clients. See the FHIR\n",(0,t.jsx)(n.a,{href:"https://www.hl7.org/fhir/security.html",children:"docs"})," for the latest security-related\nrecommendations. Depending on the FHIR systems being integrated via OpenFn, you\nmight employ a Basic Auth, API key, or OAuth authentication scheme."]}),"\n",(0,t.jsxs)(n.p,{children:["See this adaptor's\n",(0,t.jsx)(n.a,{href:"/adaptors/packages/fhir-4-configuration-schema",children:"Configuration docs"})," for more on\nthe required authentication parameters."]}),"\n",(0,t.jsxs)(n.p,{children:["See platform docs on\n",(0,t.jsx)(n.a,{href:"/documentation/manage-projects/manage-credentials",children:"managing credentials"})," for\nhow to configure a credential in OpenFn. If working locally or if using a Raw\nJSON credential type, then your configuration will look something like this to\ndefine your target endpoint and FHIR version:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n  "baseUrl": "https://hapi.fhir.org", //fhir endpoint\n  "apiPath": "baseR4" //fhir version\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"code-assist",children:"Code Assist"}),"\n",(0,t.jsx)(n.p,{children:"The OpenFn Inspector provides full code-assist and code-complete for all FHIR\nresource types."}),"\n",(0,t.jsxs)(n.p,{children:["Pressing ",(0,t.jsx)(n.code,{children:"ctrl + space"})," will open up the Suggestions list, which provides\ncontextual auto-completion. Use this to more easily create FHIR resources."]}),"\n",(0,t.jsx)(n.p,{children:"Note that code assist will only provide suggestions for commonly used\nproperties, but custom properties can also be passed directly and will be\nwritten to the new resource"}),"\n",(0,t.jsx)(n.h2,{id:"bundles",children:"Bundles"}),"\n",(0,t.jsx)(n.p,{children:"The FHIR-4 adaptor provides support for bundles."}),"\n",(0,t.jsx)(n.p,{children:"You can create resources and add them to a bundle:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"addToBundle($.resource);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Where ",(0,t.jsx)(n.code,{children:"$.resource"})," is a FHIR resource, or an array of resources, on the state\nobject."]}),"\n",(0,t.jsxs)(n.p,{children:["This will add the resources to a bundle resource, under the ",(0,t.jsx)(n.code,{children:"entry"})," key, on\nstate under a key called ",(0,t.jsx)(n.code,{children:"bundle"}),". To save the bundle under a different key,\npass a string as the second argument:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"addToBundle($.resource, 'patients-bundle');\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Each item in the bundle will be given a ",(0,t.jsx)(n.code,{children:"request"})," object with the ",(0,t.jsx)(n.code,{children:"PUT"})," method\nand a URL. For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"addToBundle({\n  id: 'x',\n  resourceType: 'Patient',\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Will create a state object like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "bundle": {\n    "resourceType": "bundle",\n    "entry": [\n      {\n        "resource": {\n          "id": "x",\n          "resourceType": "Patient"\n        },\n        "request": {\n          "method": "PUT",\n          "url": "Patient/x"\n        }\n      }\n    ]\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["To send the Bundle to the FHIR server defined in ",(0,t.jsx)(n.code,{children:"state.configuration.baseURL"}),",\ncall ",(0,t.jsx)(n.code,{children:"uploadBundle()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"You can pass the name of a key on state to upload a specific bundle:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"uploadBundle('patients-bundle');\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or you can pass your own bundle object in directly:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"uploadBundle($.bundle);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"builder-functions",children:"Builder Functions"}),"\n",(0,t.jsx)(n.p,{children:"The FHIR-4 adaptor provides builder functions which make it easier to define\nFHIR resources."}),"\n",(0,t.jsx)(n.p,{children:"Builders provide short-hand properties and default values, reducing the\nboiler-plate needed to create FHIR resources. They also enable code-assist to be\nprovided by code editors."}),"\n",(0,t.jsx)(n.p,{children:"The basic pattern is something like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"create(\n  builders.patient({\n    id: 'example',\n    identifier: [\n      {\n        value: '12345',\n        type: ['MR', 'http://terminology.hl7.org/CodeSystem/v2-0203'],\n        system: 'urn:oid:1.2.36.146.595.217.0.1',\n        period: { start: '2001-05-06' },\n      },\n    ],\n    active: true,\n    name: [\n      {\n        family: 'Chalmers',\n        given: ['Peter', 'James'],\n      },\n    ],\n    managingOrganization: 'Organization/1',\n  })\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsxs)(n.p,{children:["All builders are available on the ",(0,t.jsx)(n.code,{children:"b"})," (short for ",(0,t.jsx)(n.code,{children:"builders"}),") namespace within\nyour OpenFn expression."]}),"\n",(0,t.jsxs)(n.p,{children:["Every resource in FHIR should have a corresponding builder function on the ",(0,t.jsx)(n.code,{children:"b."}),"\nnamespace (check the reference for details): for example, ",(0,t.jsx)(n.code,{children:"b.patient()"}),",\n",(0,t.jsx)(n.code,{children:"b.observation()"}),", ",(0,t.jsx)(n.code,{children:"b.encounter()"})," and ",(0,t.jsx)(n.code,{children:"b.invoice()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The first argument for the builder is an object with properties corresponding to\nFHIR json:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.patient({\n  identifier: $.data.patientId,\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Which will generate the following data structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "resourceType": "Patient"\n  "id": "123",\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"You don't have to use builder functions - you can just write our your FHIR\nstructures in-line. But the builders come with some key benefits:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"They backed by full TypeScript definitions, so you'll get validation and\ncode-assist as you type"}),"\n",(0,t.jsx)(n.li,{children:"They simplify some FHIR data structures"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The builders are designed to take a fuzzy, relaxed definition of a FHIR resource\nand convert it to correct JSON. For example, a Reference type can be passed as a\nfully FHIR reference object, a string id, or an existing FHIR resource. The\nbuilder will figure out how to parse and map it to a Reference with reasonable\ndefaults."}),"\n",(0,t.jsx)(n.p,{children:"Builders are not operations, so they don't sit at the top of your job code. You\ncan either pass them as an argument to an operation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"create(b.patient($.data));\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Or within a callback function (like ",(0,t.jsx)(n.code,{children:"fn()"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"fn(state => {\n  state.newPatient = b.patient(state.data);\n  return state;\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"cardinality",children:"Cardinality"}),"\n",(0,t.jsx)(n.p,{children:"Resource builders will automatically embed values into arrays where appropriate,\nsimplifying cardinality handling."}),"\n",(0,t.jsxs)(n.p,{children:["For example, a Patient's ",(0,t.jsx)(n.code,{children:"identifier"})," property contains an array of identifiers.\nBut when using a builder function, you can pass a single identifier:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.patient({\n  identifier: {\n    value: 'abc',\n  },\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Which will be embedded into an array for you:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "resourceType": "Patient",\n  "identifier": [\n    {\n      "value": "abc"\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"datatypes-builders",children:"DataTypes Builders"}),"\n",(0,t.jsxs)(n.p,{children:["The builders have special handling and helpers for FHIR datatypes, like\n",(0,t.jsx)(n.code,{children:"identifier"})," and ",(0,t.jsx)(n.code,{children:"coding"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Like resource builders, they exist on the ",(0,t.jsx)(n.code,{children:"b."})," or ",(0,t.jsx)(n.code,{children:"builders."})," namespace. Unlike\nthe other builders, they are hand-written and not auto-generated from the spec.\nThis means they have a slightly different API."]}),"\n",(0,t.jsx)(n.p,{children:"The most important datatype builders are detailed below."}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)(n.p,{children:"When you pass an object into a builder, internally that object will be passed to\na datatype builder."}),(0,t.jsx)(n.p,{children:"So you can either pass a reference directly:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.patient({\n  identifier: {\n    value: 'abc',\n  },\n});\n"})}),(0,t.jsx)(n.p,{children:"Or use a builder explicitly:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.patient({\n  identifier: b.id('abc'),\n});\n"})}),(0,t.jsx)(n.p,{children:"You may want to use a builder to pass an extension."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.patient({\n  identifier: b.identifier('abc', {\n    url: 'http://hospital.example.org/fhir/StructureDefinition/identifier-issuingDepartment',\n    value: 'Emergency Department',\n  }),\n});\n"})})]}),"\n",(0,t.jsx)(n.h3,{id:"identifiers",children:"Identifiers"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"b.identifier(id, ...extensions)"})," or its shorthand,\n",(0,t.jsx)(n.code,{children:"b.id(id, ...extensions)"}),", to create an Identifier object."]}),"\n",(0,t.jsx)(n.p,{children:"You can pass a single string value to create an identifier without a system:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.identifier('ip_request1.1');\n"})}),"\n",(0,t.jsxs)(n.p,{children:["More commonly, you'll pass a ",(0,t.jsx)(n.code,{children:"{ value, system }"})," pair:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.identifier({\n  system: 'http://moh.gov.et/fhir/hiv/identifier/MRN',\n  value: 'MRN12345671',\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Any additional arguments will be treated as extensions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.identifier(\n  {\n    system: 'http://moh.gov.et/fhir/hiv/identifier/MRN',\n    value: 'MRN12345671',\n  },\n  {\n    url: 'http://hospital.example.org/fhir/StructureDefinition/identifier-issuingDepartment',\n    valueString: 'Emergency Department',\n  },\n  {\n    url: 'http://hospital.example.org/fhir/StructureDefinition/identifier-issuedDate',\n    valueDateTime: '2023-06-15T14:30:00Z',\n  }\n);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Resulting in the following JSON structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "resourceType": "Patient",\n  "identifier": [\n    {\n      "system": "http://moh.gov.et/fhir/hiv/identifier/MRN",\n      "value": "MRN12345671",\n      "extension": [\n        {\n          "url": "http://hospital.example.org/fhir/StructureDefinition/identifier-issuingDepartment",\n          "valueString": "Emergency Department"\n        },\n        {\n          "url": "http://hospital.example.org/fhir/StructureDefinition/identifier-issuedDate",\n          "valueDateTime": "2023-06-15T14:30:00Z"\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"codings",children:"Codings"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"b.coding(code, system, extra)"})," or its shorthand,\n",(0,t.jsx)(n.code,{children:"b.c(code, system, extra)"}),", to create a Coding object"]}),"\n",(0,t.jsxs)(n.p,{children:["You can create a coding directly with the ",(0,t.jsx)(n.code,{children:"coding"})," builder:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.coding('MR', 'http://terminology.hl7.org/CodeSystem/v2-0203');\n// returns { code: 'MR', system: 'http://terminology.hl7.org/CodeSystem/v2-0203' }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also use the shorthand form, ",(0,t.jsx)(n.code,{children:"c"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.c('MR', 'http://terminology.hl7.org/CodeSystem/v2-0203', {\n  display: 'Medical record number',\n});\n// returns { code: 'MR', system: 'http://terminology.hl7.org/CodeSystem/v2-0203' }\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can pass any extra properties to the coding to add them to the object.\nStandard FHIR properties are type-supported and code-assisted."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.c('MR', 'http://terminology.hl7.org/CodeSystem/v2-0203', {\n  display: 'Medical record number',\n});\n// returns {\n//  code: 'MR',\n//  system: 'http://terminology.hl7.org/CodeSystem/v2-0203',\n//  display: 'Medical record number' ,\n// }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"codeable-concepts",children:"Codeable Concepts"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"b.concept(codings, extra)"})," or its shorthand, ",(0,t.jsx)(n.code,{children:"b.cc(codings, extra)"}),", to\ncreate a Codeable Concept with one or more codings."]}),"\n",(0,t.jsx)(n.p,{children:"Pass one or more codings, as tuples or objects, and optionally extra keys to add\nto the concept:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.concept(codings, props);\n"})}),"\n",(0,t.jsx)(n.p,{children:"For example, to create a concept with a single coding:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.concept(['MR', 'http://terminology.hl7.org/CodeSystem/v2-0203']);\n// outputs { coding: [{ type: 'MR', system: 'http://terminology.hl7.org/CodeSystem/v2-0203' }]}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or for multiple codings (note the extra array!)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.concept([\n  ['M', 'http://terminology.hl7.org/CodeSystem/v3-MaritalStatus'],\n  ['02', 'http://national-registry.example.org/marital-status'],\n]);\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can add extra props to the concept, like text:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.concept($.codings, { text: 'Married' });\n// outputs { text: 'Married', coding: [...]} }\n"})}),"\n",(0,t.jsxs)(n.p,{children:['Where a CodeableConcept is expected, it can be represented as a "tuple", or an\narray of two strings where the first value is the code, and the second is the\nsystem. The tuple will be expanded to a ',(0,t.jsx)(n.code,{children:"{ code, system }"})," Coding object."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, an Identifier's ",(0,t.jsx)(n.code,{children:"type"})," accepts a CodeableConcept. We can create a\npatient like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"builders.patient({\n  identifier: [\n    {\n      type: ['MR', 'http://terminology.hl7.org/CodeSystem/v2-0203'],\n    },\n  ],\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Which will generate a resource like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "resourceType": "Patient",\n  "identifier": [\n    {\n      "type": {\n        "code": "MR",\n        "system": "http://terminology.hl7.org/CodeSystem/v2-0203"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can also pass a concept object directly, with full type support."}),"\n",(0,t.jsx)(n.h3,{id:"references",children:"References"}),"\n",(0,t.jsx)(n.p,{children:"Some FHIR resources reference others. Reference types in the builders provide a\nnumber of short-hands."}),"\n",(0,t.jsx)(n.p,{children:"For example, a FHIR reference looks like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'"managingOrganization": {\n  "reference": "Organization/1"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"In the patient builder, we can provide this reference in a few ways."}),"\n",(0,t.jsx)(n.p,{children:'You can pass the reference string directly, which will be "expanded" into a\nreference.'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.patient({\n  managingOrganization: 'Organization/1',\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can pass an existing reference object (useful when mapping FHIR to FHIR)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.patient({\n  managingOrganization: $.patient.managingOrganization,\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or you can pass an existing FHIR resource, if you happen to have access to the\none you want to reference:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.patient({\n  managingOrganization: $.myOrg,\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Where supported, you can also pass an array of references."}),"\n",(0,t.jsxs)(n.p,{children:["You can use ",(0,t.jsx)(n.code,{children:"b.reference()"})," to create your own reference with the above rules\n(particularly useful when dealing with extensions which aren't typed)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.patient({\n  managingOrganization: b.ref($.org), // $.org can be a string, resource or reference\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"multiple-types",children:"Multiple Types"}),"\n",(0,t.jsxs)(n.p,{children:["Some FHIR properties are polymorphic and support multiple data types. For\nexample, a Patient's ",(0,t.jsx)(n.code,{children:"deceased"})," property can be of type ",(0,t.jsx)(n.code,{children:"boolean"})," or ",(0,t.jsx)(n.code,{children:"datetime"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"In FHIR json, this results in a type suffix being appended to the key. For\nexample:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "resourceType": "Patient",\n  "deceasedBoolean": false,\n  "deceasedDateTime": "2025-01-01"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Builder functions allow you to specify the base property name and not worry\nabout typing the key."}),"\n",(0,t.jsx)(n.p,{children:"For example, these both work in a FHIR-compliant way:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.patient({\n  deceased: true,\n});\nb.patient({\n  deceased: '2025-01-01',\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Internally, the builder will determine the type of the incoming value and\ngenerate the correct key."}),"\n",(0,t.jsx)(n.p,{children:"Note that passing suffixed keys still works just fine."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.patient({\n  deceasedDateTime: '2025-01-01',\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"extensions",children:"Extensions"}),"\n",(0,t.jsx)(n.p,{children:"FHIR is highly extensible, and the adaptor builder APIs have many features to\nsupport this."}),"\n",(0,t.jsxs)(n.p,{children:["Any property can be prefixed with ",(0,t.jsx)(n.code,{children:"_"})," to provide an extension, e.g,,:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.identifier({ _use: 'custom use' });\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can add an extension to any resource using the\n",(0,t.jsx)(n.code,{children:"addExtension(resource, extensionUrl, extensionValue)"})," builder."]}),"\n",(0,t.jsx)(n.p,{children:"For example, the following code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"fn(state => {\n  const patient = b.patient({});\n\n  b.addExtension(\n    patient,\n    'http://hl7.org/fhir/StructureDefinition/patient-religion',\n    // declare a codeableConcept\n    b.cc(\n      ['1023', 'http://terminology.hl7.org/CodeSystem/v3-ReligiousAffiliation'],\n      { text: 'Muslim' }\n    )\n  );\n\n  return state;\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Creates a patient with an ",(0,t.jsx)(n.code,{children:"religious affiliation"})," extension:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "resourceType": "Patient",\n  "extension": [\n    {\n      "url": "http://hl7.org/fhir/StructureDefinition/patient-religion",\n      "valueCodeableConcept": {\n        "coding": [\n          {\n            "code": "1023",\n            "system": "http://terminology.hl7.org/CodeSystem/v3-ReligiousAffiliation"\n          }\n        ],\n        "text": "Muslim"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can call ",(0,t.jsx)(n.code,{children:"addExtension"})," Multiple times for a given resource. It will\nintelligently manage the ",(0,t.jsx)(n.code,{children:"extension"})," array on the target resource for you."]}),"\n",(0,t.jsxs)(n.p,{children:["In addition, some datatype builders, like, ",(0,t.jsx)(n.code,{children:"identifier"}),", allow extensions to be\npassed as extra arguments. For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.identifier('12345', {\n  url: 'http://hospital.example.org/fhir/StructureDefinition/identifier-issuingDepartment',\n  value: 'Emergency Department',\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Produces an identifier like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "extension": [\n    {\n      "url": "http://hospital.example.org/fhir/StructureDefinition/identifier-issuingDepartment",\n      "valueString": "Emergency Department"\n    }\n  ],\n  "value": "12345"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"system-mappings",children:"System Mappings"}),"\n",(0,t.jsxs)(n.p,{children:["FHIR builders allow ",(0,t.jsx)(n.code,{children:"system"})," strings in identifiers and codings to be mapped.\nThis allows you to specify short-form system strings, or more easily map\nresources between FHIR systems."]}),"\n",(0,t.jsxs)(n.p,{children:["This is done using the ",(0,t.jsx)(n.code,{children:"util.setSystemMap(map)"})," function. This takes an object\nwhich maps source strings to destinations. Keys in the object are values you\nwant to use in your job code - the values you pass to the builders. The values\nof the object are the target values - the systems you want to appear in your\ngenerated resources."]}),"\n",(0,t.jsx)(n.p,{children:"Set the system map at the top of every step that needs a system map (note that\nmappings are NOT remembered between steps)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"util.setSystemMap({ icd10: 'http://hl7.org/fhir/sid/icd-10' });\n"})}),"\n",(0,t.jsx)(n.p,{children:"Because systems tend to be long strings, it can be convenient to define a\nshort-hand syntax, which simplifies mapping code."}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"b.setSystemMap({\n  smartcare: 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID',\n});\n\ncreate(\n  b.patient({\n    identifier: { value: 'xyz', system: 'smartcare' },\n  })\n);\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will generate a resource with a full system:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'{\n  "resourceType": "Patient"\n  "identifier": [\n    {\n      "system": "http://moh.gov.et/fhir/hiv/identifier/SmartCareID",\n      "value": "xyz"\n    }\n  ],\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can also use the datatype helpers directly:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"util.setSystemMap({ icd10: 'http://hl7.org/fhir/sid/icd-10' });\n\nfn(state => {\n  const headache = b.coding('G44.1', 'icd10');\n  // ...\n  return state;\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is also useful when mapping resources from one FHIR system to another.\nSimply configure a system map and source systems will auto-map to the\ndestinations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// map incoming CDR systems to MOH systems\nutil.setSystemMap({\n  'http://cdr.aacahb.gov.et/Encounter':\n    'http://moh.gov.et/fhir/hiv/identifier/encounter',\n});\n\nb.patient({\n  identifier: $.patient.\n});\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);