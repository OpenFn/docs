"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[78682],{18930:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"library/jobs/auto/Fetch-Claims-2023-07-17","title":"Fetch Claims","description":"This job was provided by an OpenFn.org user via the job library API.","source":"@site/adaptors/library/jobs/auto/Fetch-Claims-2023-07-17.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/Fetch-Claims-2023-07-17","permalink":"/adaptors/library/jobs/auto/Fetch-Claims-2023-07-17","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Fetch Claims","sidebar_label":"Fetch Claims","id":"Fetch-Claims-2023-07-17","keywords":["library","job","expression","http","create","get","map","JSON"]},"sidebar":"adaptors","previous":{"title":"1 Get CommCare Forms Bulk Extract","permalink":"/adaptors/library/jobs/auto/1-Get-CommCare-Forms-Bulk-Extract-2021-04-08"},"next":{"title":"no return","permalink":"/adaptors/library/jobs/auto/no-return-2023-01-06"}}');var r=t(74848),s=t(28453);const i={title:"Fetch Claims",sidebar_label:"Fetch Claims",id:"Fetch-Claims-2023-07-17",keywords:["library","job","expression","http","create","get","map","JSON"]},o=void 0,c={},l=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("em",{children:"This job was provided by an OpenFn.org user via the job library API."}),"\n",(0,r.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Name: Fetch Claims"}),"\n",(0,r.jsxs)(n.li,{children:["Adaptor: ",(0,r.jsx)(n.a,{href:"https://www.github.com/openfn/language-http",children:(0,r.jsx)(n.code,{children:"@openfn/language-http"})})]}),"\n",(0,r.jsxs)(n.li,{children:["Adaptor Version: ",(0,r.jsx)(n.a,{href:"https://www.github.com/openfn/language-http/releases/tag/v5.0.1",children:(0,r.jsx)(n.code,{children:"v5.0.1"})})]}),"\n",(0,r.jsx)(n.li,{children:"Created about 2 years ago"}),"\n",(0,r.jsx)(n.li,{children:"Updated about 1 year ago"}),"\n",(0,r.jsxs)(n.li,{children:["Score: ",(0,r.jsx)("b",{children:"0"})," (an ",(0,r.jsx)(n.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"create"}),", ",(0,r.jsx)(n.code,{children:"get"}),", ",(0,r.jsx)(n.code,{children:"map"}),", ",(0,r.jsx)(n.code,{children:"JSON"})]}),"\n",(0,r.jsx)(n.h2,{id:"expression",children:"Expression"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// establish a baseline for the cursor\nfn(state => {\n  const today = new Date().toISOString().split('T')[0];\n  console.log(\n    `Fetching all claims updated on or after ${state.cursor || '2023-07-19'}`\n  );\n  return { ...state, today };\n});\n\n// Get claims and related patients from HAPI, updated since cursor date\nget(\n  'Claim',\n  {\n    query: {\n      _lastUpdated: `ge${state.cursor || '2023-07-19'}`,\n      _include: 'Claim:patient',\n      _sort: '-_lastUpdated',\n      _count: 200,\n    },\n  },\n  next => {\n    if (next.data.total == 0)\n      return { ...next, data: { claims: [], patients: [] } };\n\n    const byType = next.data.entry.reduce((r, a) => {\n      r[a.resource.resourceType] = r[a.resource.resourceType] || [];\n      r[a.resource.resourceType].push(a);\n      return r;\n    }, Object.create(null));\n\n    return {\n      ...next,\n      data: {\n        claims: byType.Claim,\n        patients: byType.Patient,\n      },\n    };\n  }\n);\n\n// clean and merge data\nfn(state => {\n  const { claims, patients } = state.data;\n\n  // Noisy logs to help debug data quality issues\n  claims.forEach(c => {\n    const { resource } = c;\n    if (!resource.id) console.log('claim', resource.id, 'has no id');\n    if (!resource.item) {\n      console.log('claim', resource.id, 'has no item');\n    } else if (!resource.item[0].productOrService.coding) {\n      console.log('claim', resource.id, 'has no coding');\n    }\n\n    if (!resource.patient.reference.split('/')[1])\n      console.log('claim', resource.id, 'has no patient');\n  });\n\n  const patientsWithClaims = patients\n    // drop all patients without identifiers\n    .filter(p => p.resource.identifier)\n    .map(p => ({\n      ...p,\n      claims: claims.filter(c => {\n        return (\n          // has item\n          c.resource.item &&\n          // has coding\n          c.resource.item[0].productOrService.coding &&\n          // for this patient\n          p.resource.id == c.resource.patient.reference.split('/')[1]\n        );\n      }),\n    }));\n\n  return { ...state, data: { patientsWithClaims } };\n});\n\n// print some logs and update the cursor for next time\nfn(state => {\n  const { data, today } = state;\n\n  console.log('Found the following patients and claims in FHIR:');\n  console.log(\n    JSON.stringify(\n      data.patientsWithClaims.map(p => ({\n        patient: p.resource.id,\n        claims: p.claims.map(c => c.resource.id),\n      })),\n      null,\n      2\n    )\n  );\n\n  return { data: state.data, cursor: today };\n});\n\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(96540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);