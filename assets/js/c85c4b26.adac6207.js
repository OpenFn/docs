"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[57436],{17571:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(58168),o=(n(96540),n(15680));const i={title:"04b/ Update ODK form",sidebar_label:"04b/ Update ODK form",id:"04b-Update-ODK-form-2019-12-03",keywords:["library","job","expression","http","get","post","Number"]},r=void 0,s={unversionedId:"library/jobs/auto/04b-Update-ODK-form-2019-12-03",id:"library/jobs/auto/04b-Update-ODK-form-2019-12-03",title:"04b/ Update ODK form",description:"This job was provided by an OpenFn.org user via the job library API.",source:"@site/adaptors/library/jobs/auto/04b-Update-ODK-form-2019-12-03.md",sourceDirName:"library/jobs/auto",slug:"/library/jobs/auto/04b-Update-ODK-form-2019-12-03",permalink:"/adaptors/library/jobs/auto/04b-Update-ODK-form-2019-12-03",draft:!1,tags:[],version:"current",frontMatter:{title:"04b/ Update ODK form",sidebar_label:"04b/ Update ODK form",id:"04b-Update-ODK-form-2019-12-03",keywords:["library","job","expression","http","get","post","Number"]},sidebar:"adaptors",previous:{title:"05/ Submit employee evaluation",permalink:"/adaptors/library/jobs/auto/05-Submit-employee-evaluation-2019-12-03"},next:{title:"commcare reports api",permalink:"/adaptors/library/jobs/auto/commcare-reports-api-2016-08-29"}},l={},p=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}],c={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,o.yg)(m,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("em",null,"This job was provided by an OpenFn.org user via the job library API."),(0,o.yg)("h2",{id:"metadata"},"Metadata"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Name: 04b/ Update ODK form"),(0,o.yg)("li",{parentName:"ul"},"Adaptor: ",(0,o.yg)("a",{parentName:"li",href:"https://www.github.com/openfn/language-http"},(0,o.yg)("inlineCode",{parentName:"a"},"@openfn/language-http"))),(0,o.yg)("li",{parentName:"ul"},"Adaptor Version: ",(0,o.yg)("a",{parentName:"li",href:"https://www.github.com/openfn/language-http"},(0,o.yg)("inlineCode",{parentName:"a"},"latest"))),(0,o.yg)("li",{parentName:"ul"},"Created about 5 years ago"),(0,o.yg)("li",{parentName:"ul"},"Updated almost 5 years ago"),(0,o.yg)("li",{parentName:"ul"},"Score: ",(0,o.yg)("b",null,"0")," (an ",(0,o.yg)("a",{parentName:"li",href:"/adaptors/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,o.yg)("h2",{id:"key-functions"},"Key Functions"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"get"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"post"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"Number")),(0,o.yg)("h2",{id:"expression"},"Expression"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"// Your job goes here.\nget(\n  'http://165.227.185.106/formXml',\n  {\n    query: {\n      formId: 'registration_form',\n    },\n  },\n  state => {\n    console.log('Start processing state and form template!');\n\n    let template = state.data.body;\n    let templateUpdated = false;\n\n    const itemEx = /<item>\\s?<label>[^<>]*<\\/label>\\s?<value>[^<>]*<\\/value>\\s?<\\/item>/gi;\n    const itemMatches = template.match(itemEx);\n\n    const selectFacilityEx = /<select1\\s+ref=\"\\/RegistrationForm\\/position_facility\">/gi;\n    //const selectFacilityEx = /<select1\\s+ref=\"\\/data\\/position_facility\">/gi;\n    const selectPositionEx = /<select1\\s+ref=\"\\/RegistrationForm\\/position\">/gi;\n    //const selectPositionEx = /<select1\\s+ref=\"\\/data\\/position\">/gi;\n\n    console.log(`Received ${state.new_jobs.length} new data!`);\n\n    for(let j = 0; j < state.new_jobs.length; j ++) {\n      let facilityExists = false;\n      let positionExists = false;\n\n      let facilityId = state.new_jobs[j].facility_id;\n      console.log(`Processing facility: ${facilityId}.`);\n\n      const positions = state.new_jobs[j].position_id.split('|'); \n      const salaries = state.new_jobs[j].salary.split('=');\n\n      let positionId = `${positions[1]}_${salaries[1]}`;\n      console.log(`Processing position: ${positionId}.`);\n      for(let i = 0; i < itemMatches.length; i ++) {\n        if (itemMatches[i].indexOf(facilityId) >= 0) {\n          facilityExists = true;\n        }\n        if (itemMatches[i].indexOf(positionId) >= 0) {\n          if (state.new_jobs[j].status === 'CLOSED') {\n            console.log(`Removing closed position: ${positionId}.`);\n            template = template.replace(itemMatches[i], '');\n            templateUpdated = true;\n          }\n          positionExists = true;\n        }\n      }\n\n      if (!facilityExists) {\n        const selectFacilityMatches = template.match(selectFacilityEx);\n        console.log(\"Facility matches: \"+selectFacilityMatches)\n        const facilityItem = \n          `<item><label>${state.new_jobs[j].facility_name}</label><value>${facilityId}</value></item>`;\n        console.log(`Adding facility: ${facilityItem}.`);\n        template = template.replace(\n          selectFacilityEx,\n          selectFacilityMatches[0] + facilityItem\n        );\n        templateUpdated = true;\n      } else {\n        console.log('Not seeing any facility to add. Moving along!');\n      }\n\n      if (!positionExists && state.new_jobs[j].status === 'NEW') {\n        const selectPositionMatches = template.match(selectPositionEx);\n        const positionItem =\n          `<item><label>${state.new_jobs[j].position_name}</label><value>${positionId}</value></item>`;\n        console.log(`Adding position: ${positionItem}.`);\n        template = template.replace(\n          selectPositionEx,\n          selectPositionMatches[0] + positionItem\n        );\n        templateUpdated = true;\n      } else {\n        console.log('Not seeing any position to add. Moving along!');\n      }\n    }\n\n    if (templateUpdated) {\n      const versionEx = /id=\"\\S+\"\\s+version=\"(\\S+)\"/;\n      const versionMatches = template.match(versionEx);\n      const currentVersion = Number.parseInt(versionMatches[1]);\n      console.log(`Updating form version from: ${currentVersion}`);\n      template = template.replace(currentVersion, currentVersion + 1);\n    }\n    \n    state.template = template;\n    return state;\n  }\n);\n\npost('http://165.227.185.106/formUpload', {\n  formData: state => {\n    return {\n      form_def_file: {\n        value: state.template,\n        options: {\n          filename: 'registration_form.xml'\n        }\n      }\n    };\n  },\n});\n\n")))}d.isMDXComponent=!0},15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>f});var a=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(f,r(r({ref:t},c),{},{components:n})):a.createElement(f,r({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);