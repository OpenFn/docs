"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[24490],{6011:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"library/jobs/auto/CommCare-to-Azure-Sql-2020-01-27","title":"CommCare to Azure Sql","description":"This job was provided by an OpenFn.org user via the job library API.","source":"@site/adaptors/library/jobs/auto/CommCare-to-Azure-Sql-2020-01-27.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/CommCare-to-Azure-Sql-2020-01-27","permalink":"/adaptors/library/jobs/auto/CommCare-to-Azure-Sql-2020-01-27","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"CommCare to Azure Sql","sidebar_label":"CommCare to Azure Sql","id":"CommCare-to-Azure-Sql-2020-01-27","keywords":["library","job","expression","mssql","alterState","join","map","sql"]},"sidebar":"adaptors","previous":{"title":"Extract Vitas Data","permalink":"/adaptors/library/jobs/auto/Extract-Vitas-Data-2021-05-11"},"next":{"title":"Changelog","permalink":"/adaptors/packages/mssql-changelog"}}');var r=a(74848),s=a(28453);const o={title:"CommCare to Azure Sql",sidebar_label:"CommCare to Azure Sql",id:"CommCare-to-Azure-Sql-2020-01-27",keywords:["library","job","expression","mssql","alterState","join","map","sql"]},i=void 0,l={},d=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function m(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("em",{children:"This job was provided by an OpenFn.org user via the job library API."}),"\n",(0,r.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Name: CommCare to Azure Sql"}),"\n",(0,r.jsxs)(n.li,{children:["Adaptor: ",(0,r.jsx)(n.a,{href:"https://www.github.com/openfn/language-mssql",children:(0,r.jsx)(n.code,{children:"@openfn/language-mssql"})})]}),"\n",(0,r.jsxs)(n.li,{children:["Adaptor Version: ",(0,r.jsx)(n.a,{href:"https://www.github.com/openfn/language-mssql",children:(0,r.jsx)(n.code,{children:"latest"})})]}),"\n",(0,r.jsx)(n.li,{children:"Created over 5 years ago"}),"\n",(0,r.jsx)(n.li,{children:"Updated about 5 years ago"}),"\n",(0,r.jsxs)(n.li,{children:["Score: ",(0,r.jsx)("b",{children:"3"})," (an ",(0,r.jsx)(n.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"alterState"}),", ",(0,r.jsx)(n.code,{children:"join"}),", ",(0,r.jsx)(n.code,{children:"map"}),", ",(0,r.jsx)(n.code,{children:"sql"})]}),"\n",(0,r.jsx)(n.h2,{id:"expression",children:"Expression"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Insert household, fail on duplicate (consider upsert strategy, if you want!)\nsql({\n  query:\n    'INSERT INTO Household (' +\n    [\n      'commcare_id',\n      'is_head',\n      'total_members',\n      'head_name',\n      'date_registered',\n      'village',\n      'new_thing',\n    ].join(', ') +\n    `) VALUES ('` +\n    [\n      state.data.metadata.instanceID,\n      state.data.form.head_of_household === 'yes' ? 1 : 0,\n      state.data.form.hh_members,\n      state.data.form.individual_name,\n      state.data.form.registration_date,\n      state.data.form.village_name,\n      state.data.form.new_q,\n    ].join(`', '`) +\n    `');`,\n});\n\n// Prepare a string to be used for VALUES (...) in our member insert.\nalterState(state => {\n  const data = state.references[0];\n  const form = data.form;\n  const parentId = data.metadata.instanceID;\n  const memArr = form.register_hh_members.map((m, i) => {\n    return `('${parentId}-${i}', '${parentId}', '${m.hh_member_name}', '${m.age}')`;\n  });\n\n  state.members = memArr.join(', ');\n  return state;\n});\n\n// Insert members, fail on duplicate\nsql({\n  query: state =>\n    `INSERT INTO HouseholdMember (commcare_id, parent, name, age) VALUES ${state.members}`,\n});\n\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var t=a(96540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);