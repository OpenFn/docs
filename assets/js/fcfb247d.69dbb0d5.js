"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[46985],{8319:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"packages/postgresql-readme","title":"postgresql developer readme","description":"Source//github.com/OpenFn/adaptors/tree/main/packages/postgresql","source":"@site/adaptors/packages/postgresql-readme.md","sourceDirName":"packages","slug":"/packages/postgresql-readme","permalink":"/adaptors/packages/postgresql-readme","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"postgresql developer readme","id":"postgresql-readme","keywords":["adaptor","readme","postgresql"]},"sidebar":"adaptors","previous":{"title":"Changelog","permalink":"/adaptors/packages/postgresql-changelog"},"next":{"title":"powerbi","permalink":"/adaptors/powerbi"}}');var t=a(74848),r=a(28453);const l={title:"postgresql developer readme",id:"postgresql-readme",keywords:["adaptor","readme","postgresql"]},o="postgresql Adaptor developer README.md",i={},d=[{value:"Documentation",id:"documentation",level:2},{value:"required configuration for Heroku postgres",id:"required-configuration-for-heroku-postgres",level:2},{value:"<code>sql(query)</code>",id:"sqlquery",level:2},{value:"sample usage",id:"sample-usage",level:4},{value:"Find a single value for a table",id:"find-a-single-value-for-a-table",level:2},{value:"Insert a single record",id:"insert-a-single-record",level:2},{value:"Insert or Update using a unique column as a key",id:"insert-or-update-using-a-unique-column-as-a-key",level:2},{value:"Insert or Update if a value exist in the record",id:"insert-or-update-if-a-value-exist-in-the-record",level:2},{value:"Insert many records in postgresql",id:"insert-many-records-in-postgresql",level:2},{value:"Upsert many records in postgresql",id:"upsert-many-records-in-postgresql",level:2},{value:"Describe a table from postgres",id:"describe-a-table-from-postgres",level:2},{value:"Create a table in the database",id:"create-a-table-in-the-database",level:2},{value:"Alter a table in the database",id:"alter-a-table-in-the-database",level:2},{value:"Development",id:"development",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"postgresql-adaptor-developer-readmemd",children:"postgresql Adaptor developer README.md"})}),"\n",(0,t.jsxs)(n.p,{children:["Source: ",(0,t.jsx)(n.a,{href:"https://github.com/OpenFn/adaptors/tree/main/packages/postgresql",children:"https://github.com/OpenFn/adaptors/tree/main/packages/postgresql"})]}),"\n",(0,t.jsx)(n.h1,{id:"language-postgresql",children:"Language PostgreSQL"}),"\n",(0,t.jsx)(n.p,{children:"Language Pack for building expressions and operations to run PostgreSQL queries."}),"\n",(0,t.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,t.jsx)(n.h2,{id:"required-configuration-for-heroku-postgres",children:"required configuration for Heroku postgres"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "host": "some-host-url.compute-1.amazonaws.com",\n  "port": "5432",\n  "database": "wouldntyouliketoknow",\n  "user": "me",\n  "password": "noway",\n  "ssl": true,\n  "allowSelfSignedCert": true\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sqlquery",children:(0,t.jsx)(n.code,{children:"sql(query)"})}),"\n",(0,t.jsx)(n.p,{children:"Execute an sql query. An option can be added to either log the query or not and\neither execute the query or no. The options can be omitted as well."}),"\n",(0,t.jsx)(n.h4,{id:"sample-usage",children:"sample usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"sql(\n  state =>\n    `INSERT INTO untitled_table (name, the_geom) VALUES ('` +\n    dataValue('form.first_name')(state) +\n    `', ST_SetSRID(ST_Point(` +\n    dataValue('lat')(state) +\n    `, ` +\n    dataValue('long')(state) +\n    `),4326))`,\n  { writeSql: true, execute: true }\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"find-a-single-value-for-a-table",children:"Find a single value for a table"}),"\n",(0,t.jsxs)(n.p,{children:["This helper function allows to build a specific query where ",(0,t.jsx)(n.code,{children:"sql"})," would not be\nbest suited. It returns a single value and not a promise. An example of usage\nwould be in building a mapping object with a value from a lookup table."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"alterState(async state => {\n  const user = {\n    id: 1,\n    name: 'Mamadou',\n    user_id: await findValue({\n      uuid: 'id',\n      relation: 'users',\n      where: { first_name: 'Mama%' },\n      operator: { first_name: 'like' }, // operator is optional. \"=\" is used by default.\n    })(state),\n  };\n\n  return upsert(...)(state);\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"insert-a-single-record",children:"Insert a single record"}),"\n",(0,t.jsxs)(n.p,{children:["This functions is used to insert a single record in postgres database. An option\n",(0,t.jsx)(n.code,{children:"writeSql"})," allows to log the generated sql query. The ",(0,t.jsx)(n.code,{children:"setNull"})," option allows to\nreplace the specified elements with ",(0,t.jsx)(n.code,{children:"NULL"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"insert(\n  'users',\n  {\n    email: 'antony@gmail.com',\n    first_name: 'Antony',\n    inserted_at: '2020-08-27 00:00:00',\n    updated_at: '2020-08-27 00:00:00',\n  },\n  { setNull: [\"''\", \"'undefined'\"], writeSql: true, logValues: true }\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"insert-or-update-using-a-unique-column-as-a-key",children:"Insert or Update using a unique column as a key"}),"\n",(0,t.jsxs)(n.p,{children:["Insert or Update if matched. An option, ",(0,t.jsx)(n.code,{children:"execute"}),", allows to either run the\ngenerated query or no."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"upsert(\n  'users',\n  'email',\n  {\n    email: 'luca@openfn.org',\n    first_name: 'Luca',\n    inserted_at: '2010-01-01 00:00:00',\n    updated_at: '2010-01-01 00:00:00',\n  },\n  {\n    setNull: [\"'NaN'\", \"'undefined'\"],\n    writeSql: false,\n    execute: true,\n    logValues: true,\n  }\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"insert-or-update-if-a-value-exist-in-the-record",children:"Insert or Update if a value exist in the record"}),"\n",(0,t.jsxs)(n.p,{children:["This function will upsert a record only if the logical given is true. In this\ncase we check if ",(0,t.jsx)(n.code,{children:"dataValue('name')"})," exists."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"upsertIf(dataValue('name'), 'users', 'ON CONSTRAINT users_pkey', {\n  name: 'Elodie',\n  id: 7,\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"insert-many-records-in-postgresql",children:"Insert many records in postgresql"}),"\n",(0,t.jsx)(n.p,{children:"This function allows the insert of a set of records inside a table all at once."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"insertMany(\n  'users',\n  state =>\n    state.data.people.map(s => {\n      return {\n        first_name: ['Luca', 'Mohamed', 'Elodie'],\n        inserted_at: '2020-01-01 00:00:00',\n        updated_at: '2020-01-01 00:00:00',\n      };\n    }),\n  { logValues: true }\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"upsert-many-records-in-postgresql",children:"Upsert many records in postgresql"}),"\n",(0,t.jsx)(n.p,{children:"This function allows the upsert of a set of records inside a table all at once."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"upsertMany('users', 'ON CONSTRAINT users_pkey', state =>\n  state.data.people.map(s => {\n    return {\n      first_name: ['Luca', 'Mohamed', 'Elodie'],\n      inserted_at: '2020-01-01 00:00:00',\n      updated_at: '2020-01-01 00:00:00',\n    };\n  })\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"describe-a-table-from-postgres",children:"Describe a table from postgres"}),"\n",(0,t.jsx)(n.p,{children:"This function is used to fetch the list of columns of a given table in the\ndatabase."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"describeTable('users', { writeSql: true, execute: false });\n"})}),"\n",(0,t.jsx)(n.h2,{id:"create-a-table-in-the-database",children:"Create a table in the database"}),"\n",(0,t.jsxs)(n.p,{children:["This function allows to create a table in a database from a given array of\ncolumns. The key ",(0,t.jsx)(n.code,{children:"identity"})," can be use for a column to auto-generate a value."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"insertTable('users', state =>\n  state.data.map(column => ({\n    name: column.name,\n    type: column.type,\n    required: true, // optional\n    unique: false, // optional - set to true for unique constraint\n  }))\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"alter-a-table-in-the-database",children:"Alter a table in the database"}),"\n",(0,t.jsx)(n.p,{children:"This function allows to add new columns to a table. Beware of the fact that you\ncannot add new columns with names that already exist in the table."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"modifyTable(\n  'users',\n  state =>\n    state.data.map(newColumn => ({\n      name: newColumn.name,\n      type: newColumn.type,\n      required: true, // optional\n      unique: false, // optional - set to true for unique constraint\n    })),\n  { writeSql: false, execute: true }\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"development",children:"Development"}),"\n",(0,t.jsxs)(n.p,{children:["Clone the ",(0,t.jsx)(n.a,{href:"https://github.com/OpenFn/adaptors",children:"adaptors monorepo"}),". Follow the\n",(0,t.jsx)(n.code,{children:"Getting Started"})," guide inside to get set up."]}),"\n",(0,t.jsxs)(n.p,{children:["Run tests using ",(0,t.jsx)(n.code,{children:"pnpm run test"})," or ",(0,t.jsx)(n.code,{children:"pnpm run test:watch"})]}),"\n",(0,t.jsxs)(n.p,{children:["Build the project using ",(0,t.jsx)(n.code,{children:"pnpm build"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["To just build the docs run ",(0,t.jsx)(n.code,{children:"pnpm build docs"})]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>o});var s=a(96540);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);