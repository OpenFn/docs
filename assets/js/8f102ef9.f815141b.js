"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[39954],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(96540);const s={},a=o.createContext(s);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:n},e.children)}},86236:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"jobs/operations","title":"What\'s an operation?","description":"An Operation is a function which returns a function which takes state and","source":"@site/versioned_docs/version-legacy/jobs/operations.md","sourceDirName":"jobs","slug":"/jobs/operations","permalink":"/documentation/legacy/jobs/operations","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/versioned_docs/version-legacy/jobs/operations.md","tags":[],"version":"legacy","frontMatter":{"title":"What\'s an operation?"},"sidebar":"docs","previous":{"title":"A closer look at jobs","permalink":"/documentation/legacy/jobs/understanding"},"next":{"title":"Using multiple operations","permalink":"/documentation/legacy/jobs/multiple-operations"}}');var s=t(74848),a=t(28453);const i={title:"What's an operation?"},r=void 0,c={},l=[];function d(e){const n={code:"code",em:"em",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["An Operation is a function which returns a function which takes ",(0,s.jsx)(n.code,{children:"state"})," and\nreturns a ",(0,s.jsx)(n.code,{children:"Promise"})," or ",(0,s.jsx)(n.code,{children:"state"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The purpose of an Operation is to act as an unresolved unit of behaviour."}),"\n",(0,s.jsxs)(n.p,{children:["For example, when creating an expression - the code itself doesn't know what the\nstate is going to be, only what ",(0,s.jsx)(n.em,{children:"it's going to do"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Language packs all follow this convention, where the functions that are provided\nall return Operations."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"create('My_Custom_Object__c', {\n  Custom_Field__c: dataValue('foo'),\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the snippet above, the ",(0,s.jsx)(n.code,{children:"create"})," function doesn't know anything about\ncredentials, or any dynamic data that you may be available at runtime."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function create(objectName, data) {\n  return function (state) {\n    // expand the data argument using state\n    // actually do the work\n  };\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this snippet is a simple example of what most functions in OpenFn look like.\nThe ",(0,s.jsx)(n.code,{children:"create"})," function returns a function that takes state, this is an\n",(0,s.jsx)(n.code,{children:"Operation"}),". The runtime using ",(0,s.jsx)(n.code,{children:"execute"})," will call all Operations with ",(0,s.jsx)(n.code,{children:"state"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);