"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[20438],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(96540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},98831:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"library/jobs/auto/satusehat-create-condition","title":"Create a condition Record","description":"\ud83d\udcdc This job is an official example from OpenFn.","source":"@site/adaptors/library/jobs/auto/satusehat-create-condition.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/satusehat-create-condition","permalink":"/adaptors/library/jobs/auto/satusehat-create-condition","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Create a condition Record","sidebar_label":"\ud83d\udcdc Create a condition Record","id":"satusehat-create-condition","keywords":["library","job","expression","satusehat","map","post"]},"sidebar":"adaptors","previous":{"title":"Configuration","permalink":"/adaptors/packages/satusehat-configuration-schema"},"next":{"title":"\ud83d\udcdc Create an Encounter Record","permalink":"/adaptors/library/jobs/auto/satusehat-create-encounter"}}');var i=t(74848),o=t(28453);const a={title:"Create a condition Record",sidebar_label:"\ud83d\udcdc Create a condition Record",id:"satusehat-create-condition",keywords:["library","job","expression","satusehat","map","post"]},r=void 0,c={},d=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["\ud83d\udcdc ",(0,i.jsx)("em",{children:"This job is an official example from OpenFn."})]}),"\n",(0,i.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Name: Create a condition Record"}),"\n",(0,i.jsxs)(n.li,{children:["Adaptor: ",(0,i.jsx)(n.a,{href:"https://www.github.com/openfn/language-satusehat",children:(0,i.jsx)(n.code,{children:"@openfn/language-satusehat"})})]}),"\n",(0,i.jsxs)(n.li,{children:["Adaptor Version: ",(0,i.jsx)(n.a,{href:"https://www.github.com/openfn/language-satusehat",children:(0,i.jsx)(n.code,{children:"latest"})})]}),"\n",(0,i.jsx)(n.li,{children:"Created date unknown"}),"\n",(0,i.jsx)(n.li,{children:"Updated date unknown"}),"\n",(0,i.jsxs)(n.li,{children:["Score: ",(0,i.jsx)("b",{children:"100"})," (an ",(0,i.jsx)(n.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"map"}),", ",(0,i.jsx)(n.code,{children:"post"})]}),"\n",(0,i.jsx)(n.h2,{id:"expression",children:"Expression"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Map diagnosis objects from commcare into Condition resources\n\nfn(state => {\n  state.conditions = state.visit.diagnosis.map(diagnosis => {\n    const diagnosisName = diagnosis.fields.name;\n    const code = diagnosis.fields['icd_10_code'];\n\n    return {\n      resourceType: 'Condition',\n      clinicalStatus: {\n        coding: [\n          {\n            system: 'http://terminology.hl7.org/CodeSystem/condition-clinical',\n            code: 'active',\n            display: 'Active',\n          },\n        ],\n      },\n      verificationStatus: {\n        coding: [\n          {\n            system:\n              'http://terminology.hl7.org/CodeSystem/condition-ver-status',\n            code: 'confirmed',\n            display: 'Confirmed',\n          },\n        ],\n      },\n      category: [\n        {\n          coding: [\n            {\n              system:\n                'http://terminology.hl7.org/CodeSystem/condition-category',\n              code: 'encounter-diagnosis',\n              display: 'Encounter Diagnosis',\n            },\n          ],\n        },\n      ],\n      subject: {\n        reference: `Patient/${state.patient.ihs_number}`,\n        display: state.patient.full_name,\n      },\n      encounter: {\n        reference: `Encounter/${state.encounterId}`,\n        display:\n          state.patient.full_name +\n          \"'s \" +\n          state.visit.properties.visit_type +\n          ' on ' +\n          state.visit.properties.visit_date,\n      },\n      code: {\n        coding: [\n          {\n            system: 'http://hl7.org/fhir/sid/icd-10',\n            code: code,\n            display: diagnosisName,\n          },\n        ],\n      },\n      bodySite: [\n        {\n          coding: [\n            {\n              system: 'http://snomed.info/sct',\n              code: '74262004',\n              display: 'Oral cavity structure',\n            },\n          ],\n        },\n      ],\n      recorder: {\n        reference: state.encounter.resource.participant[0].individual.reference,\n      },\n      onsetDateTime: state.visit.visit_date,\n      recordedDate: state.visit.visit_date,\n    };\n  });\n  return state;\n});\n\n// Post our condition resources to Satusehat\npost('Condition', $.conditions);\n\nfn(state => {\n  //  Store the newly created resources, created by the server, into state for the next step\n  state.conditions = state.data;\n  return state;\n});\n\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);