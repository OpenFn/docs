"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[20118],{28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>_});var t=n(96540);const s={},o=t.createContext(s);function a(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function _(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:r},e.children)}},96638:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>_,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"library/jobs/auto/WF1-2-Bulk-upsert-HHs-and-HH-Visits-2023-05-19","title":"WF1-2 Bulk upsert HHs and HH Visits","description":"This job was provided by an OpenFn.org user via the job library API.","source":"@site/adaptors/library/jobs/auto/WF1-2-Bulk-upsert-HHs-and-HH-Visits-2023-05-19.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/WF1-2-Bulk-upsert-HHs-and-HH-Visits-2023-05-19","permalink":"/adaptors/library/jobs/auto/WF1-2-Bulk-upsert-HHs-and-HH-Visits-2023-05-19","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"WF1-2 Bulk upsert HHs and HH Visits","sidebar_label":"WF1-2 Bulk upsert HHs and HH Visits","id":"WF1-2-Bulk-upsert-HHs-and-HH-Visits-2023-05-19","keywords":["library","job","expression","salesforce","bulk","join","map","query","JSON"]},"sidebar":"adaptors","previous":{"title":"WF2-2 Bulk upsert Persons","permalink":"/adaptors/library/jobs/auto/WF2-2-Bulk-upsert-Persons-2023-05-19"},"next":{"title":"Q3 2022 Upsert Person Visit","permalink":"/adaptors/library/jobs/auto/Q3-2022-Upsert-Person-Visit-2022-06-28"}}');var s=n(74848),o=n(28453);const a={title:"WF1-2 Bulk upsert HHs and HH Visits",sidebar_label:"WF1-2 Bulk upsert HHs and HH Visits",id:"WF1-2-Bulk-upsert-HHs-and-HH-Visits-2023-05-19",keywords:["library","job","expression","salesforce","bulk","join","map","query","JSON"]},_=void 0,i={},c=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function p(e){const r={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("em",{children:"This job was provided by an OpenFn.org user via the job library API."}),"\n",(0,s.jsx)(r.h2,{id:"metadata",children:"Metadata"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Name: WF1-2 Bulk upsert HHs and HH Visits"}),"\n",(0,s.jsxs)(r.li,{children:["Adaptor: ",(0,s.jsx)(r.a,{href:"https://www.github.com/openfn/language-salesforce",children:(0,s.jsx)(r.code,{children:"@openfn/language-salesforce"})})]}),"\n",(0,s.jsxs)(r.li,{children:["Adaptor Version: ",(0,s.jsx)(r.a,{href:"https://www.github.com/openfn/language-salesforce/releases/tag/v3.0.6",children:(0,s.jsx)(r.code,{children:"v3.0.6"})})]}),"\n",(0,s.jsx)(r.li,{children:"Created about 2 years ago"}),"\n",(0,s.jsx)(r.li,{children:"Updated 6 months ago"}),"\n",(0,s.jsxs)(r.li,{children:["Score: ",(0,s.jsx)("b",{children:"0"})," (an ",(0,s.jsx)(r.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"bulk"}),", ",(0,s.jsx)(r.code,{children:"join"}),", ",(0,s.jsx)(r.code,{children:"map"}),", ",(0,s.jsx)(r.code,{children:"query"}),", ",(0,s.jsx)(r.code,{children:"JSON"})]}),"\n",(0,s.jsx)(r.h2,{id:"expression",children:"Expression"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"fn(state => {\r\n  if (state.payloads.length == 0)\r\n    return { ...state, housevisits: [], households: [] };\r\n\r\n  const owner_ids = state.payloads.map(data => data.properties.owner_id);\r\n  const uniq_owner_ids = [...new Set(owner_ids)];\r\n\r\n  return { ...state, uniq_owner_ids };\r\n});\r\n\r\n\r\nfn(state => {\r\n  if (state.payloads.length == 0) return state;\r\n\r\n  return query(\r\n    `SELECT CommCare_User_ID__c, Id village, Parent_Geographic_Area__c area, Parent_Geographic_Area__r.Name name, Parent_Geographic_Area__r.Parent_Geographic_Area__c catchment FROM Location__c catchment WHERE CommCare_User_ID__c IN ('${state.uniq_owner_ids.join(\r\n      \"','\"\r\n    )}') GROUP BY Id, CommCare_User_ID__c, Parent_Geographic_Area__c, Parent_Geographic_Area__r.Name, Parent_Geographic_Area__r.Parent_Geographic_Area__c`\r\n  )(state);\r\n});\r\n\r\nfn(state => {\r\n  if (state.payloads.length == 0) return state;\r\n\r\n  console.log('Done querying \u2705');\r\n\r\n  return state;\r\n});\r\n\r\nfn(state => {\r\n  if (state.payloads.length == 0) return state;\r\n\r\n  console.log(\r\n    'Filtering out unwanted users and applying mapping for households and housevisits'\r\n  );\r\n\r\n  const [reference] = state.references;\r\n\r\n  //HMN 06/11/2023\r\n // console.log(JSON.stringify(reference.records, null, 2));\r\n\r\n  const records = reference.records;\r\n  const fetchReference = (owner_id, arg) => {\r\n    const result =\r\n      records && records.length > 0\r\n        ? records.filter(record => record.CommCare_User_ID__c === owner_id)\r\n        : 0;\r\n\r\n    //TODO: Update default value for 'unknown location' before go-live\r\n    return result.length > 0\r\n      ? result[0][arg]\r\n      : 'a000800001tMobaAAC' /*unknown location*/;\r\n  };\r\n\r\n  const supervisorMap = {\r\n    community_health_nurse: 'Community Health Nurse',\r\n    chw_supervisor: 'CHW Supervisor',\r\n    chewschas: 'CHEWs/CHAs',\r\n    other: 'Other',\r\n    none: 'None',\r\n  };\r\n\r\n  const insuranceMap = {\r\n    nhif: 'NHIF',\r\n    Linda_mama: 'Linda mama',\r\n    other_please_specify_if_active: 'Other',\r\n    none: 'None',\r\n  };\r\n\r\n  const households = state.payloads\r\n    /* HMN 050723 \r\n    .filter(\r\n      h =>\r\n        h.properties.commcare_username !== 'openfn.test' &&\r\n        h.properties.commcare_username !== 'test.2021' &&\r\n        h.properties.test_user !== 'Yes'\r\n    )\r\n    */\r\n    .map(h => {\r\n      // Special calculations ==================================================\r\n      const insuranceStatus = h.properties.health_insurance;\r\n      const Health_insurance_type__c =\r\n        insuranceStatus && insuranceStatus === 'other_please_specify_if_active'\r\n          ? 'Other'\r\n          : insuranceStatus === 'nhif'\r\n          ? 'NHIF'\r\n          : insuranceStatus === 'Linda_mama' || 'linda_mama'\r\n          ? 'Linda mama'\r\n          : insuranceStatus;\r\n\r\n      const hhStatus = h.properties.Household_Status;\r\n      const Active_Household__c =\r\n        hhStatus && hhStatus === 'No'\r\n          ? false\r\n          : hhStatus === 'Yes'\r\n          ? true\r\n          : hhStatus;\r\n\r\n      const reason = h.properties.Reason_for_Inactive;\r\n      const Inactive_Reason__c = reason\r\n        ? reason.toString().replace(/_/g, ' ')\r\n        : null;\r\n //HMN 06/11/2023\r\n// console.log(JSON.stringify(h.properties, null, 2));\r\n     /*HMN remove this dependancy 07/07/2023\r\n     const chw = h.properties.CHW_ID;\r\n      const Household_CHW__c =\r\n        chw === 'a030800001zQrk' ? 'a030800001zQrk5' : chw ? chw : undefined;\r\n      // =======================================================================\r\n*/\r\n \r\n      return {\r\n        CommCare_Username__c: h.properties.commcare_username,\r\n        MOH_household_code__c: h.properties.moh_code,\r\n        CommCare_Code__c: h.case_id,\r\n        Source__c: true,\r\n        // TODO: Prod mapping to add back before go-live =======================\r\n        Household_CHW__c: h.properties.CHW_ID, // Uncomment me to go live!\r\n        //Household_CHW__c: 'a032400000GHpdsAAD', // Comment me OUT to go live!\r\n      //  Household_CHW__c: 'a03AW00000643nLYAQ',\r\n        // =====================================================================\r\n        Catchment__c: fetchReference(h.properties.owner_id, 'catchment'),\r\n        Area__c: fetchReference(h.properties.owner_id, 'area'),\r\n        Village__c: fetchReference(h.properties.owner_id, 'village'),\r\n        Household_Village__c: h.properties.village,\r\n        Deaths_in_the_last_6_months__c:\r\n          h.properties.deaths_in_past_6_months > 0 ? 'Yes' : 'No',\r\n        Access_to_safe_water__c: h.properties.Safe_Water,\r\n        Treats_Drinking_Water__c: h.properties.Treats_Drinking_Water,\r\n        Tippy_Tap__c: h.properties.Active_Handwashing_Station,\r\n        Pit_Latrine__c: h.properties.Functional_Latrine,\r\n        Rubbish_Pit__c: h.properties.Rubbish_Pit,\r\n        Drying_Rack__c: h.properties.Drying_Rack,\r\n        Kitchen_Garden__c: h.properties.Kitchen_Garden,\r\n        Cookstove__c: h.properties.Improved_Cooking_Method,\r\n        Clothe__c: h.properties.Clothesline,\r\n        WASH_Trained__c: h.properties.WASH_Trained,\r\n        Uses_ITNs__c: h.properties.ITNs,\r\n        Has_muac_tape__c: h.properties.family_muac_tape_available,\r\n        Health_insurance__c: h.properties.health_insurace_cover,\r\n        Health_insurance_active_status__c: h.properties.healthinsurance_active,\r\n        Health_insurance_type__c,\r\n        Other_Health_Insurance__c: h.properties.if_other_please_specify,\r\n        Work_with_TBA__c: h.properties.tba,\r\n        TBA_name__c: h.properties.which_tba,\r\n        Last_Modified_Date_CommCare__c: h.server_date_modified, //Need a case property,\r\n        Active_Household__c,\r\n        Inactive_Reason__c,\r\n        Active_in_Nutrition_Program__c:\r\n          h.properties.enrolled_in_a_lwala_nutrition_program,\r\n        lwala_nutrition_program_enrollment_date__c:\r\n          h.properties.lwala_nutrition_program_enrollment_date,\r\n        Trained_in_gardening__c: h.properties.household_trained_on_gardening,\r\n        household_trained_on_gardening_date__c:\r\n          h.properties.when_was_the_household_trained_on_gardening,\r\n        Seed_Input_Support__c:\r\n          h.properties.household_provided_with_seed_input_support,\r\n        household_provided_with_seed_input_suppo__c:\r\n          h.properties.when_was_the_household_provided_with_seed_input_support,\r\n        MIYCN_Trained__c: h.properties.household_trained_on_MIYC,\r\n        // TODO: @Aleksa to find out if Case_Closed_Date__c still exist\r\n         Case_Closed_Date__c: h.date_closed //&& h.date_closed == true\r\n             ? h.date_closed\r\n             : undefined \r\n      };\r\n    });\r\n\r\n  const housevisits = state.payloads\r\n  //HMN remove test user filters \r\n  /*\r\n    .filter(\r\n      h =>\r\n        h.properties.commcare_username !== 'openfn.test' &&\r\n        h.properties.commcare_username !== 'test.2021' &&\r\n        h.properties.test_user !== 'Yes'\r\n    )*/\r\n    .map(h => {\r\n      // Special calculations ==================================================\r\n    \r\n      \r\n      const visitIdC =\r\n        h.case_id + '_' + h.properties.last_form_opened_date_and_time;\r\n\r\n      const hVstatus = h.properties.Household_Status;\r\n      const Active_Household__c =\r\n        hVstatus === 'No' ? false : hVstatus === 'Yes' ? true : hVstatus;\r\n\r\n      const insuranceTypeC = () => {\r\n        let status = h.properties.health_insurance;\r\n\r\n        let value =\r\n          status && status !== ''\r\n            ? status\r\n                .replace(/ /gi, ';')\r\n                .split(';')\r\n                .map(value => {\r\n                  return insuranceMap[value] || value;\r\n                })\r\n            : undefined;\r\n        return value ? value.join(';') : undefined;\r\n      };\r\n\r\n      const openedC = () => {\r\n        const form_opened = h.properties.last_form_opened_date_and_time;\r\n\r\n        if (form_opened) {\r\n          const value1 = form_opened.split('-').slice(0, 2).join('-');\r\n          const value2 = form_opened.split('-').slice(2).join('-');\r\n          const formattedValue = [value1, value2].join(' ');\r\n          return new Date(formattedValue).toISOString();\r\n        }\r\n        return undefined;\r\n      };\r\n\r\n      return {\r\n        CommCare_Username__c: h.properties.commcare_username,\r\n        CommCare_Visit_ID__c: visitIdC,\r\n        Catchment__c: fetchReference(h.properties.owner_id, 'catchment'),\r\n        'Household__r.CommCare_Code__c': h.case_id,\r\n        Date__c: h.properties.Date,\r\n        Form_Submitted__c: h.properties.last_form_opened_name,\r\n        Active_Household__c: Active_Household__c,\r\n        Active_in_Nutrition_Program__c:\r\n          h.properties.enrolled_in_a_lwala_nutrition_program,\r\n        lwala_nutrition_program_enrollment_date__c:\r\n          h.properties.lwala_nutrition_program_enrollment_date,\r\n        Trained_in_gardening__c: h.properties.household_trained_on_gardening,\r\n        household_trained_on_gardening_date__c:\r\n          h.properties.when_was_the_household_trained_on_gardening,\r\n        Seed_Input_Support__c:\r\n          h.properties.household_provided_with_seed_input_support,\r\n        household_provided_with_seed_input_suppo__c:\r\n          h.properties.when_was_the_household_provided_with_seed_input_support,\r\n        MIYCN_Trained__c: h.properties.household_trained_on_MIYCN,\r\n        Kitchen_Garden__c: h.properties.Kitchen_Garden,\r\n        Access_to_safe_water__c: h.properties.Safe_Water,\r\n        Treats_Drinking_Water__c: h.properties.Treats_Drinking_Water,\r\n        Tippy_Tap__c: h.properties.Active_Handwashing_Station,\r\n        Pit_Latrine__c: h.properties.Functional_Latrine,\r\n        Rubbish_Pit__c: h.properties.Rubbish_Pit,\r\n        Drying_Rack__c: h.properties.Drying_Rack,\r\n        Cookstove__c: h.properties.Improved_Cooking_Method,\r\n        Clothe__c: h.properties.Clothesline,\r\n        WASH_Trained__c: h.properties.WASH_Trained,\r\n        Has_muac_tape__c: h.properties.family_muac_tape_available,\r\n        Uses_ITNs__c: h.properties.ITNs,\r\n        Supervisor_Visit__c: h.properties.supervisor_visit\r\n          ? supervisorMap[h.properties.supervisor_visit]\r\n          : null,\r\n        Health_insurance__c: h.properties.health_insurace_cover,\r\n        Health_insurance_active_status__c: h.properties.healthinsurance_active,\r\n        Health_insurance_type__c: insuranceTypeC(),\r\n\r\n        Other_Health_Insurance__c: h.properties.if_other_please_specify,\r\n        CommCare_Form_Opened__c: openedC(),\r\n        \r\n      };\r\n    });\r\n\r\n  return { ...state, households, housevisits, fetchReference };\r\n});\r\n\r\n//JSON logging of records\r\n//HMN 06/11/2023\r\n/*fn(state => {\r\n  console.log('HHs to upsert ::', JSON.stringify(state.households));\r\n  return state;\r\n});*/\r\n\r\n\r\nbulk(\r\n  'Household__c',\r\n  'upsert',\r\n  {\r\n    extIdField: 'CommCare_Code__c',\r\n    failOnError: true,\r\n    allowNoOp: true,\r\n  },\r\n  state => {\r\n    console.log('Bulk upserting households...');\r\n    return state.households;\r\n  }\r\n);\r\n\r\nfn(state => {\r\n  if (state.payloads.length == 0) return state;\r\n\r\n  console.log('house holds bulk upsert done');\r\n  return state;\r\n});\r\n\r\n// TODO clean up in QA used for troubleshooting\r\n// Uncomment this block to add cooldown\r\n// fn(state => {\r\n//   return new Promise((resolve, reject) => {\r\n//     setTimeout(() => {\r\n//       console.log('4 second cooldown finished.');\r\n//       resolve(state);\r\n//     }, 4000);\r\n//   });\r\n// });\r\n\r\nbulk(\r\n  'Visit__c',\r\n  'upsert',\r\n  {\r\n    extIdField: 'CommCare_Visit_ID__c',\r\n    failOnError: true,\r\n    allowNoOp: true,\r\n  },\r\n  state => {\r\n    console.log('Bulk upserting housevisits...');\r\n    return state.housevisits;\r\n  }\r\n);\r\n\r\nfn(state => {\r\n  if (state.payloads.length == 0) return state;\r\n  console.log('house visits bulk upsert done');\r\n  return state;\r\n});\r\n\r\n// TODO clean up in QA for troubleshooting\r\n// Uncomment this block to add cooldown\r\n// fn(state => {\r\n//   return new Promise((resolve, reject) => {\r\n//     setTimeout(() => {\r\n//       console.log('Final 4 second cooldown finished.');\r\n//       resolve(state);\r\n//     }, 4000);\r\n//   });\r\n// });\n"})})]})}function l(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);