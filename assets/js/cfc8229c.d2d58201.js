"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[63993],{13498:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"library/jobs/auto/WF2-1-Bulk-get-Person-cases-2023-05-19","title":"WF2-1 Bulk get Person cases","description":"This job was provided by an OpenFn.org user via the job library API.","source":"@site/adaptors/library/jobs/auto/WF2-1-Bulk-get-Person-cases-2023-05-19.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/WF2-1-Bulk-get-Person-cases-2023-05-19","permalink":"/adaptors/library/jobs/auto/WF2-1-Bulk-get-Person-cases-2023-05-19","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"WF2-1 Bulk get Person cases","sidebar_label":"WF2-1 Bulk get Person cases","id":"WF2-1-Bulk-get-Person-cases-2023-05-19","keywords":["library","job","expression","http","each","get","map","JSON"]},"sidebar":"adaptors","previous":{"title":"WF3-1 Bulk get Person Visit cases","permalink":"/adaptors/library/jobs/auto/WF3-1-Bulk-get-Person-Visit-cases-2023-05-19"},"next":{"title":"WF1-1 Bulk get HH cases","permalink":"/adaptors/library/jobs/auto/WF1-1-Bulk-get-HH-cases-2023-05-19"}}');var a=n(74848),r=n(28453);const o={title:"WF2-1 Bulk get Person cases",sidebar_label:"WF2-1 Bulk get Person cases",id:"WF2-1-Bulk-get-Person-cases-2023-05-19",keywords:["library","job","expression","http","each","get","map","JSON"]},i=void 0,l={},c=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("em",{children:"This job was provided by an OpenFn.org user via the job library API."}),"\n",(0,a.jsx)(t.h2,{id:"metadata",children:"Metadata"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Name: WF2-1 Bulk get Person cases"}),"\n",(0,a.jsxs)(t.li,{children:["Adaptor: ",(0,a.jsx)(t.a,{href:"https://www.github.com/openfn/language-http",children:(0,a.jsx)(t.code,{children:"@openfn/language-http"})})]}),"\n",(0,a.jsxs)(t.li,{children:["Adaptor Version: ",(0,a.jsx)(t.a,{href:"https://www.github.com/openfn/language-http/releases/tag/v4.2.8",children:(0,a.jsx)(t.code,{children:"v4.2.8"})})]}),"\n",(0,a.jsx)(t.li,{children:"Created about 2 years ago"}),"\n",(0,a.jsx)(t.li,{children:"Updated 5 months ago"}),"\n",(0,a.jsxs)(t.li,{children:["Score: ",(0,a.jsx)("b",{children:"0"})," (an ",(0,a.jsx)(t.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"each"}),", ",(0,a.jsx)(t.code,{children:"get"}),", ",(0,a.jsx)(t.code,{children:"map"}),", ",(0,a.jsx)(t.code,{children:"JSON"})]}),"\n",(0,a.jsx)(t.h2,{id:"expression",children:"Expression"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"fn(state => {\n  const { baseUrl } = state.configuration;\n\n  const caseTypes = ['Person'];\n\n  //NOTE: You can use 'limit' to modify this batch size as desired\n  const limit = 1000; //E.g., change to 10 to process records in smaller batch sizes\n\n  //NOTE: indexedOnStart is the default sync start data the FIRST time the job runs\n  const indexedOnStart = '2024-05-30T03:00:00';\n  \n\n  //NOTE: After first job run, OpenFn will check the job sync data (\"lastRunAt\") to set as the indexedOnStart\n  const lastRunAt =\n    typeof state.lastRunAt !== 'undefined' ? state.lastRunAt : indexedOnStart;\n  console.log('Filtering cases with indexed_on_start > than ::', lastRunAt);\n\n  const queries = caseTypes.map(\n    t => `?type=${t}&indexed_on_start=${lastRunAt}&limit=${limit}`\n    //NOTE: If for testing, you want to fetch data for a specific historical range (e.g., between April 23 and 24)...\n    //...then use the query string below instead of the one above on L16, and custom adjust the index_on start/end dates\n    // t => `?type=${t}&indexed_on_start=2024-01-16T00:00:00&limit=${limit}&indexed_on_end=2024-01-16T23:59:59`\n  );\n\n  return { ...state, queries, baseUrl, payloads: [] };\n});\n\n// create a \"recursiveGet\" which will call itself if CommCare tells us there's\n// more data to fetch for the same form\nfn(state => {\n  const recursiveGet = url =>\n    get(\n      url,\n      {\n        headers: { 'content-type': 'application/json' },\n      },\n      nextState => {\n        const now = new Date();\n        const { baseUrl, data, payloads } = nextState;\n\n        const { meta, objects } = data;\n        console.log('Metadata in CommCare response:', meta);\n\n        const finalState = {\n          ...nextState,\n          payloads: [...payloads, ...objects],\n        };\n\n        if (meta.next) {\n          console.log('Next query detected, recursing...');\n          return recursiveGet(`${baseUrl}${meta.next}`)(finalState);\n        }\n        finalState.lastRunAt = now.toISOString().slice(0, 19);\n        return finalState;\n      }\n    );\n\n  return { ...state, recursiveGet };\n});\n\n// for each initial query, fetch data recursively\neach(\n  '$.queries[*]',\n  fn(state => {\n    return state.recursiveGet(`${state.baseUrl}${state.data}`)(state);\n  })\n);\n// log the total number of payloads returned\nfn(state => {\n  console.log('Count of payloads', state.payloads.length);\n  //HMN 11072023\n // console.log(JSON.stringify(state.payloads, null, 2));\n\n  return { ...state, references: [], data: {} };\n});\n\n"})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(96540);const a={},r=s.createContext(a);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);