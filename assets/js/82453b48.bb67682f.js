"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[56683],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(96540);const o={},a=s.createContext(o);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(a.Provider,{value:n},e.children)}},84779:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"build-for-developers/cli-walkthrough","title":"CLI walkthrough","description":"1. Getting started with the CLI","source":"@site/docs/build-for-developers/cli-walkthrough.md","sourceDirName":"build-for-developers","slug":"/cli-walkthrough","permalink":"/documentation/cli-walkthrough","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/docs/build-for-developers/cli-walkthrough.md","tags":[],"version":"current","frontMatter":{"title":"CLI walkthrough","sidebar_label":"CLI walkthrough","slug":"/cli-walkthrough"},"sidebar":"docs","previous":{"title":"Basic usage","permalink":"/documentation/cli-usage"},"next":{"title":"CLI challenges","permalink":"/documentation/cli-challenges"}}');var o=t(74848),a=t(28453);const r={title:"CLI walkthrough",sidebar_label:"CLI walkthrough",slug:"/cli-walkthrough"},i=void 0,l={},d=[{value:"1. Getting started with the CLI",id:"1-getting-started-with-the-cli",level:3},{value:"2. Using adaptor helper functions",id:"2-using-adaptor-helper-functions",level:3},{value:"Basic usage:",id:"basic-usage",level:4},{value:"Tasks:",id:"tasks",level:4},{value:"3. Understanding <code>state</code>",id:"3-understanding-state",level:3},{value:"<code>state.configuration</code>",id:"stateconfiguration",level:4},{value:"<code>state.data</code>",id:"statedata",level:4},{value:"How can we use state?",id:"how-can-we-use-state",level:4},{value:"Tasks:",id:"tasks-1",level:4},{value:"4. Clean &amp; Transform Data",id:"4-clean--transform-data",level:3},{value:"JavaScript Demo: <code>Array.reduce()</code>",id:"javascript-demo-arrayreduce",level:5},{value:"5. Debugging errors",id:"5-debugging-errors",level:3},{value:"Create <strong>debug.js</strong> and paste the code below",id:"create-debugjs-and-paste-the-code-below",level:5},{value:"Run <strong>openfn debug.js -a http -s tmp/state.json</strong>",id:"run-openfn-debugjs--a-http--s-tmpstatejson",level:5},{value:"6. Each and array iteration",id:"6-each-and-array-iteration",level:3},{value:"Modify getPosts.js to group posts by user-ID",id:"modify-getpostsjs-to-group-posts-by-user-id",level:5},{value:"7. Running Workflows",id:"7-running-workflows",level:3},{value:"Workflow",id:"workflow",level:5},{value:"Example of a workflow",id:"example-of-a-workflow",level:6}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h3:"h3",h4:"h4",h5:"h5",h6:"h6",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"1-getting-started-with-the-cli",children:"1. Getting started with the CLI"}),"\n",(0,o.jsx)(n.admonition,{title:"To get started with @openfn/cli",type:"info",children:(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Create a new folder for the repository you'll be working on by running the\nfollowing command: ",(0,o.jsx)(n.code,{children:"mkdir devchallenge && cd devchallenge"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["While you can keep your job scripts anywhere, it's a good practice to store\n",(0,o.jsx)(n.code,{children:"state.json"})," and ",(0,o.jsx)(n.code,{children:"output.json"})," in a ",(0,o.jsx)(n.code,{children:"tmp"})," folder. To do this, create a new\ndirectory called ",(0,o.jsx)(n.code,{children:"tmp"})," within your ",(0,o.jsx)(n.code,{children:"devchallenge"})," folder: ",(0,o.jsx)(n.code,{children:"mkdir tmp"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Since ",(0,o.jsx)(n.code,{children:"state.json"})," and ",(0,o.jsx)(n.code,{children:"output.json"})," may contain sensitive configuration\ninformation and project data, it's important to never upload them to GitHub.\nTo ensure that GitHub ignores these files, add the ",(0,o.jsx)(n.code,{children:"tmp"})," directory to your\n",(0,o.jsx)(n.code,{children:".gitignore"})," file: ",(0,o.jsx)(n.code,{children:'echo "tmp" >> .gitignore'})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["(Optional) Use the ",(0,o.jsx)(n.code,{children:"tree"})," command to check that your directory structure\nlooks correct. Running ",(0,o.jsx)(n.code,{children:"tree -a"})," in your ",(0,o.jsx)(n.code,{children:"devchallenge"})," folder should display\na structure like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:" devchallenge\n \u251c\u2500\u2500 .gitignore\n \u2514\u2500\u2500 tmp\n     \u251c\u2500\u2500 state.json\n     \u2514\u2500\u2500 output.json\n"})}),"\n"]}),"\n"]})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Create a job file called ",(0,o.jsx)(n.code,{children:"hello.js"})," and write the following code."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"console.log('Hello World!');\n"})}),"\n",(0,o.jsx)(t,{children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)("summary",{children:"What is a job?"}),"\nAn OpenFn job is Javascript code which follows a particular set of conventions.\nTypically a job has one or more ",(0,o.jsx)("i",{children:"operations"})," which perform a particular\ntask (like pulling information from a database, creating a record, etc.) and\nreturn state for the next operation to use."]})}),"\n",(0,o.jsx)(t,{children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)("summary",{children:"What is console.log?"}),"\n",(0,o.jsx)("code",{children:"console.log"})," is a core JavaScript language function which lets\nus output messages to the terminal window."]})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Run the job using the CLI"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn hello.js -o tmp/output.json\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"View expected output"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[CLI] \u26a0 WARNING: No adaptor provided!\n[CLI] \u26a0 This job will probably fail. Pass an adaptor with the -a flag, eg:\n          openfn job.js -a common\n[CLI] \u2714 Compiled from hello.js\n[R/T] \u2666 Starting job job-1\n[JOB] \u2139 Hello World!\n[R/T] \u2714 Completed job job-1 in 1ms\n[CLI] \u2714 State written to tmp/output.json\n[CLI] \u2714 Finished in 17ms \u2728\n\n"})})]}),"\n",(0,o.jsxs)(n.p,{children:["Note that our ",(0,o.jsx)(n.code,{children:"console.log"})," statement was printed as ",(0,o.jsx)(n.code,{children:"[JOB] Hello world!"}),". Using\nthe console like this is helpful for debugging and/or understanding what's\nhappening inside our steps."]}),"\n",(0,o.jsx)(n.h3,{id:"2-using-adaptor-helper-functions",children:"2. Using adaptor helper functions"}),"\n",(0,o.jsxs)(n.p,{children:["Adaptors are Javascript or ",(0,o.jsx)(n.a,{href:"https://www.typescriptlang.org/",children:"Typescript"})," (a\nstrongly typed super-set of JavaScript) modules that provide OpenFn users with a\nset of helper functions for simplifying communication with a specific external\nsystem. Learn more about adaptors here: ",(0,o.jsx)(n.a,{href:"/adaptors/",children:"docs.openfn.org/adaptors"})]}),"\n",(0,o.jsx)(n.h4,{id:"basic-usage",children:"Basic usage:"}),"\n",(0,o.jsxs)(n.p,{children:["Let\u2019s use\n",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/@openfn/language-http",children:"@openfn/language-http"}),"\nadaptor to fetch a list of forms from\n",(0,o.jsx)(n.a,{href:"https://jsonplaceholder.typicode.com/",children:"https://jsonplaceholder.typicode.com/"})]}),"\n",(0,o.jsx)(n.h4,{id:"tasks",children:"Tasks:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Create a file called ",(0,o.jsx)(n.code,{children:"getPosts.js"})," and write the following code"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:"title=getPosts.js",children:"get('https://jsonplaceholder.typicode.com/posts');\nfn(state => {\n  console.log(state.data[0]);\n  return state;\n});\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Run the job by running"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn getPosts.js -i -a http -o tmp/output.json\n"})}),"\n",(0,o.jsxs)(n.admonition,{title:"Understanding CLI arguments",type:"info",children:[(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"-a"})," to specify the adaptor; use ",(0,o.jsx)(n.code,{children:"-i"})," to auto-install the necessary adaptor"]}),(0,o.jsxs)(n.p,{children:["Run ",(0,o.jsx)(n.code,{children:"openfn help"})," to see the full list of CLI arguments."]})]}),"\n",(0,o.jsxs)(n.p,{children:["Since it is our first time using the ",(0,o.jsx)(n.code,{children:"http"})," adaptor, we are installing the\nadaptor using ",(0,o.jsx)(n.code,{children:"-i"})," argument"]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"3. Expand to see expected CLI logs"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"  [CLI] \u2714 Installing packages...\n  [CLI] \u2714 Installed @openfn/language-http@4.2.8\n  [CLI] \u2714 Installation complete in 14.555s\n  [CLI] \u2714 Compiled from getPosts.js\n  [R/T] \u2666 Starting job job-1\n  GET request succeeded with 200 \u2713\n  [JOB] \u2139 {\n    userId: 1,\n    id: 1,\n    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n    body: 'quia et suscipit\\n' +\n      'suscipit recusandae consequuntur expedita et cum\\n' +\n      'reprehenderit molestiae ut ut quas totam\\n' +\n      'nostrum rerum est autem sunt rem eveniet architecto'\n  }\n  [R/T] \u2714 Completed job job-1 in 872ms\n  [CLI] \u2714 State written to tmp/output.json\n  [CLI] \u2714 Finished in 15.518s \u2728\n\n"})})]}),"\n",(0,o.jsxs)(n.admonition,{title:"Placeholder Data",type:"warning",children:[(0,o.jsxs)(n.p,{children:["The data displayed in this CLI logs is generated from a\n",(0,o.jsx)(n.a,{href:"https://jsonplaceholder.typicode.com/",children:"JSONPlaceholder"})," API and does not\nrepresent real-world information. It is intended for testing and development\npurposes only."]}),(0,o.jsx)(n.p,{children:"For accurate testing, consider using real data from your API or service."})]}),"\n",(0,o.jsxs)(n.h3,{id:"3-understanding-state",children:["3. Understanding ",(0,o.jsx)(n.code,{children:"state"})]}),"\n",(0,o.jsxs)(n.p,{children:["If a job expression is a set of instructions for a chef (a recipe?) then the\ninitial state is all of the ingredients they need tied up in a perfect little\nbundle. See\n",(0,o.jsx)(n.a,{href:"/articles/2021/07/05/wrapping-my-head-around-jobs/#it-all-starts-with-state",children:'"It all starts with state\u200b"'}),"\nin the knowledge base for extra context."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"It usually looks something like this"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "configuration": {\n    "hostUrl": "https://moh.kenya.gov.ke/dhis2",\n    "username": "someone",\n    "password": "something-secret"\n  },\n  "data": {\n    "type": "registration",\n    "patient": {\n      "age": 24,\n      "gender": "M",\n      "nationalId": "321cs7"\n    }\n  }\n}\n'})})]}),"\n",(0,o.jsx)(n.h4,{id:"stateconfiguration",children:(0,o.jsx)(n.code,{children:"state.configuration"})}),"\n",(0,o.jsxs)(n.p,{children:["This key is where we put credentials which are used to authorize connections to\nany authenticated system that the job will interact with. (Note that this part\nof ",(0,o.jsx)(n.code,{children:"state"}),' is usually overwritten at runtime with a real "credential" when using\nthe OpenFn platform, rather than the CLI.)']}),"\n",(0,o.jsxs)(n.admonition,{title:"Important",type:"warning",children:[(0,o.jsxs)(n.p,{children:["Note that ",(0,o.jsx)(n.code,{children:"console.log(state)"})," will display the whole state, including\n",(0,o.jsx)(n.code,{children:"state.configuration"})," elements such as ",(0,o.jsx)(n.strong,{children:"username and password"}),". Remove this\nlog whenever you're done debugging to avoid accidentally exposing sensitive\ninformation when the job is successfully deployed on production."]}),(0,o.jsx)(n.p,{children:"The OpenFn platform has built in protections to \"scrub\" state from the logs, but\nwhen you're using the CLI directly you're on your own!"})]}),"\n",(0,o.jsx)(n.h4,{id:"statedata",children:(0,o.jsx)(n.code,{children:"state.data"})}),"\n",(0,o.jsx)(n.p,{children:"This key is where we put data related to a specific job run. On the platform,\nit's the work-order-specific data from a triggering HTTP request or some bit of\ninformation that's passed from one job to another."}),"\n",(0,o.jsxs)(n.p,{children:["Using CLI, ",(0,o.jsx)(n.code,{children:"state.json"})," will be loaded automatically from the current directory"]}),"\n",(0,o.jsx)(n.p,{children:"Or you can specify the path to the state file by passing the option -s,\n--state-path"}),"\n",(0,o.jsxs)(n.p,{children:["Specify a path to your ",(0,o.jsx)(n.code,{children:"state.json"})," file with this command:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn hello.js -a http -s tmp/state.json -o tmp/output.json\n"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Expand to see expected CLI logs"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[CLI] \u2714 Compiled job from hello.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 876ms\n[R/T] \u2714 Operation 2 complete in 0ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 1.222s! \u2728\n"})})]}),"\n",(0,o.jsx)(n.h4,{id:"how-can-we-use-state",children:"How can we use state?"}),"\n",(0,o.jsxs)(n.p,{children:["Each adaptor has a configuration schema that's recommended for use in your\n",(0,o.jsx)(n.code,{children:"state.json"}),". ",(0,o.jsx)(n.a,{href:"/adaptors/packages/http-configuration-schema",children:"Here is an example"}),"\nof how to set up ",(0,o.jsx)(n.code,{children:"state.configuration"})," for ",(0,o.jsx)(n.code,{children:"language-http"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "username": "name@email",\n  "password": "supersecret",\n  "baseUrl": "https://jsonplaceholder.typicode.com"\n}\n'})}),"\n",(0,o.jsx)(n.h4,{id:"tasks-1",children:"Tasks:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Update your ",(0,o.jsx)(n.code,{children:"state.json"})," to look like this:"]}),"\n"]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Expand to see state.json"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:"title=state.json",children:'{\n  "configuration": {\n    "baseUrl": "https://jsonplaceholder.typicode.com"\n  }\n}\n'})})]}),"\n",(0,o.jsxs)(n.p,{children:["Since we have update our configuration in our ",(0,o.jsx)(n.code,{children:"state.json"})," we can now use\n",(0,o.jsx)(n.code,{children:"get()"})," helper function without the need to specify the ",(0,o.jsx)(n.strong,{children:"baseUrl"}),"\u2014i.e\n",(0,o.jsx)(n.code,{children:"get('posts')"})]}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Update your ",(0,o.jsx)(n.code,{children:"getPosts.js"})," job to look like this:"]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Expand to see getPosts.js"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="getPosts.js"',children:"// Get all posts\nget('posts');\n\nfn(state => {\n  const posts = state.data;\n  console.log(posts[0]);\n  return state;\n});\n"})})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Now run the job using the following command"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn getPosts.js -a http -s tmp/state.json -o tmp/output.json\n"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"And validate that you see the expected CLI logs:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[CLI] \u2714 Compiled job from getPosts.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 120ms\n[JOB] \u2139 {\n  userId: 1,\n  id: 1,\n  title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n  body: 'quia et suscipit\\n' +\n    'suscipit recusandae consequuntur expedita et cum\\n' +\n    'reprehenderit molestiae ut ut quas totam\\n' +\n    'nostrum rerum est autem sunt rem eveniet architecto'\n}\n[R/T] \u2714 Operation 2 complete in 0ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 470ms! \u2728\n\n"})})]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"4-clean--transform-data",children:"4. Clean & Transform Data"}),"\n",(0,o.jsxs)(n.p,{children:["In most cases you need to manipulate, clean, or transform data at some step in\nyour workflow. For example after we get data from the\n",(0,o.jsx)(n.code,{children:"https://jsonplaceholder.typicode.com"})," registry we might need to group the posts\nby user id. The example below shows how we can:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["get all posts and return them in ",(0,o.jsx)(n.code,{children:"state.data"})]}),"\n",(0,o.jsxs)(n.li,{children:["group returned posts by ",(0,o.jsx)(n.code,{children:"userId"})]}),"\n",(0,o.jsxs)(n.li,{children:["log posts with userId ",(0,o.jsx)(n.code,{children:"1"})]}),"\n"]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Expand to see example:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="getPosts.js"',children:"// Get all posts\nget('posts');\n\n// Group posts by user id\nfn(state => {\n  const posts = state.data;\n\n  // Group posts by userId\n  const groupPostsByUserId = posts.reduce((acc, post) => {\n    const existingValue = acc[post.userId] || [];\n    return {\n      ...acc,\n      [post.userId]: [...existingValue, post],\n    };\n  }, {});\n\n  console.log(groupPostsByUserId);\n\n  return { ...state, groupPostsByUserId };\n});\n\n// Log posts where userId = 1\nfn(state => {\n  const { groupPostsByUserId } = state;\n  console.log('Post with userId 1', groupPostsByUserId[1]);\n  return state;\n});\n"})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsxs)("summary",{children:["What is ",(0,o.jsx)("code",{children:"array.reduce"}),"?"]}),"\nThe ",(0,o.jsx)("code",{children:"reduce()"})," method applies a function against an accumulator and\neach value of the array (from left-to-right) to reduce it to a single value."]}),(0,o.jsxs)(n.p,{children:["Perhaps the easiest-to-understand case for ",(0,o.jsx)("code",{children:"reduce()"})," is to return\nthe sum of all the elements in an array:"]}),(0,o.jsxs)(n.h5,{id:"javascript-demo-arrayreduce",children:["JavaScript Demo: ",(0,o.jsx)(n.code,{children:"Array.reduce()"})]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\n// 0 + 1 + 2 + 3 + 4\nconst array1 = [1, 2, 3, 4];\nconst initialValue = 0;\nconst sumWithInitial = array1.reduce(\n  (accumulator, currentValue) => accumulator + currentValue,\n  initialValue\n);\n\nconsole.log(sumWithInitial); // Expected output: 10\n\n"})}),(0,o.jsxs)(n.p,{children:["You can learn more about ",(0,o.jsx)(n.code,{children:"array.reduce"})," from\n",(0,o.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce",children:"this article"})]})]}),"\n",(0,o.jsx)(n.blockquote,{children:"\n"}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Expand to see expected CLI logs"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\n[CLI] \u2714 Compiled job from getPosts.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 825ms\n[R/T] \u2714 Operation 2 complete in 0ms\n[JOB] \u2139 Post with userId 1 [ //All of posts for userId 1 ]\n[R/T] \u2714 Operation 3 complete in 12ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 1.239s! \u2728\n\n"})})]}),"\n",(0,o.jsx)(n.h3,{id:"5-debugging-errors",children:"5. Debugging errors"}),"\n",(0,o.jsx)(n.p,{children:"When debugging, it\u2019s interesting and helpful to use console.log to have a visual\nrepresentation of the content of the manipulated objects (such as state)."}),"\n",(0,o.jsxs)(n.p,{children:["When you want to inspect the content of state in between operations, add an\n",(0,o.jsx)(n.code,{children:"fn()"})," block with a ",(0,o.jsx)(n.code,{children:"console.log"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// firstOperation(...);\n\nfn(state => {\n  console.log(state);\n  return state;\n});\n\n// secondOperation(...);\n"})}),"\n",(0,o.jsxs)(n.h5,{id:"create-debugjs-and-paste-the-code-below",children:["Create ",(0,o.jsx)(n.strong,{children:"debug.js"})," and paste the code below"]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Expand to see debug.js"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:'title="debug.js"',children:"// Get all posts\nget('posts');\n\n// Get post by index helper function\nfn(state => {\n  // const getPostbyIndex = (index) => dataValue(index)(state);\n  console.log(dataValue(1));\n\n  return { ...state };\n});\n"})})]}),"\n",(0,o.jsxs)(n.h5,{id:"run-openfn-debugjs--a-http--s-tmpstatejson",children:["Run ",(0,o.jsx)(n.strong,{children:"openfn debug.js -a http -s tmp/state.json"})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Expected CLI logs"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[CLI] \u2718 TypeError: path.match is not a function\n    at dataPath (/tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:258:26)\n    at dataValue (/tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:262:22)\n    at getPostbyIndex (vm:module(0):5:37)\n    at vm:module(0):18:36\n    at /tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:241:12\n    at file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/node_modules/@openfn/runtime/dist/index.js:288:26\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async run (file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/node_modules/@openfn/runtime/dist/index.js:269:18)\n    at async executeHandler (file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/dist/process/runner.js:388:20)\n"})})]}),"\n",(0,o.jsxs)(n.p,{children:["As you can see from our logs that helper function ",(0,o.jsx)(n.code,{children:"dataValue"})," has a TypeError,\nto troubleshoot this you can go to the documentation for **dataValue ->\n",(0,o.jsx)(n.a,{href:"/adaptors/packages/common-docs/#datavaluepath--operation",children:"docs.openfn.org/adaptors/packages/common-docs/#datavaluepath--operation"}),"\n**"]}),"\n",(0,o.jsxs)(n.p,{children:["According to the docs, dataValue takes a path as input, which is of the string\ntype. But in our operation we were passing an integer, that\u2019s why we have a\n",(0,o.jsx)(n.em,{children:"TypeError"}),". You can fix the error by passing a string in dataValue i.e\n",(0,o.jsx)(n.code,{children:"console.log(dataValue(\u201c1\u201d))"})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Expected CLI logs"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[CLI] \u2714 Compiled job from debug.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 722ms\n[JOB] \u2139 [Function (anonymous)]\n[R/T] \u2714 Operation 2 complete in 1ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 1.102s \u2728\n"})})]}),"\n",(0,o.jsxs)(n.p,{children:["If you need more information for debugging you can pass ",(0,o.jsx)(n.code,{children:"-l debug"}),". This sets\nthe log level to ",(0,o.jsx)(n.em,{children:"debug"}),", which logs all information about the run."]}),"\n",(0,o.jsxs)(n.p,{children:["i.e ",(0,o.jsx)(n.code,{children:"openfn debug.js -a http -l debug"})]}),"\n",(0,o.jsx)(n.h3,{id:"6-each-and-array-iteration",children:"6. Each and array iteration"}),"\n",(0,o.jsx)(n.p,{children:"We often have to perform the same operation multiple times for items in an\narray. Most of the helper functions for data manipulation are inherited from\n@openfn/language-common and are available in most of the adaptors."}),"\n",(0,o.jsx)(n.h5,{id:"modify-getpostsjs-to-group-posts-by-user-id",children:"Modify getPosts.js to group posts by user-ID"}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Expand to see getPosts.js"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="getPosts.js"',children:"// Get all posts\nget('posts');\n\n// Group posts by user\nfn(state => {\n  const posts = state.data;\n\n  // Group posts by userId\n  const groupPostsByUserId = posts.reduce((acc, post) => {\n    const existingValue = acc[post.userId] || [];\n    return { ...acc, [post.userId]: [...existingValue, post] };\n  }, {});\n\n  // console.log(groupPostsByUserId);\n  return { ...state, groupPostsByUserId };\n});\n\n// Log posts where userId = 1\nfn(state => {\n  const { groupPostsByUserId } = state;\n  const posts = groupPostsByUserId[1];\n\n  // console.log(\"Post with userId 1\", groupPostsByUserId[1]);\n  return { ...state, posts };\n});\n\neach('posts[*]', state => {\n  console.log('Post', JSON.stringify(state.data, null, 2));\n  return state;\n});\n"})})]}),"\n",(0,o.jsxs)(n.p,{children:["Notice how this code uses the ",(0,o.jsx)(n.code,{children:"each"})," function, a helper function defined in\n",(0,o.jsx)(n.a,{href:"/adaptors/packages/common-docs/#eachdatasource-operation--operation",children:"language-common"}),"\nbut accessed from this job that is using ",(0,o.jsx)(n.code,{children:"language-http"}),". Most adaptors import\nmany functions from ",(0,o.jsx)(n.code,{children:"language-common"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Run ",(0,o.jsx)(n.strong,{children:"openfn getPosts.js -a http -s tmp/state.json -o tmp/output.json"})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Expand to see expected CLI logs"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[CLI] \u2714 Compiled job from getPosts.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 730ms\n[R/T] \u2714 Operation 2 complete in 0ms\n[R/T] \u2714 Operation 3 complete in 0ms\n[JOB] \u2139 Posts [\n// Posts\n]\n[R/T] \u2714 Operation 4 complete in 10ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 1.091s! \u2728\n"})})]}),"\n",(0,o.jsx)(n.h3,{id:"7-running-workflows",children:"7. Running Workflows"}),"\n",(0,o.jsx)(n.p,{children:"Running a workflow allows you to define a list of steps and rules for executing\nthem. You can use a workflow to orchestrate the flow of data between systems in\na structured and automated way."}),"\n",(0,o.jsxs)(n.p,{children:["For example, if you have two steps in your workflow (GET users from system A &\nPOST users to system B), you can set up your workflow to run all steps in\nsequence from start to finish. This imitates the\n",(0,o.jsx)(n.a,{href:"/documentation/build/triggers#flow-triggers",children:"flow trigger patterns"})," on the\nOpenFn platform where a second job should run after the first one succeeds,\nusing the data returned from the first job."]}),"\n",(0,o.jsx)(n.admonition,{title:"tl;dr",type:"info",children:(0,o.jsx)(n.p,{children:"You won't have to assemble the initial state of the next job, the final state of\nthe upstream job will automatically be passed down to the downstream job as the\ninitial state."})}),"\n",(0,o.jsx)(n.h5,{id:"workflow",children:"Workflow"}),"\n",(0,o.jsx)(n.p,{children:"A workflow is the execution plan for running several steps in a sequence. It is\ndefined as a JSON object that consists of the following properties:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "options": {\n    "start": "a" // optionally specify the start node (defaults to steps[0])\n  },\n  "workflow": {\n    "steps": [\n      {\n        "id": "a",\n        "expression": "fn((state) => state)", // code or a path\n        "adaptor": "@openfn/language-common@1.75", // specifiy the adaptor to use (version optional)\n        "state": {\n          "data": {} // optionally pre-populate the data object (this will be overriden by keys in in previous state)\n        },\n        "configuration": {}, // Use this to pass credentials\n        "next": {\n          // This object defines which steps to call next\n          // All edges returning true will run\n          // If there are no next edges, the workflow will end\n          "b": true,\n          "c": {\n            "condition": "!state.error" // Note that this is an expression, not a function\n          }\n        }\n      }\n    ]\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h6,{id:"example-of-a-workflow",children:"Example of a workflow"}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Here's an example of a simple workflow that consists of three steps:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="workflow.json"',children:'{\n  "options": {\n    "start": "getPatients"\n  },\n  "workflow": {\n    "steps": [\n      {\n        "id": "getPatients",\n        "adaptor": "http",\n        "expression": "getPatients.js",\n        "configuration": "tmp/http-creds.json",\n        "next": {\n          "getGlobalOrgUnits": true\n        }\n      },\n      {\n        "id": "getGlobalOrgUnits",\n        "adaptor": "common",\n        "expression": "getGlobalOrgUnits.js",\n        "next": {\n          "createTEIs": true\n        }\n      },\n      {\n        "id": "createTEIs",\n        "adaptor": "dhis2",\n        "expression": "createTEIs.js",\n        "configuration": "tmp/dhis2-creds.json"\n      }\n    ]\n  }\n}\n'})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"tmp/http-creds.json"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="tmp/http-creds.json"',children:'{\n  "baseUrl": "https://jsonplaceholder.typicode.com"\n}\n'})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"tmp/dhis2-creds.json"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="tmp/dhis2-creds.json"',children:'{\n  "hostUrl": "https://play.im.dhis2.org/dev",\n  "password": "district",\n  "username": "admin"\n}\n'})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"getPatients.js"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="getPatients.js"',children:"// Get users from jsonplaceholder\nget('users');\n\n// Prepare new users as new patients\nfn(state => {\n  const newPatients = state.data;\n  return { ...state, newPatients };\n});\n"})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"getGlobalOrgUnits.js"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="getGlobalOrgUnits.js"',children:"// Globals: orgUnits\nfn(state => {\n  const globalOrgUnits = [\n    {\n      label: 'Njandama MCHP',\n      id: 'g8upMTyEZGZ',\n      source: 'Gwenborough',\n    },\n    {\n      label: 'Njandama MCHP',\n      id: 'g8upMTyEZGZ',\n      source: 'Wisokyburgh',\n    },\n    {\n      label: 'Njandama MCHP',\n      id: 'g8upMTyEZGZ',\n      source: 'McKenziehaven',\n    },\n    {\n      label: 'Njandama MCHP',\n      id: 'g8upMTyEZGZ',\n      source: 'South Elvis',\n    },\n    {\n      label: 'Ngelehun CHC',\n      id: 'IpHINAT79UW',\n      source: 'Roscoeview',\n    },\n    {\n      label: 'Ngelehun CHC',\n      id: 'IpHINAT79UW',\n      source: 'South Christy',\n    },\n    {\n      label: 'Ngelehun CHC',\n      id: 'IpHINAT79UW',\n      source: 'Howemouth',\n    },\n    {\n      label: 'Ngelehun CHC',\n      id: 'IpHINAT79UW',\n      source: 'Aliyaview',\n    },\n    {\n      label: 'Baoma Station CHP',\n      id: 'jNb63DIHuwU',\n      source: 'Bartholomebury',\n    },\n    {\n      label: 'Baoma Station CHP',\n      id: 'jNb63DIHuwU',\n      source: 'Lebsackbury',\n    },\n  ];\n\n  return { ...state, globalOrgUnits };\n});\n"})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"createTEIs.js"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="createTEIs.js"',children:"fn(state => {\n  const { newPatients, globalOrgUnits } = state;\n\n  const getOrgUnit = city =>\n    globalOrgUnits.find(orgUnit => orgUnit.source === city).id;\n\n  const mappedEntities = newPatients.map(patient => {\n    const [firstName = 'Patient', lastName = 'Test'] = (\n      patient.name || ''\n    ).split(' ');\n\n    const orgUnit = getOrgUnit(patient.address.city);\n\n    const attributes = [\n      { attribute: 'w75KJ2mc4zz', value: firstName },\n      { attribute: 'zDhUuAYrxNC', value: lastName },\n      { attribute: 'cejWyOfXge6', value: 'Male' },\n    ];\n\n    return { ...patient, attributes: attributes, orgUnit: orgUnit };\n  });\n\n  return { ...state, mappedEntities };\n});\n\neach(\n  'mappedEntities[*]',\n  create('trackedEntityInstances', {\n    orgUnit: dataValue('orgUnit'),\n    trackedEntityType: 'nEenWmSyUEp',\n    attributes: dataValue('attributes'),\n  })\n);\n"})})]}),"\n",(0,o.jsxs)(n.p,{children:["Run ",(0,o.jsx)(n.code,{children:"openfn [path/to/workflow.json]"})," to execute the workflow."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:(0,o.jsxs)(n.p,{children:["For example, if you created ",(0,o.jsx)("code",{children:"workflow.json"})," in the root of your\nproject directory, this would be the project structure:"]})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"    devchallenge\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 getPatients.js\n    \u251c\u2500\u2500 createTEIs.js\n    \u251c\u2500\u2500 getGlobalOrgUnits.js\n    \u251c\u2500\u2500 workflow.json\n    \u2514\u2500\u2500 tmp\n        \u251c\u2500\u2500 http-creds.json\n        \u251c\u2500\u2500 dhis2-creds.json\n        \u2514\u2500\u2500 output.json\n"})})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn workflow.json -o tmp/output.json\n"})}),"\n",(0,o.jsxs)(n.p,{children:["On execution, this workflow will first run the ",(0,o.jsx)(n.code,{children:"getPatients.js"})," job. If is\nsuccessful, ",(0,o.jsx)(n.code,{children:"getGlobalOrgUnits.js"})," will run using the final state of\n",(0,o.jsx)(n.code,{children:"getPatients.js"}),". If ",(0,o.jsx)(n.code,{children:"getGlobalOrgUnits.js"})," is successful, ",(0,o.jsx)(n.code,{children:"createTEIs.js"})," will\nrun using the final state of ",(0,o.jsx)(n.code,{children:"getGlobalOrgUnits.js"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Note that adaptors specified in the ",(0,o.jsx)(n.code,{children:"workflow.json"})," will be auto-installed when\nyou execute the workflow. To execute the workflow run this command:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn workflow.json -o tmp/output.json\n"})}),"\n",(0,o.jsx)(n.p,{children:"On execution, this workflow will first auto-install the adaptors then run the\nworkflow"}),"\n",(0,o.jsxs)(n.admonition,{title:"Important",type:"danger",children:[(0,o.jsxs)(n.p,{children:["When working with the ",(0,o.jsx)(n.code,{children:"workflow.json"})," file, it is important to handle sensitive\ninformation, such as credentials and initial input data, in a secure manner. To\nensure the protection of your sensitive data, please follow the guidelines\noutlined below:"]}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Configuration Key: In the ",(0,o.jsx)(n.code,{children:"workflow.json"})," file, specify a path to a git\nignored configuration file that will contain necessary credentials that will\nbe used to access the destination system. For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n   ...\n   "configuration": "tmp/openMRS-credentials.json"\n },\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Data Key: In case you need to pass initial data to your job, specify a path\nto a gitignored data file"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n...\n "state": {\n   "data": "tmp/initial-data.json",\n }\n}\n'})}),"\n"]}),"\n"]})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);