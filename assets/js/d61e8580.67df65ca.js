"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[99426],{28139:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"jobs/job-examples","title":"Job Code Examples","description":"Below you can find some code blocks for different functions and data handling","source":"@site/docs/jobs/job-examples.md","sourceDirName":"jobs","slug":"/jobs/job-examples","permalink":"/documentation/jobs/job-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/docs/jobs/job-examples.md","tags":[],"version":"current","frontMatter":{"title":"Job Code Examples","sidebar_label":"Job Examples"},"sidebar":"docs","previous":{"title":"Javascript Tips","permalink":"/documentation/jobs/javascript"},"next":{"title":"Code Snippets","permalink":"/documentation/jobs/job-snippets"}}');var s=a(74848),i=a(28453);const r={title:"Job Code Examples",sidebar_label:"Job Examples"},o=void 0,d={},l=[{value:"Job expression (for CommCare to SF)",id:"job-expression-for-commcare-to-sf",level:3},{value:"Accessing the &quot;data array&quot; in Open Data Kit submissions",id:"accessing-the-data-array-in-open-data-kit-submissions",level:3},{value:"ODK to Salesforce: create parent record with many children from parent data",id:"odk-to-salesforce-create-parent-record-with-many-children-from-parent-data",level:3},{value:"Create many child records WITHOUT a repeat group in ODK",id:"create-many-child-records-without-a-repeat-group-in-odk",level:3},{value:"Salesforce: perform an update",id:"salesforce-perform-an-update",level:3},{value:"Salesforce: Set record type using &#39;relationship(...)&#39;",id:"salesforce-set-record-type-using-relationship",level:3},{value:"Salesforce: Set record type using record Type ID",id:"salesforce-set-record-type-using-record-type-id",level:3},{value:"Telerivet: Send SMS based on Salesforce workflow alert",id:"telerivet-send-sms-based-on-salesforce-workflow-alert",level:3},{value:"HTTP: fetch but don&#39;t fail!",id:"http-fetch-but-dont-fail",level:3},{value:"Sample DHIS2 events API job:",id:"sample-dhis2-events-api-job",level:3},{value:"Sample DHIS2 data value sets API job:",id:"sample-dhis2-data-value-sets-api-job",level:3},{value:"sample openMRS expression, creates a person and then a patient",id:"sample-openmrs-expression-creates-a-person-and-then-a-patient",level:3},{value:"merge many values into a child path",id:"merge-many-values-into-a-child-path",level:3},{value:"arrayToString",id:"arraytostring",level:3},{value:"access an image URL from an ODK submission",id:"access-an-image-url-from-an-odk-submission",level:3},{value:"alterState (alter state) to make sure data is in an array",id:"alterstate-alter-state-to-make-sure-data-is-in-an-array",level:3},{value:"Login in to a server with a custom SSL Certificate",id:"login-in-to-a-server-with-a-custom-ssl-certificate",level:3}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Below you can find some code blocks for different functions and data handling\ncontexts to use in your Jobs."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["For example Jobs written by the OpenFn core team and other users, check out the\n",(0,s.jsx)(n.a,{href:"/adaptors/library",children:"Library"})," or other project repositories under\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn",children:"GitHub.com/OpenFn"}),"."]})}),"\n",(0,s.jsx)(n.admonition,{title:"Questions?",type:"info",children:(0,s.jsxs)(n.p,{children:["If you have any job-writing questions, ask on\n",(0,s.jsx)(n.a,{href:"https://community.openfn.org",children:"Community"})," to seek assistance from the OpenFn\ncore team and other implementers."]})}),"\n",(0,s.jsx)(n.h3,{id:"job-expression-for-commcare-to-sf",children:"Job expression (for CommCare to SF)"}),"\n",(0,s.jsxs)(n.p,{children:["The following job expression will take a matching receipt and use data from that\nreceipt to upsert a ",(0,s.jsx)(n.code,{children:"Patient__c"})," record in Salesforce and create multiple new\n",(0,s.jsx)(n.code,{children:"Patient_Visit__c"})," (child to Patient) records."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"upsert(\n  'Patient__c',\n  'Patient_Id__c',\n  fields(\n    field('Patient_Id__c', dataValue('form.patient_ID')),\n    relationship('Nurse__r', 'Nurse_ID_code__c', dataValue('form.staff_id')),\n    field('Phone_Number__c', dataValue('form.mobile_phone'))\n  )\n),\n  each(\n    join('$.data.form.visits[*]', '$.references[0].id', 'Id'),\n    create(\n      'Visit__c',\n      fields(\n        field('Patient__c', dataValue('Id')),\n        field('Date__c', dataValue('date')),\n        field('Reason__c', dataValue('why_did_they_see_doctor'))\n      )\n    )\n  );\n"})}),"\n",(0,s.jsx)(n.h3,{id:"accessing-the-data-array-in-open-data-kit-submissions",children:'Accessing the "data array" in Open Data Kit submissions'}),"\n",(0,s.jsx)(n.p,{children:'Notice how we use "each" to get data from each item inside the "data array" in\nODK.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"each(\n  '$.data.data[*]',\n  create(\n    'ODK_Submission__c',\n    fields(\n      field('Site_School_ID_Number__c', dataValue('school')),\n      field('Date_Completed__c', dataValue('date')),\n      field('comments__c', dataValue('comments')),\n      field('ODK_Key__c', dataValue('*meta-instance-id*'))\n    )\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"odk-to-salesforce-create-parent-record-with-many-children-from-parent-data",children:"ODK to Salesforce: create parent record with many children from parent data"}),"\n",(0,s.jsxs)(n.p,{children:["Here, the user brings ",(0,s.jsx)(n.code,{children:"time_end"})," and ",(0,s.jsx)(n.code,{children:"parentId"})," onto the line items from the\nparent object."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"each(\n  dataPath('data[*]'),\n  combine(\n    create(\n      'transaction__c',\n      fields(\n        field('Transaction_Date__c', dataValue('today')),\n        relationship(\n          'Person_Responsible__r',\n          'Staff_ID_Code__c',\n          dataValue('person_code')\n        ),\n        field('metainstanceid__c', dataValue('*meta-instance-id*'))\n      )\n    ),\n    each(\n      merge(\n        dataPath('line_items[*]'),\n        fields(\n          field('end', dataValue('time_end')),\n          field('parentId', lastReferenceValue('id'))\n        )\n      ),\n      create(\n        'line_item__c',\n        fields(\n          field('transaction__c', dataValue('parentId')),\n          field('Barcode__c', dataValue('product_barcode')),\n          field('ODK_Form_Completed__c', dataValue('end'))\n        )\n      )\n    )\n  )\n);\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["NB - there was a known bug with the ",(0,s.jsx)(n.code,{children:"combine"})," function which has been\nresolved. ",(0,s.jsx)(n.code,{children:"combine"})," can be used to combine two operations into one and is\ncommonly used to run multiple ",(0,s.jsx)(n.code,{children:"create"}),"'s inside an ",(0,s.jsx)(n.code,{children:"each(path, operation)"}),".\nThe source code for combine can be found here:\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L204-L222",children:"language-common: combine"})]})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"create-many-child-records-without-a-repeat-group-in-odk",children:"Create many child records WITHOUT a repeat group in ODK"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"beta.each(\n  '$.data.data[*]',\n  upsert(\n    'Outlet__c',\n    'Outlet_Code__c',\n    fields(\n      field('Outlet_Code__c', dataValue('outlet_code')),\n      field('Location__Latitude__s', dataValue('gps:Latitude')),\n      field('Location__Longitude__s', dataValue('gps:Longitude'))\n    )\n  )\n),\n  beta.each(\n    '$.data.data[*]',\n    upsert(\n      'Outlet_Call__c',\n      'Invoice_Number__c',\n      fields(\n        field('Invoice_Number__c', dataValue('invoice_number')),\n        relationship('Outlet__r', 'Outlet_Code__c', dataValue('outlet_code')),\n        relationship('RecordType', 'name', 'No Call Card'),\n        field('Trip__c', 'a0FN0000008jPue'),\n        relationship(\n          'Sales_Person__r',\n          'Sales_Rep_Code__c',\n          dataValue('sales_rep_code')\n        ),\n        field('Date__c', dataValue('date')),\n        field('Comments__c', dataValue('comments'))\n      )\n    )\n  );\n"})}),"\n",(0,s.jsx)(n.h3,{id:"salesforce-perform-an-update",children:"Salesforce: perform an update"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'update("Patient__c", fields(\n  field("Id", dataValue("pathToSalesforceId")),\n  field("Name__c", dataValue("patient.first_name")),\n  field(...)\n));\n'})}),"\n",(0,s.jsx)(n.h3,{id:"salesforce-set-record-type-using-relationship",children:"Salesforce: Set record type using 'relationship(...)'"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"create(\n  'custom_obj__c',\n  fields(\n    relationship(\n      'RecordType',\n      'name',\n      dataValue('submission_type'),\n      field('name', dataValue('Name'))\n    )\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"salesforce-set-record-type-using-record-type-id",children:"Salesforce: Set record type using record Type ID"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"each(\n  '$.data.data[*]',\n  create(\n    'fancy_object__c',\n    fields(\n      field('RecordTypeId', '012110000008s19'),\n      field('site_size', dataValue('size'))\n    )\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"telerivet-send-sms-based-on-salesforce-workflow-alert",children:"Telerivet: Send SMS based on Salesforce workflow alert"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"send(\n  fields(\n    field(\n      'to_number',\n      dataValue(\n        'Envelope.Body.notifications.Notification.sObject.phone_number__c'\n      )\n    ),\n    field('message_type', 'sms'),\n    field('route_id', ''),\n    field('content', function (state) {\n      return 'Hey there. Your name is '.concat(\n        dataValue('Envelope.Body.notifications.Notification.sObject.name__c')(\n          state\n        ),\n        '.'\n      );\n    })\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"http-fetch-but-dont-fail",children:"HTTP: fetch but don't fail!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// =============\n// We use "fetchWithErrors(...)" so that when the\n// SMS gateway returns an error the run does not "fail".\n// It "succeeds" and then delivers that error message\n// back to Salesforce with the "Update SMS Status" job.\n// =============\nfetchWithErrors({\n  getEndpoint: \'send_to_contact\',\n  query: function (state) {\n    return {\n      msisdn:\n        state.data.Envelope.Body.notifications.Notification.sObject\n          .SMS__Phone_Number__c,\n      message:\n        state.data.Envelope.Body.notifications.Notification.sObject\n          .SMS__Message__c,\n      api_key: \'some-secret-key\',\n    };\n  },\n  externalId: state.data.Envelope.Body.notifications.Notification.sObject.Id,\n  postUrl: \'https://www.openfn.org/inbox/another-secret-key\',\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"sample-dhis2-events-api-job",children:"Sample DHIS2 events API job:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"event(\n  fields(\n    field('program', 'eBAyeGv0exc'),\n    field('orgUnit', 'DiszpKrYNg8'),\n    field('eventDate', dataValue('properties.date')),\n    field('status', 'COMPLETED'),\n    field('storedBy', 'admin'),\n    field('coordinate', {\n      latitude: '59.8',\n      longitude: '10.9',\n    }),\n    field('dataValues', function (state) {\n      return [\n        {\n          dataElement: 'qrur9Dvnyt5',\n          value: dataValue('properties.prop_a')(state),\n        },\n        {\n          dataElement: 'oZg33kd9taw',\n          value: dataValue('properties.prop_b')(state),\n        },\n        {\n          dataElement: 'msodh3rEMJa',\n          value: dataValue('properties.prop_c')(state),\n        },\n      ];\n    })\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sample-dhis2-data-value-sets-api-job",children:"Sample DHIS2 data value sets API job:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"dataValueSet(\n  fields(\n    field('dataSet', 'pBOMPrpg1QX'),\n    field('orgUnit', 'DiszpKrYNg8'),\n    field('period', '201401'),\n    field('completeData', dataValue('date')),\n    field('dataValues', function (state) {\n      return [\n        { dataElement: 'f7n9E0hX8qk', value: dataValue('prop_a')(state) },\n        { dataElement: 'Ix2HsbDMLea', value: dataValue('prop_b')(state) },\n        { dataElement: 'eY5ehpbEsB7', value: dataValue('prop_c')(state) },\n      ];\n    })\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sample-openmrs-expression-creates-a-person-and-then-a-patient",children:"sample openMRS expression, creates a person and then a patient"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"person(\n  fields(\n    field('gender', 'F'),\n    field('names', function (state) {\n      return [\n        {\n          givenName: dataValue('form.first_name')(state),\n          familyName: dataValue('form.last_name')(state),\n        },\n      ];\n    })\n  )\n),\n  patient(\n    fields(\n      field('person', lastReferenceValue('uuid')),\n      field('identifiers', function (state) {\n        return [\n          {\n            identifier: '1234',\n            identifierType: '8d79403a-c2cc-11de-8d13-0010c6dffd0f',\n            location: '8d6c993e-c2cc-11de-8d13-0010c6dffd0f',\n            preferred: true,\n          },\n        ];\n      })\n    )\n  );\n"})}),"\n",(0,s.jsx)(n.h3,{id:"merge-many-values-into-a-child-path",children:"merge many values into a child path"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'each(\n  merge(\n    dataPath("CHILD_ARRAY[*]"),\n    fields(\n      field("metaId", dataValue("*meta-instance-id*")),\n      field("parentId", lastReferenceValue("id"))\n    )\n  ),\n  create(...)\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"arraytostring",children:"arrayToString"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"arrayToString(arr, separator_string);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"access-an-image-url-from-an-odk-submission",children:"access an image URL from an ODK submission"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// In ODK the image URL is inside an image object...\nfield("Photo_URL_text__c", dataValue("image.url")),\n'})}),"\n",(0,s.jsx)(n.h3,{id:"alterstate-alter-state-to-make-sure-data-is-in-an-array",children:"alterState (alter state) to make sure data is in an array"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Here, we make sure CommCare gives us an array to use in each(merge(...), ...)\nfn(state => {\n  const idCards = state.data.form.ID_cards_given_to_vendor;\n  if (!Array.isArray(idCards)) {\n    state.data.form.ID_cards_given_to_vendor = [idCards];\n  }\n  return state;\n});\n\n// Now state has been changed, and we carry on...\neach(\n  merge(\n    dataPath('form.ID_cards_given_to_vendor[*]'),\n    fields(\n      field('Vendor_Id', dataValue('form.ID_vendor')),\n      field('form_finished_time', dataValue('form.meta.timeEnd'))\n    )\n  ),\n  upsert(\n    'Small_Packet__c',\n    'sp_id__c',\n    fields(\n      field('sp_id__c', dataValue('ID_cards_given_to_vendor')),\n      relationship('Vendor__r', 'Badge_Code__c', dataValue('Vendor_Id')),\n      field(\n        'Small_Packet_Distribution_Date__c',\n        dataValue('form_finished_time')\n      )\n    )\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"login-in-to-a-server-with-a-custom-ssl-certificate",children:"Login in to a server with a custom SSL Certificate"}),"\n",(0,s.jsxs)(n.p,{children:["This snippet describes how you would connect to a secure server ignoring SSL\ncertificate verification. Set ",(0,s.jsx)(n.code,{children:"strictSSL: false"})," in the options argument of the\n",(0,s.jsx)(n.code,{children:"post"})," function in ",(0,s.jsx)(n.code,{children:"language-http"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"post(\n  `${state.configuration.url}/${path}`,\n  {\n    headers: { 'content-type': 'application/json' },\n    body: {\n      email: 'Luka',\n      password: 'somethingSecret',\n    },\n    strictSSL: false,\n  },\n  callback\n);\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var t=a(96540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);