"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[81844],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(96540);const o={},i=s.createContext(o);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},35442:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"cli","title":"The CLI","description":"- It\'s a hands-on way to learn about the new OpenFn CLI. By following the","source":"@site/versioned_docs/version-legacy/cli.md","sourceDirName":".","slug":"/cli","permalink":"/documentation/legacy/cli","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/versioned_docs/version-legacy/cli.md","tags":[],"version":"legacy","frontMatter":{"title":"The CLI","sidebar_label":"CLI","slug":"/cli"},"sidebar":"docs","previous":{"title":"Generic Sources","permalink":"/documentation/legacy/source-apps"},"next":{"title":"Troubleshooting","permalink":"/documentation/legacy/build/troubleshooting"}}');var o=t(74848),i=t(28453);const a={title:"The CLI",sidebar_label:"CLI",slug:"/cli"},r=void 0,l={},d=[{value:"Intro to the OpenFn CLI",id:"intro-to-the-openfn-cli",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Walkthrough &amp; Challenges",id:"walkthrough--challenges",level:2},{value:"1. Getting started with the CLI",id:"1-getting-started-with-the-cli",level:3},{value:"Tasks:",id:"tasks",level:4},{value:"\ud83c\udfc6 Challenge: Write a job that prints your name",id:"-challenge-write-a-job-that-prints-your-name",level:4},{value:"2. Using adaptor helper functions",id:"2-using-adaptor-helper-functions",level:3},{value:"Basic usage:",id:"basic-usage",level:4},{value:"Tasks:",id:"tasks-1",level:4},{value:"\ud83c\udfc6 Challenge: Get and inspect data via HTTP",id:"-challenge-get-and-inspect-data-via-http",level:4},{value:"3. Understanding <code>state</code>",id:"3-understanding-state",level:3},{value:"<code>state.configuration</code>",id:"stateconfiguration",level:4},{value:"<code>state.data</code>",id:"statedata",level:4},{value:"How can we use state?",id:"how-can-we-use-state",level:4},{value:"Tasks:",id:"tasks-2",level:4},{value:"\ud83c\udfc6 Challenge: Fetch Covid-19 metadata",id:"-challenge-fetch-covid-19-metadata",level:4},{value:"4. Additional arguments and commands",id:"4-additional-arguments-and-commands",level:3},{value:"\ud83c\udfc6 Challenge: Practice CLI arguments and commands",id:"-challenge-practice-cli-arguments-and-commands",level:4},{value:"5. Manipulating data in a sequence of operations",id:"5-manipulating-data-in-a-sequence-of-operations",level:3},{value:"Example:",id:"example",level:5},{value:"JavaScript Demo: <code>Array.reduce()</code>",id:"javascript-demo-arrayreduce",level:5},{value:"\ud83c\udfc6 Challenge: extract names &amp; emails",id:"-challenge-extract-names--emails",level:4},{value:"6. Debugging errors",id:"6-debugging-errors",level:3},{value:"Create <strong>debug.js</strong> and paste the code below",id:"create-debugjs-and-paste-the-code-below",level:5},{value:"Run <strong>openfn debug.js -a http</strong>",id:"run-openfn-debugjs--a-http",level:5},{value:"\ud83c\udfc6 Challenge: control error messages",id:"-challenge-control-error-messages",level:4},{value:"7. Each and array iteration",id:"7-each-and-array-iteration",level:3},{value:"Modify getPosts.js to group posts by user-ID",id:"modify-getpostsjs-to-group-posts-by-user-id",level:5},{value:"Run <strong>openfn getPosts.js -a http -o tmp/output.json</strong>",id:"run-openfn-getpostsjs--a-http--o-tmpoutputjson",level:5},{value:"\ud83c\udfc6 Challenge: Reduce, filter, and map",id:"-challenge-reduce-filter-and-map",level:4},{value:"8. Running Workflows",id:"8-running-workflows",level:3},{value:"Workflow",id:"workflow",level:5},{value:"Example of a workflow",id:"example-of-a-workflow",level:6},{value:"CLI Usage - Key Commands",id:"cli-usage---key-commands",level:2},{value:"Check the version",id:"check-the-version",level:3},{value:"Get help",id:"get-help",level:3},{value:"Run a job",id:"run-a-job",level:3},{value:"Change log level",id:"change-log-level",level:3},{value:"Compilation",id:"compilation",level:3}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.admonition,{title:"What is this tutorial?",type:"info",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["It's a ",(0,o.jsx)(n.em,{children:"hands-on"}),' way to learn about the new OpenFn CLI. By following the\nprompts and "challenges", a developer with a bit of Javascript experience\nshould be able to write, run, and debug complex, multi-step jobs with OpenFn,\nusing nothing but a text editor and their terminal.']}),"\n",(0,o.jsx)(n.li,{children:"The estimated time to finish this developer challenge is 1 to 2 hours\n(depending on your familiarity with the underlying concepts and tooling)"}),"\n",(0,o.jsxs)(n.li,{children:["If you are stuck and need help, please post in\n",(0,o.jsx)(n.a,{href:"https://community.openfn.org/t/about-the-job-writing-category/11/1",children:"community.openfn.org"})]}),"\n"]})}),"\n",(0,o.jsx)(n.h2,{id:"intro-to-the-openfn-cli",children:"Intro to the OpenFn CLI"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"https://github.com/OpenFn/kit/tree/main/packages/cli",children:"@openfn/cli"})," is a\ncommand line interface for running OpenFn workflows locally. It enables\ndevelopers to run, build, and test steps in an OpenFn workflow."]}),"\n",(0,o.jsxs)(n.p,{children:["This CLI replaces ",(0,o.jsx)(n.a,{href:"https://github.com/OpenFn/devtools",children:"@openfn/devtools"})," and\nprovides a new suite of features and improvements, including:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"a new runtime and compiler for executing and creating runnable OpenFn jobs,"}),"\n",(0,o.jsx)(n.li,{children:"customizable logging output,"}),"\n",(0,o.jsx)(n.li,{children:"automatic installation of language adaptors,"}),"\n",(0,o.jsxs)(n.li,{children:["and support for the adaptors monorepo\n(",(0,o.jsx)(n.a,{href:"https://github.com/OpenFn/adaptors",children:"@openfn/adaptors"}),") where all OpenFn\nadaptor source code and documentation lives."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"These features are designed to make it easier and more convenient for developers\nto use and understand OpenFn."}),"\n",(0,o.jsx)(n.admonition,{title:"Looking for a way to execute jobs from OpenFn v1 locally? Use Core!",type:"caution",children:(0,o.jsxs)(n.p,{children:["If you're looking for a way to execute jobs running on the OpenFn v1 platform,\nplease see the documentation for\n",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"https://github.com/OpenFn/core",children:"@openfn/core"})})," and\n",(0,o.jsx)(n.a,{href:"https://github.com/OpenFn/devtools",children:"Devtools"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Ensure you have a code editor installed on your machine (e.g.\n",(0,o.jsx)(n.a,{href:"https://code.visualstudio.com/",children:"VS Code"}),",\n",(0,o.jsx)(n.a,{href:"https://www.sublimetext.com/",children:"Sublime"}),")"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Install NodeJs ",(0,o.jsx)(n.strong,{children:"v18 is the minimum version required"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["To install a specific version of Node.js (in this case, version 18) on\nLinux, Windows, or macOS, you can use a version manager such as nvm (Node\nVersion Manager) or any multiple runtime version manager eg:\n",(0,o.jsx)(n.a,{href:"https://github.com/asdf-vm/asdf",children:"asdf"}),". These tools allow you to install\nand switch between multiple versions of Node.js on the same machine. See\nbelow for instructions for different operating systems."]}),"\n",(0,o.jsxs)(n.li,{children:["Read this article to learn how to install NodeJs in your machine\n",(0,o.jsx)(n.a,{href:"https://kinsta.com/blog/how-to-install-node-js/",children:"kinsta.com/blog/how-to-install-node-js/"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Have a basic understanding of OpenFn\u2014check out jobs and adaptors, at least,\nin the ",(0,o.jsx)(n.a,{href:"getting-started/terminology",children:"OpenFn Concepts"})," of this site."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Install the OpenFn CLI with ",(0,o.jsx)(n.code,{children:"npm install -g @openfn/cli"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"walkthrough--challenges",children:"Walkthrough & Challenges"}),"\n",(0,o.jsx)(n.h3,{id:"1-getting-started-with-the-cli",children:"1. Getting started with the CLI"}),"\n",(0,o.jsx)(n.p,{children:"Let's start by running a simple command with the CLI. Type the following into\nyour terminal:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn test\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The word ",(0,o.jsx)(n.code,{children:"openfn"})," will invoke the CLI. The word ",(0,o.jsx)(n.code,{children:"test"})," will invoke the test\ncommand."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"You should see some output like this:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'[CLI] \u2139 Versions:\n        \u25b8 node.js     18.12.1\n        \u25b8 cli         0.0.39\n        \u25b8 runtime     0.0.24\n        \u25b8 compiler    0.0.32\n[CLI] \u2139 Running test job...\n[CLI] \u2139 Workflow object:\n[CLI] \u2139 {\n  "start": "start",\n  "jobs": [\n    {\n      "id": "start",\n      "data": {\n        "defaultAnswer": 42\n      },\n      "expression": "const fn = () => (state) => { console.log(\'Starting computer...\'); return state; }; fn()",\n      "next": {\n        "calculate": "!state.error"\n      }\n    },\n    {\n      "id": "calculate",\n      "expression": "const fn = () => (state) => { console.log(\'Calculating to life, the universe, and everything..\'); return state }; fn()",\n      "next": {\n        "result": true\n      }\n    },\n    {\n      "id": "result",\n      "expression": "const fn = () => (state) => ({ data: { answer: state.data.answer || state.data.defaultAnswer } }); fn()"\n    }\n  ]\n}\n\n[CLI] \u2714 Compilation complete\n[R/T] \u2666 Starting job start\n[JOB] \u2139 Starting computer...\n[R/T] \u2139 Operation 1 complete in 0ms\n[R/T] \u2714 Completed job start in 1ms\n[R/T] \u2666 Starting job calculate\n[JOB] \u2139 Calculating to life, the universe, and everything..\n[R/T] \u2139 Operation 1 complete in 0ms\n[R/T] \u2714 Completed job calculate in 1ms\n[R/T] \u2666 Starting job result\n[R/T] \u2139 Operation 1 complete in 0ms\n[R/T] \u2714 Completed job result in 0ms\n[CLI] \u2714 Result: 42\n\n'})})]}),"\n",(0,o.jsxs)(n.p,{children:["What we've just done is executed a JavaScript expression, which we call a ",(0,o.jsx)(n.em,{children:"job"}),".\nThe output prefixed with ",(0,o.jsx)(n.code,{children:"[JOB]"})," comes directly from ",(0,o.jsx)(n.code,{children:"console.log"})," statements in\nour job code. All other output is the CLI trying to tell us what it is doing."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)("summary",{children:"What is a job?"}),"\nA job is Javascript code which follows a particular set of conventions.\nTypically a job has one or more ",(0,o.jsx)("i",{children:"operations"})," which perform a particular\ntask (like pulling information from a database, creating a record, etc.) and\nreturn state for the next operation to use."]}),(0,o.jsx)(n.p,{children:"The test job we just ran looks like this:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const fn = () => state => {\n  console.log(\n    'Calculating the answer to life, the universe, and everything...'\n  );\n  return state * 2;\n};\nexport default [fn()];\n"})}),(0,o.jsx)(n.p,{children:"You can see this (and a lot more detail) by running the test command with\ndebug-level logging:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn test --log debug\n"})})]}),"\n",(0,o.jsx)(n.h4,{id:"tasks",children:"Tasks:"}),"\n",(0,o.jsx)(n.admonition,{title:"To get started with @openfn/cli",type:"info",children:(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Create a new folder for the repository you'll be working on by running the\nfollowing command: ",(0,o.jsx)(n.code,{children:"mkdir devchallenge && cd devchallenge"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["While you can keep your job scripts anywhere, it's a good practice to store\n",(0,o.jsx)(n.code,{children:"state.json"})," and ",(0,o.jsx)(n.code,{children:"output.json"})," in a ",(0,o.jsx)(n.code,{children:"tmp"})," folder. To do this, create a new\ndirectory called ",(0,o.jsx)(n.code,{children:"tmp"})," within your ",(0,o.jsx)(n.code,{children:"devchallenge"})," folder: ",(0,o.jsx)(n.code,{children:"mkdir tmp"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Since ",(0,o.jsx)(n.code,{children:"state.json"})," and ",(0,o.jsx)(n.code,{children:"output.json"})," may contain sensitive configuration\ninformation and project data, it's important to never upload them to GitHub.\nTo ensure that GitHub ignores these files, add the ",(0,o.jsx)(n.code,{children:"tmp"})," directory to your\n",(0,o.jsx)(n.code,{children:".gitignore"})," file: ",(0,o.jsx)(n.code,{children:'echo "tmp" >> .gitignore'})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["(Optional) Use the ",(0,o.jsx)(n.code,{children:"tree"})," command to check that your directory structure\nlooks correct. Running ",(0,o.jsx)(n.code,{children:"tree -a"})," in your ",(0,o.jsx)(n.code,{children:"devchallenge"})," folder should display\na structure like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:" devchallenge\n \u251c\u2500\u2500 .gitignore\n \u2514\u2500\u2500 tmp\n     \u251c\u2500\u2500 state.json\n     \u2514\u2500\u2500 output.json\n"})}),"\n"]}),"\n"]})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Create a file called ",(0,o.jsx)(n.code,{children:"hello.js"})," and write the following code."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"console.log('Hello World!');\n"})}),"\n",(0,o.jsx)(t,{children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)("summary",{children:"What is console.log?"}),"\n",(0,o.jsx)("code",{children:"console.log"})," is a core JavaScript language function which lets\nus send messages to the terminal window."]})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Run the job using the CLI"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn hello.js -o tmp/output.json\n"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"View expected output"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"  [CLI] \u26a0 WARNING: No adaptor provided!\n  [CLI] \u26a0 This job will probably fail. Pass an adaptor with the -a flag, eg:\n            openfn job.js -a common\n  [CLI] \u2714 Compiled from helo.js\n  [R/T] \u2666 Starting job job-1\n  [JOB] \u2139 Hello World!\n  [R/T] \u2714 Completed job job-1 in 1ms\n  [CLI] \u2714 State written to tmp/output.json\n  [CLI] \u2714 Finished in 17ms \u2728\n"})})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Note that our ",(0,o.jsx)(n.code,{children:"console.log"})," statement was printed as ",(0,o.jsx)(n.code,{children:"[JOB] Hello world!"}),". Using\nthe console like this is helpful for debugging and/or understanding what's\nhappening inside our jobs."]}),"\n",(0,o.jsx)(n.h4,{id:"-challenge-write-a-job-that-prints-your-name",children:"\ud83c\udfc6 Challenge: Write a job that prints your name"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Modify ",(0,o.jsx)(n.code,{children:"hello.js"})," to print your name."]}),"\n",(0,o.jsxs)(n.li,{children:["Re-run the job by running ",(0,o.jsx)(n.code,{children:"openfn hello.js -a common -o tmp/output.json"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"Validate that you receive the logs below:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[CLI] \u2714 Compiled job from hello.js\n[JOB] \u2139 My name is { YourName }\n[R/T] \u2714 Operation 1 complete in 0ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 366ms! \u2728\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-using-adaptor-helper-functions",children:"2. Using adaptor helper functions"}),"\n",(0,o.jsxs)(n.p,{children:["Adaptors are Javascript or Typescript modules that provide OpenFn users with a\nset of helper functions for simplifying communication with a specific external\nsystem. Learn more about adaptors here: ",(0,o.jsx)(n.a,{href:"/adaptors/",children:"docs.openfn.org/adaptors"})]}),"\n",(0,o.jsx)(n.h4,{id:"basic-usage",children:"Basic usage:"}),"\n",(0,o.jsxs)(n.p,{children:["Let\u2019s use\n",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/@openfn/language-http",children:"@openfn/language-http"}),"\nadaptor to fetch a list of forms from\n",(0,o.jsx)(n.a,{href:"https://jsonplaceholder.typicode.com/",children:"https://jsonplaceholder.typicode.com/"})]}),"\n",(0,o.jsxs)(n.admonition,{title:"Understanding CLI arguments",type:"info",children:[(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"-a"})," to specify the adaptor; use ",(0,o.jsx)(n.code,{children:"-i"})," to auto-install the necessary adaptor"]}),(0,o.jsxs)(n.p,{children:["Run ",(0,o.jsx)(n.code,{children:"openfn help"})," to see the full list of CLI arguments."]})]}),"\n",(0,o.jsx)(n.h4,{id:"tasks-1",children:"Tasks:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Create a file called ",(0,o.jsx)(n.code,{children:"getPosts.js"})," and write the following code"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:"title=getPosts.js",children:"get('https://jsonplaceholder.typicode.com/posts');\nfn(state => {\n  console.log(state.data[0]);\n  return state;\n});\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Run the job by running"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn getPosts.js -i -a http -o tmp/output.json\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Since it is our first time using the ",(0,o.jsx)(n.code,{children:"http"})," adaptor, we are installing the\nadaptor using ",(0,o.jsx)(n.code,{children:"-i"})," argument"]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"3. See expected CLI logs"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"  [CLI] \u2714 Installing packages...\n  [CLI] \u2714 Installed @openfn/language-http@4.2.8\n  [CLI] \u2714 Installation complete in 14.555s\n  [CLI] \u2714 Compiled from getPosts.js\n  [R/T] \u2666 Starting job job-1\n  GET request succeeded with 200 \u2713\n  [JOB] \u2139 {\n    userId: 1,\n    id: 1,\n    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n    body: 'quia et suscipit\\n' +\n      'suscipit recusandae consequuntur expedita et cum\\n' +\n      'reprehenderit molestiae ut ut quas totam\\n' +\n      'nostrum rerum est autem sunt rem eveniet architecto'\n  }\n  [R/T] \u2714 Completed job job-1 in 872ms\n  [CLI] \u2714 State written to tmp/output.json\n  [CLI] \u2714 Finished in 15.518s \u2728\n\n"})})]}),"\n",(0,o.jsx)(n.h4,{id:"-challenge-get-and-inspect-data-via-http",children:"\ud83c\udfc6 Challenge: Get and inspect data via HTTP"}),"\n",(0,o.jsxs)(n.p,{children:["Using the\n",(0,o.jsx)(n.a,{href:"https://jsonplaceholder.typicode.com/users",children:"https://jsonplaceholder.typicode.com/users"}),"\nAPI, get a list of users and print the first user object."]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Create file called ",(0,o.jsx)(n.code,{children:"getUsers.js"})," and write your operation to fetch the user."]}),"\n",(0,o.jsxs)(n.li,{children:["Run the job using the OpenFn/cli\n",(0,o.jsx)(n.code,{children:"openfn getUsers.js -a http -o tmp/output.json"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"Validate that you receive this expected CLI logs:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn getUsers.js -a http -o tmp/output.json\n"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"See expected CLI logs:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[CLI] \u2714 Compiled job from hello.js GET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 581ms\n[JOB] \u2139 {\n  id: 1,\n  name: 'Leanne Graham',\n  username: 'Bret',\n  email: 'Sincere@april.biz',\n  address: {\n    street: 'Kulas Light',\n    suite: 'Apt. 556',\n    city: 'Gwenborough',\n    zipcode: '92998-3874',\n    geo: { lat: '-37.3159', lng: '81.1496' }\n  },\n  phone: '1-770-736-8031 x56442',\n  website: 'hildegard.org',\n  company: {\n    name: 'Romaguera-Crona',\n    catchPhrase: 'Multi-layered client-server neural-net',\n    bs: 'harness real-time e-markets'\n  }\n}\n[R/T] \u2714 Operation 2 complete in 2ms\n[CLI] \u2714 Writing output to tmp/output.json [CLI] \u2714 Done in 950ms! \u2728\n"})})]}),"\n",(0,o.jsxs)(n.h3,{id:"3-understanding-state",children:["3. Understanding ",(0,o.jsx)(n.code,{children:"state"})]}),"\n",(0,o.jsxs)(n.p,{children:["If a job expression is a set of instructions for a chef (a recipe?) then the\ninitial state is all of the ingredients they need tied up in a perfect little\nbundle. See\n",(0,o.jsx)(n.a,{href:"/articles/2021/07/05/wrapping-my-head-around-jobs/#it-all-starts-with-state",children:'"It all starts with state\u200b"'}),"\nin the knowledge base for extra context."]}),"\n",(0,o.jsx)(n.p,{children:"It usually looks something like this"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "configuration": {\n    "hostUrl": "https://moh.kenya.gov.ke/dhis2",\n    "username": "someone",\n    "password": "something-secret"\n  },\n  "data": {\n    "type": "registration",\n    "patient": {\n      "age": 24,\n      "gender": "M",\n      "nationalId": "321cs7"\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h4,{id:"stateconfiguration",children:(0,o.jsx)(n.code,{children:"state.configuration"})}),"\n",(0,o.jsxs)(n.p,{children:["This key is where we put credentials which are used to authorize connections to\nany authenticated system that the job will interact with. (Note that this part\nof ",(0,o.jsx)(n.code,{children:"state"}),' is usually overwritten at runtime with a real "credential" when using\nthe OpenFn platform, rather than the CLI.)']}),"\n",(0,o.jsxs)(n.admonition,{title:"Important",type:"warning",children:[(0,o.jsxs)(n.p,{children:["Note that ",(0,o.jsx)(n.code,{children:"console.log(state)"})," will display the whole state, including\n",(0,o.jsx)(n.code,{children:"state.configuration"})," elements such as ",(0,o.jsx)(n.strong,{children:"username and password"}),". Remove this\nlog whenever you're done debugging to avoid accidentally exposing sensitive\ninformation when the job is successfully deployed on production."]}),(0,o.jsx)(n.p,{children:"The OpenFn platform has built in protections to \"scrub\" state from the logs, but\nwhen you're using the CLI directly you're on your own!"})]}),"\n",(0,o.jsx)(n.h4,{id:"statedata",children:(0,o.jsx)(n.code,{children:"state.data"})}),"\n",(0,o.jsx)(n.p,{children:"This key is where we put data related to a specific job run. On the platform,\nit's the work-order-specific data from a triggering HTTP request or some bit of\ninformation that's passed from one job to another."}),"\n",(0,o.jsxs)(n.p,{children:["Using CLI, ",(0,o.jsx)(n.code,{children:"state.json"})," will be loaded automatically from the current directory"]}),"\n",(0,o.jsx)(n.p,{children:"Or you can specify the path to the state file by passing the option -s,\n--state-path"}),"\n",(0,o.jsxs)(n.p,{children:["Specify a path to your ",(0,o.jsx)(n.code,{children:"state.json"})," file with this command:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn hello.js -a http -s tmp/state.json -o tmp/output.json\n"})}),"\n",(0,o.jsx)(n.p,{children:"Expected CLI logs"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[CLI] \u2714 Compiled job from hello.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 876ms\n[R/T] \u2714 Operation 2 complete in 0ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 1.222s! \u2728\n"})}),"\n",(0,o.jsx)(n.h4,{id:"how-can-we-use-state",children:"How can we use state?"}),"\n",(0,o.jsxs)(n.p,{children:["Each adaptor has a configuration schema that's recommended for use in your\n",(0,o.jsx)(n.code,{children:"state.json"}),". ",(0,o.jsx)(n.a,{href:"/adaptors/packages/http-configuration-schema",children:"Here is an example"}),"\nof how to set up ",(0,o.jsx)(n.code,{children:"state.configuration"})," for ",(0,o.jsx)(n.code,{children:"language-http"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "username": "name@email",\n  "password": "supersecret",\n  "baseUrl": "https://jsonplaceholder.typicode.com"\n}\n'})}),"\n",(0,o.jsx)(n.h4,{id:"tasks-2",children:"Tasks:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Update your ",(0,o.jsx)(n.code,{children:"state.json"})," to look like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:"title=state.json",children:'{\n  "configuration": {\n    "baseUrl": "https://jsonplaceholder.typicode.com"\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Since we have update our configuration in our ",(0,o.jsx)(n.code,{children:"state.json"})," we can now use\n",(0,o.jsx)(n.code,{children:"get()"})," helper function without the need to specify the ",(0,o.jsx)(n.strong,{children:"baseUrl"}),"\u2014i.e\n",(0,o.jsx)(n.code,{children:"get('posts')"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Update your ",(0,o.jsx)(n.code,{children:"getPosts.js"})," job to look like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="getPosts.js"',children:"// Get all posts\nget('posts');\n\nfn(state => {\n  const posts = state.data;\n  console.log(posts[0]);\n  return state;\n});\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Now run the job using the following command"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn getPosts.js -a http -s tmp/state.json -o tmp/output.json\n"})}),"\n",(0,o.jsx)(n.p,{children:"And validate that you see the expected CLI logs:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[CLI] \u2714 Compiled job from getPosts.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 120ms\n[JOB] \u2139 {\n userId: 1,\n id: 1,\n title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n body: 'quia et suscipit\\n' +\n   'suscipit recusandae consequuntur expedita et cum\\n' +\n   'reprehenderit molestiae ut ut quas totam\\n' +\n   'nostrum rerum est autem sunt rem eveniet architecto'\n}\n[R/T] \u2714 Operation 2 complete in 0ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 470ms! \u2728\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"-challenge-fetch-covid-19-metadata",children:"\ud83c\udfc6 Challenge: Fetch Covid-19 metadata"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Using the\n",(0,o.jsx)(n.a,{href:"https://covidtracking.com/data/api",children:"The Atlantic's COVID Tracking Project API"}),".,\nwrite an operation that returns all covid-19 metadata."]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"https://api.covidtracking.com"})," as your ",(0,o.jsx)(n.strong,{children:"baseUrl"})," in ",(0,o.jsx)(n.code,{children:"state.configuration"})]})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Validate your output: there are a lot of ways you might choose to format or\ndisplay this data. Share your results with your administrator for feedback."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"4-additional-arguments-and-commands",children:"4. Additional arguments and commands"}),"\n",(0,o.jsx)(n.h4,{id:"-challenge-practice-cli-arguments-and-commands",children:"\ud83c\udfc6 Challenge: Practice CLI arguments and commands"}),"\n",(0,o.jsx)(n.p,{children:"Perform these tasks and submit answers to the discussion questions to your\nadministrator for feedback."}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Compile a openfn job (",(0,o.jsx)(n.strong,{children:"hello.js"}),")."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"What's the difference between the job you wrote and the compiled job?"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Run a job with the log level set to ",(0,o.jsx)(n.code,{children:"none"}),", and then run it again with the\nlog level set to ",(0,o.jsx)(n.code,{children:"debug"}),"."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"When is it appropriate to use these different log levels?"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"5-manipulating-data-in-a-sequence-of-operations",children:"5. Manipulating data in a sequence of operations"}),"\n",(0,o.jsxs)(n.p,{children:["In most cases you need to manipulate, clean, or transform data at some step in\nyour workflow. For example after we get data from the\n",(0,o.jsx)(n.code,{children:"https://jsonplaceholder.typicode.com"})," registry we might need to group the posts\nby user id. The example below shows how we can:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["get all posts and return them in ",(0,o.jsx)(n.code,{children:"state.data"})]}),"\n",(0,o.jsxs)(n.li,{children:["group returned posts by ",(0,o.jsx)(n.code,{children:"userId"})]}),"\n",(0,o.jsx)(n.li,{children:"log posts with userId 1"}),"\n"]}),"\n",(0,o.jsx)(n.h5,{id:"example",children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="getPosts.js"',children:"// Get all posts\nget('posts');\n\n// Group posts by user id\nfn(state => {\n  const posts = state.data;\n\n  // Group posts by userId\n  const groupPostsByUserId = posts.reduce((acc, post) => {\n    const existingValue = acc[post.userId] || [];\n    return { ...acc, [post.userId]: [...existingValue, post] };\n  }, {});\n\n  // console.log(groupPostsByUserId);\n  return { ...state, groupPostsByUserId };\n});\n\n// Log posts where userId = 1\nfn(state => {\n  const { groupPostsByUserId } = state;\n  console.log('Post with userId 1', groupPostsByUserId[1]);\n  return state;\n});\n"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsxs)("summary",{children:["What is ",(0,o.jsx)("code",{children:"array.reduce"}),"?"]}),"\nThe ",(0,o.jsx)("code",{children:"reduce()"})," method applies a function against an accumulator and\neach value of the array (from left-to-right) to reduce it to a single value."]}),(0,o.jsxs)(n.p,{children:["Perhaps the easiest-to-understand case for ",(0,o.jsx)("code",{children:"reduce()"})," is to return\nthe sum of all the elements in an array:"]}),(0,o.jsxs)(n.h5,{id:"javascript-demo-arrayreduce",children:["JavaScript Demo: ",(0,o.jsx)(n.code,{children:"Array.reduce()"})]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"const array1 = [1, 2, 3, 4];\n\n// 0 + 1 + 2 + 3 + 4\nconst initialValue = 0;\nconst sumWithInitial = array1.reduce(\n  (accumulator, currentValue) => accumulator + currentValue,\n  initialValue\n);\n\nconsole.log(sumWithInitial);\n// Expected output: 10\n\n"})}),(0,o.jsxs)(n.p,{children:["You can learn more about ",(0,o.jsx)(n.code,{children:"array.reduce"})," from\n",(0,o.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce",children:"this article"})]})]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Expected CLI logs"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[CLI] \u2714 Compiled job from getPosts.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 825ms\n[R/T] \u2714 Operation 2 complete in 0ms\n[JOB] \u2139 Post with userId 1 [\n //All of posts for userId 1\n]\n[R/T] \u2714 Operation 3 complete in 12ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 1.239s! \u2728\n"})}),"\n",(0,o.jsx)(n.h4,{id:"-challenge-extract-names--emails",children:"\ud83c\udfc6 Challenge: extract names & emails"}),"\n",(0,o.jsxs)(n.p,{children:["Using\n",(0,o.jsx)(n.a,{href:"https://jsonplaceholder.typicode.com/posts/1/comments",children:"https://jsonplaceholder.typicode.com/posts/1/comments"}),"\nAPI fetch comments for post with id 1 and extract name and email from each\ncomment in that post"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Get post all comments for post id 1"}),"\n",(0,o.jsx)(n.li,{children:"Extract name and email from comments"}),"\n",(0,o.jsx)(n.li,{children:"Log the extracted data from comments"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Discuss the results with your administrator."}),"\n",(0,o.jsx)(n.h3,{id:"6-debugging-errors",children:"6. Debugging errors"}),"\n",(0,o.jsx)(n.p,{children:"When debugging, it\u2019s interesting to use log to have a visual representation of\nthe content of the manipulated objects (such as state)."}),"\n",(0,o.jsxs)(n.p,{children:["When you want to inspect the content of state in between operations, add an\n",(0,o.jsx)(n.code,{children:"fn()"})," block with a ",(0,o.jsx)(n.code,{children:"console.log"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// firstOperation(...);\n\nfn(state => {\n  console.log(state);\n  return state;\n});\n\n// secondOperation(...);\n"})}),"\n",(0,o.jsxs)(n.h5,{id:"create-debugjs-and-paste-the-code-below",children:["Create ",(0,o.jsx)(n.strong,{children:"debug.js"})," and paste the code below"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:'title="debug.js"',children:"// Get all posts\nget('posts');\n\n// Get post by index helper function\nfn(state => {\n  // const getPostbyIndex = (index) => dataValue(index)(state);\n  console.log(dataValue(1));\n\n  return { ...state };\n});\n"})}),"\n",(0,o.jsxs)(n.h5,{id:"run-openfn-debugjs--a-http",children:["Run ",(0,o.jsx)(n.strong,{children:"openfn debug.js -a http"})]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Expected CLI logs"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[CLI] \u2718 TypeError: path.match is not a function\n    at dataPath (/tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:258:26)\n    at dataValue (/tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:262:22)\n    at getPostbyIndex (vm:module(0):5:37)\n    at vm:module(0):18:36\n    at /tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:241:12\n    at file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/node_modules/@openfn/runtime/dist/index.js:288:26\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async run (file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/node_modules/@openfn/runtime/dist/index.js:269:18)\n    at async executeHandler (file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/dist/process/runner.js:388:20)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["As you can see from our logs that helper function ",(0,o.jsx)(n.code,{children:"dataValue"})," has a TypeError,\nTo troubleshoot this you can go to the documentation for **dataValue ->\n",(0,o.jsx)(n.a,{href:"/adaptors/packages/common-docs/#datavaluepath--operation",children:"docs.openfn.org/adaptors/packages/common-docs/#datavaluepath--operation"}),"\n**"]}),"\n",(0,o.jsxs)(n.p,{children:["According to the docs, dataValue take path which is a string type. But in our\noperation we were passing an integer, that\u2019s why we have a ",(0,o.jsx)(n.em,{children:"TypeError"}),". You can\nfix the error by passing a string in dataValue i.e ",(0,o.jsx)(n.code,{children:"console.log(dataValue(\u201c1\u201d))"})]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Expected CLI logs"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[CLI] \u2714 Compiled job from debug.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 722ms\n[JOB] \u2139 [Function (anonymous)]\n[R/T] \u2714 Operation 2 complete in 1ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 1.102s \u2728\n"})}),"\n",(0,o.jsx)(n.p,{children:"If you need more information for debugging you can pass -l debug which will give\nall information about the run"}),"\n",(0,o.jsxs)(n.p,{children:["i.e ",(0,o.jsx)(n.code,{children:"openfn debug.js -a http -l debug"})]}),"\n",(0,o.jsx)(n.h4,{id:"-challenge-control-error-messages",children:"\ud83c\udfc6 Challenge: control error messages"}),"\n",(0,o.jsx)(n.p,{children:"Debug what is causing an error on the following line of code and display the\nerror message"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Get post where id is 180\nget('posts/180');\n"})}),"\n",(0,o.jsx)(n.p,{children:"Discuss the results with your administrator."}),"\n",(0,o.jsx)(n.h3,{id:"7-each-and-array-iteration",children:"7. Each and array iteration"}),"\n",(0,o.jsx)(n.p,{children:"We often have to perform the same operation multiple times for items in an\narray. Most of the helper functions for data manipulation are inherited from\n@openfn/language-common and are available in most of the adaptors."}),"\n",(0,o.jsx)(n.h5,{id:"modify-getpostsjs-to-group-posts-by-user-id",children:"Modify getPosts.js to group posts by user-ID"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="getPosts.js"',children:"// Get all posts\nget('posts');\n\n// Group posts by user\nfn(state => {\n  const posts = state.data;\n\n  // Group posts by userId\n  const groupPostsByUserId = posts.reduce((acc, post) => {\n    const existingValue = acc[post.userId] || [];\n    return { ...acc, [post.userId]: [...existingValue, post] };\n  }, {});\n\n  // console.log(groupPostsByUserId);\n  return { ...state, groupPostsByUserId };\n});\n\n// Log posts where userId = 1\nfn(state => {\n  const { groupPostsByUserId } = state;\n  const posts = groupPostsByUserId[1];\n\n  // console.log(\"Post with userId 1\", groupPostsByUserId[1]);\n  return { ...state, posts };\n});\n\neach('posts[*]', state => {\n  console.log('Post', JSON.stringify(state.data, null, 2));\n  return state;\n});\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Notice how this code uses the ",(0,o.jsx)(n.code,{children:"each"})," function, a helper function defined in\n",(0,o.jsx)(n.a,{href:"/adaptors/packages/common-docs/#eachdatasource-operation--operation",children:"language-common"}),"\nbut accessed from this job that is using language-http. Most adaptors import and\nexport many functions from ",(0,o.jsx)(n.code,{children:"language-common"}),"."]}),"\n",(0,o.jsxs)(n.h5,{id:"run-openfn-getpostsjs--a-http--o-tmpoutputjson",children:["Run ",(0,o.jsx)(n.strong,{children:"openfn getPosts.js -a http -o tmp/output.json"})]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Expected CLI logs"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"[CLI] \u2714 Compiled job from getPosts.js\nGET request succeeded with 200 \u2713\n[R/T] \u2714 Operation 1 complete in 730ms\n[R/T] \u2714 Operation 2 complete in 0ms\n[R/T] \u2714 Operation 3 complete in 0ms\n[JOB] \u2139 Posts [\n// Posts\n]\n[R/T] \u2714 Operation 4 complete in 10ms\n[CLI] \u2714 Writing output to tmp/output.json\n[CLI] \u2714 Done in 1.091s! \u2728\n"})}),"\n",(0,o.jsx)(n.h4,{id:"-challenge-reduce-filter-and-map",children:"\ud83c\udfc6 Challenge: Reduce, filter, and map"}),"\n",(0,o.jsxs)(n.p,{children:["Using Javascript globals i.e ",(0,o.jsx)(n.code,{children:"Array.reduce"}),", ",(0,o.jsx)(n.code,{children:"Array.filter"})," or ",(0,o.jsx)(n.code,{children:"Array.map"}),",\nbuild function that will get posts by user id."]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Create a file called job1.js"}),"\n",(0,o.jsx)(n.li,{children:"Add the 1st operation which is get all posts"}),"\n",(0,o.jsx)(n.li,{children:"Add 2nd operation which has a function that filter posts by id"}),"\n",(0,o.jsx)(n.li,{children:"Use the function from 2nd operation to get all post for user id 1"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Discuss the results with your administrator."}),"\n",(0,o.jsx)(n.h3,{id:"8-running-workflows",children:"8. Running Workflows"}),"\n",(0,o.jsxs)(n.p,{children:["As of ",(0,o.jsx)(n.code,{children:"v0.0.35"})," the ",(0,o.jsx)(n.code,{children:"@openfn/cli"})," supports running not only jobs, but also\n",(0,o.jsx)(n.em,{children:"workflows"}),". Running a workflow allows you to define a list of jobs and rules\nfor executing them. You can use a workflow to orchestrate the flow of data\nbetween systems in a structured and automated way."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.em,{children:["For example, if you have two jobs in your workflow (GET users from system A &\nPOST users to system B), you can set up your workflow to run all jobs in\nsequence from start to finish. This imitates the\n",(0,o.jsx)(n.a,{href:"/documentation/legacy/build/triggers#flow-triggers",children:"flow trigger patterns"})," on the OpenFn\nplatform where a second job should run after the first one succeeds,\nrespectively, using the data returned from the first job. \u201c"]})}),"\n",(0,o.jsx)(n.admonition,{title:"tl;dr",type:"info",children:(0,o.jsx)(n.p,{children:"You won't have to assemble the initial state of the next job, the final state of\nthe upstream job will automatically be passed down to the downstream job as the\ninitial state."})}),"\n",(0,o.jsx)(n.h5,{id:"workflow",children:"Workflow"}),"\n",(0,o.jsx)(n.p,{children:"A workflow is the execution plan for running several jobs in a sequence. It is\ndefined as a JSON object that consists of the following properties:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"start"})," (optional): The ID of the job that should be executed first (defaults\nto jobs[0])."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"jobs"})," (required): An array of job objects, each of which represents a\nspecific task to be executed.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"id"})," (required): A job name that is unique to the workflow and helps you ID\nyour job."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"configuration"}),": (optional) Specifies the configuration file associated with\nthe job."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"data"})," (optional): A JSON object that contains the pre-populated data."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"adaptor"})," (required): Specifies the adaptor used for the job (version\noptional)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"expression"})," (required): Specifies the JavaScript file associated with the\njob. It can also be a string that contains a JavaScript function to be\nexecuted as the job."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"next"})," (optional): An object that specifies which jobs to call next. All\nedges returning true will run. The object should have one or more key-value\npairs, where the key is the ID of the next job, and the value is a boolean\nexpression that determines whether the next job should be executed.If there\nare no next edges, the workflow will end."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h6,{id:"example-of-a-workflow",children:"Example of a workflow"}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Here's an example of a simple workflow that consists of three jobs:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="workflow.json"',children:'{\n  "start": "getPatients",\n  "jobs": [\n    {\n      "id": "getPatients",\n      "adaptor": "http",\n      "expression": "getPatients.js",\n      "configuration": "tmp/http-creds.json",\n      "next": {\n        "getGlobalOrgUnits": true\n      }\n    },\n    {\n      "id": "getGlobalOrgUnits",\n      "adaptor": "common",\n      "expression": "getGlobalOrgUnits.js",\n      "next": {\n        "createTEIs": true\n      }\n    },\n    {\n      "id": "createTEIs",\n      "adaptor": "dhis2",\n      "expression": "createTEIs.js",\n      "configuration": "tmp/dhis2-creds.json"\n    }\n  ]\n}\n'})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"tmp/http-creds.json"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="tmp/http-creds.json"',children:'{\n  "baseUrl": "https://jsonplaceholder.typicode.com/"\n}\n'})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"tmp/dhis2-creds.json"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="tmp/dhis2-creds.json"',children:'{\n  "hostUrl": "https://play.dhis2.org/2.39.1.2",\n  "password": "district",\n  "username": "admin"\n}\n'})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"getPatients.js"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="getPatients.js"',children:"// Get users from jsonplaceholder\nget('users');\n\n// Prepare new users as new patients\nfn(state => {\n  const newPatients = state.data;\n  return { ...state, newPatients };\n});\n"})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"getGlobalOrgUnits.js"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="getGlobalOrgUnits.js"',children:"// Globals: orgUnits\nfn(state => {\n  const globalOrgUnits = [\n    {\n      label: 'Njandama MCHP',\n      id: 'g8upMTyEZGZ',\n      source: 'Gwenborough',\n    },\n    {\n      label: 'Njandama MCHP',\n      id: 'g8upMTyEZGZ',\n      source: 'Wisokyburgh',\n    },\n    {\n      label: 'Njandama MCHP',\n      id: 'g8upMTyEZGZ',\n      source: 'McKenziehaven',\n    },\n    {\n      label: 'Njandama MCHP',\n      id: 'g8upMTyEZGZ',\n      source: 'South Elvis',\n    },\n    {\n      label: 'Ngelehun CHC',\n      id: 'IpHINAT79UW',\n      source: 'Roscoeview',\n    },\n    {\n      label: 'Ngelehun CHC',\n      id: 'IpHINAT79UW',\n      source: 'South Christy',\n    },\n    {\n      label: 'Ngelehun CHC',\n      id: 'IpHINAT79UW',\n      source: 'Howemouth',\n    },\n    {\n      label: 'Ngelehun CHC',\n      id: 'IpHINAT79UW',\n      source: 'Aliyaview',\n    },\n    {\n      label: 'Baoma Station CHP',\n      id: 'jNb63DIHuwU',\n      source: 'Bartholomebury',\n    },\n    {\n      label: 'Baoma Station CHP',\n      id: 'jNb63DIHuwU',\n      source: 'Lebsackbury',\n    },\n  ];\n\n  return { ...state, globalOrgUnits };\n});\n"})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"createTEIs.js"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="createTEIs.js"',children:"fn(state => {\n  const { newPatients, globalOrgUnits } = state;\n\n  const getOrgUnit = city =>\n    globalOrgUnits.find(orgUnit => orgUnit.source === city).id;\n\n  const mappedEntities = newPatients.map(patient => {\n    const [firstName = 'Patient', lastName = 'Test'] = (\n      patient.name || ''\n    ).split(' ');\n\n    const orgUnit = getOrgUnit(patient.address.city);\n\n    const attributes = [\n      { attribute: 'w75KJ2mc4zz', value: firstName },\n      { attribute: 'zDhUuAYrxNC', value: lastName },\n      { attribute: 'cejWyOfXge6', value: 'Male' },\n    ];\n\n    return { ...patient, attributes: attributes, orgUnit: orgUnit };\n  });\n\n  return { ...state, mappedEntities };\n});\n\neach(\n  'mappedEntities[*]',\n  create('trackedEntityInstances', {\n    orgUnit: dataValue('orgUnit'),\n    trackedEntityType: 'nEenWmSyUEp',\n    attributes: dataValue('attributes'),\n  })\n);\n"})})]}),"\n",(0,o.jsxs)(n.p,{children:["Run ",(0,o.jsx)(n.code,{children:"openfn [path/to/workflow.json]"})," to execute the workflow."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:(0,o.jsxs)(n.p,{children:["For example if you created ",(0,o.jsx)("code",{children:"workflow.json"})," in the root of your project directory, This is how your project will look like"]})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"    devchallenge\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 getPatients.js\n    \u251c\u2500\u2500 createTEIs.js\n    \u251c\u2500\u2500 getGlobalOrgUnits.js\n    \u251c\u2500\u2500 workflow.json\n    \u2514\u2500\u2500 tmp\n        \u251c\u2500\u2500 http-creds.json\n        \u251c\u2500\u2500 dhis2-creds.json\n        \u2514\u2500\u2500 output.json\n"})})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn workflow.json -o tmp/output.json\n"})}),"\n",(0,o.jsxs)(n.p,{children:["On execution, this workflow will first run the ",(0,o.jsx)(n.code,{children:"getPatients.js"})," job. If is\nsuccessful, ",(0,o.jsx)(n.code,{children:"getGlobalOrgUnits.js"})," will run using the final state of\n",(0,o.jsx)(n.code,{children:"getPatients.js"}),". If ",(0,o.jsx)(n.code,{children:"getGlobalOrgUnits.js"})," is successful, ",(0,o.jsx)(n.code,{children:"createTEIs.js"})," will\nrun using the final state of ",(0,o.jsx)(n.code,{children:"getGlobalOrgUnits.js"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Note that without the ",(0,o.jsx)(n.code,{children:"-i"})," flag, you'll need to already have your adaptor\ninstalled. To execute the workflow with the adaptor autoinstall option run this\ncommand:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn workflow.json -i -o tmp/output.json\n"})}),"\n",(0,o.jsx)(n.p,{children:"On execution, this workflow will first auto-install the adaptors then run the\nworkflow"}),"\n",(0,o.jsxs)(n.admonition,{title:"Important",type:"danger",children:[(0,o.jsxs)(n.p,{children:["When working with the ",(0,o.jsx)(n.code,{children:"workflow.json"})," file, it is important to handle sensitive\ninformation, such as credentials and initial input data, in a secure manner. To\nensure the protection of your sensitive data, please follow the guidelines\noutlined below:"]}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Configuration Key: In the ",(0,o.jsx)(n.code,{children:"workflow.json"})," file, specify a path to a git\nignored configuration file that will contain necessary credentials that will\nbe used to access the destination system. For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n   ...\n   "configuration": "tmp/openMRS-credentials.json"\n },\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Data Key: Incase you need to pass initial data to your job, specify a path to\na gitignored data file"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n...\n "data": "tmp/initial-data.json",\n}\n'})}),"\n"]}),"\n"]})]}),"\n",(0,o.jsx)(n.h2,{id:"cli-usage---key-commands",children:"CLI Usage - Key Commands"}),"\n",(0,o.jsx)(n.p,{children:"You\u2019ll learn about these commands in the following challenges, but please refer\nto this section for the key commands used in working with the CLI."}),"\n",(0,o.jsx)(n.h3,{id:"check-the-version",children:"Check the version"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn version\n"})}),"\n",(0,o.jsx)(n.h3,{id:"get-help",children:"Get help"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn help\n"})}),"\n",(0,o.jsx)(n.h3,{id:"run-a-job",children:"Run a job"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn path/to/job.js -ia {adaptor-name}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Note: You MUST specify which adaptor to use. Pass the ",(0,o.jsx)(n.code,{children:"-i"})," flag to auto-install\nthat adaptor (it's safe to do this redundantly)."]}),"\n",(0,o.jsxs)(n.p,{children:["You can find the list of publicly available adaptors ",(0,o.jsx)(n.a,{href:"/adaptors",children:"here"}),"."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Path is the job to load the job from (a .js file or a dir containing a job.js\nfile) For example ",(0,o.jsx)(n.code,{children:"openfn execute hello.js "})," Reads hello.js, looks for state\nand output in foo"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"-i, --autoinstall Auto-install the language adaptor\n-a, --adaptors, --adaptor A language adaptor to use for the job\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If an adaptor is already installed by auto install, you can use the command\nwithout the ",(0,o.jsx)(n.code,{children:"-i"})," options. i.e ",(0,o.jsx)(n.code,{children:"openfn hello.js -a http"})]}),"\n",(0,o.jsx)(n.h3,{id:"change-log-level",children:"Change log level"}),"\n",(0,o.jsxs)(n.p,{children:["You can pass ",(0,o.jsx)(n.code,{children:"-l info"})," or ",(0,o.jsx)(n.code,{children:"--log info"})," to get more feedback about what's\nhappening, or ",(0,o.jsx)(n.code,{children:"--log debug"})," for more details than you could ever use. Below is\nthe list of different log levels"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn hello.js -a http -l none\n"})}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"log level"}),(0,o.jsx)(n.th,{children:"description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"-l none"})}),(0,o.jsx)(n.td,{children:"Quiet mode"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"-l default"})}),(0,o.jsx)(n.td,{children:"Top level information of what is happening"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"-l info"})}),(0,o.jsx)(n.td,{children:"Get more feedback on what is happening openfn"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"-l debug"})}),(0,o.jsx)(n.td,{children:"Get information about runtime, cli, compiler and the job"})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"compilation",children:"Compilation"}),"\n",(0,o.jsx)(n.p,{children:"The CLI will attempt to compile your job code into normalized Javascript. It\nwill do a number of things to make your code robust, portable, and easier to\ndebug from a pure JS perspective."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"openfn compile [path]\n"})}),"\n",(0,o.jsx)(n.p,{children:"Will compile the openfn job and print or save the resulting js."}),"\n",(0,o.jsxs)(n.p,{children:["Learn more about CLI\n",(0,o.jsx)(n.a,{href:"https://github.com/OpenFn/kit/tree/main/packages/cli",children:"github.com/OpenFn/kit/"})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);