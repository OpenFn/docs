"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[13131],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(96540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},90619:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"packages/fhir-ndr-et-readme","title":"fhir-ndr-et developer readme","description":"Source//github.com/OpenFn/adaptors/tree/main/packages/fhir-ndr-et","source":"@site/adaptors/packages/fhir-ndr-et-readme.md","sourceDirName":"packages","slug":"/packages/fhir-ndr-et-readme","permalink":"/adaptors/packages/fhir-ndr-et-readme","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"fhir-ndr-et developer readme","id":"fhir-ndr-et-readme","keywords":["adaptor","readme","fhir-ndr-et"]},"sidebar":"adaptors","previous":{"title":"Changelog","permalink":"/adaptors/packages/fhir-ndr-et-changelog"},"next":{"title":"Functions","permalink":"/adaptors/packages/ghana-bdr-docs"}}');var s=t(74848),r=t(28453);const o={title:"fhir-ndr-et developer readme",id:"fhir-ndr-et-readme",keywords:["adaptor","readme","fhir-ndr-et"]},a="fhir-ndr-et Adaptor developer README.md",d={},c=[{value:"Documentation",id:"documentation",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Building",id:"building",level:2},{value:"How to use",id:"how-to-use",level:2},{value:"Code Generation",id:"code-generation",level:2},{value:"Development",id:"development",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"fhir-ndr-et-adaptor-developer-readmemd",children:"fhir-ndr-et Adaptor developer README.md"})}),"\n",(0,s.jsxs)(n.p,{children:["Source: ",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/adaptors/tree/main/packages/fhir-ndr-et",children:"https://github.com/OpenFn/adaptors/tree/main/packages/fhir-ndr-et"})]}),"\n",(0,s.jsxs)(n.h1,{id:"language-fhir-ndr-et-",children:["language-fhir-ndr-et ",(0,s.jsx)("img",{src:"./assets/square.png",width:"30",height:"30"})]}),"\n",(0,s.jsxs)(n.p,{children:["An OpenFn ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"adaptor"})})," for building integration jobs for use with the FHIR API\nfor NDR Ethopia."]}),"\n",(0,s.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,s.jsxs)(n.p,{children:["This adaptor is largely auto-generated from the spec at\n",(0,s.jsx)(n.a,{href:"https://build.fhir.org/ig/jembi/ethiopia-hiv/branches/master/definitions.json.zip",children:"https://build.fhir.org/ig/jembi/ethiopia-hiv/branches/master/definitions.json.zip"}),".\nSee below for more details about that."]}),"\n",(0,s.jsxs)(n.p,{children:["We ",(0,s.jsx)(n.strong,{children:"strongly"})," recommend not editing generated source files by hand! Better to\nupdate the spec, mappings, or code generation rules. Otherwise your changes will\nbe lost."]}),"\n",(0,s.jsx)(n.p,{children:"Unlike most adaptors, types are checked-in (because they are largely\nautogenerated). A custom dts build is used."}),"\n",(0,s.jsxs)(n.p,{children:["View the ",(0,s.jsx)(n.a,{href:"https://docs.openfn.org/adaptors/packages/fhir-ndr-et-docs",children:"docs site"}),"\nfor full technical documentation."]}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["View the\n",(0,s.jsx)(n.a,{href:"https://docs.openfn.org/adaptors/packages/fhir-ndr-et-configuration-schema/",children:"configuration-schema"}),"\nfor required and optional ",(0,s.jsx)(n.code,{children:"configuration"})," properties."]}),"\n",(0,s.jsx)(n.h2,{id:"building",children:"Building"}),"\n",(0,s.jsxs)(n.p,{children:["To generate the adaptor source, run ",(0,s.jsx)(n.code,{children:"pnpm build:src"}),". This will generate the\nbuilder functions and typings, but not generate all the other adaptor stuff,\nlike docs and dist."]}),"\n",(0,s.jsx)(n.p,{children:"The source is NOT rebuilt in CI or during a general repo build (because a change\nto the remote spec can result in a diff in the source, and a diff in the source\ncreates problems all over)"}),"\n",(0,s.jsxs)(n.p,{children:["The standard ",(0,s.jsx)(n.code,{children:"pnpm build"})," will generate docs and typedefs and stuff, but NOT the\nsource."]}),"\n",(0,s.jsxs)(n.p,{children:["So locally, run ",(0,s.jsx)(n.code,{children:"pnpm build:src"})," to rebuild the adaptor code."]}),"\n",(0,s.jsxs)(n.p,{children:['The first time the source build runs, a new "spec" file will be downloaded. To\nforce a new download (ie to update the spec) delete ',(0,s.jsx)(n.code,{children:"./spec/spec.json"})]}),"\n",(0,s.jsx)(n.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,s.jsx)(n.p,{children:"This adaptor provides a bunch of helper functions to create FHIR resources in\nthe right structure."}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"builders.*"})," (or ",(0,s.jsx)(n.code,{children:"b.*"})," for short) namespace to create resource types, like\nthis:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"fn(() => {\n  const encounter = builders.encounter('target-facility-encounter', {\n    id,\n    /* add props as needed */\n  });\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["All supported resource types have a main function on the ",(0,s.jsx)(n.code,{children:"builders"})," object. The\nfirst argument is the profile id for that resource, the second is JSON data to\ndefine the resource."]}),"\n",(0,s.jsxs)(n.p,{children:["Code assist is available in Lightning for profile ids - just hit ctrl + space to\nbring up the list. It's also available in VSC (see the\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/adaptors/wiki/How-to-get-code-assist-for-adaptors-in-VSC",children:"Wiki article"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"The json object is designed to be smart and do stuff like generate references\nautomatically, or map typed keys like effective -> effectiveDateTime."}),"\n",(0,s.jsx)(n.p,{children:"Typescript and documentation should help here although work is needed on this\nstuff. The design is to give it a sensible value and trust it to do the right\nthing."}),"\n",(0,s.jsx)(n.p,{children:"See Resources.tests.js for some examples of creating the supported resources\nfrom inputs."}),"\n",(0,s.jsx)(n.p,{children:"As well as the builders, the adaptor also exports util functions to make it a\nbit easier to create references, codeableconcepts, codings and so on."}),"\n",(0,s.jsx)(n.p,{children:"So you can do stuff like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fn(() => {\n  const encounter = builders.encounter('target-facility-encounter', {\n    id,\n    subject: util.reference('some-resource-id'),\n    class: util.coding([value, system]),\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"code-generation",children:"Code Generation"}),"\n",(0,s.jsxs)(n.p,{children:["A number of files in ",(0,s.jsx)(n.code,{children:"src"})," are auto-generated (you can tell because they have a\nnice clear comment up at the top)."]}),"\n",(0,s.jsxs)(n.p,{children:["The build logic is all handled in the ",(0,s.jsx)(n.code,{children:"build/"})," folder."]}),"\n",(0,s.jsx)(n.p,{children:"Here is roughly how the code generation works."}),"\n",(0,s.jsx)(n.p,{children:"The objective is to read in the snapshot definition of all the fhir resources in\nthe destination system, and for each resource type that we're interested in,\ngenerate a) an easy-to-use builder function and b) a list of typescript\ndefinitions to match it."}),"\n",(0,s.jsxs)(n.p,{children:["First, we check to see whether ",(0,s.jsx)(n.code,{children:"./spec/spec.json"})," exists if it does not,\ndownload it!"]}),"\n",(0,s.jsx)(n.p,{children:"Then we load this spec.json into memory. It's a large complex file so we break\nit down into a simpler JSON representation which we call a schema."}),"\n",(0,s.jsx)(n.p,{children:"The schema contains a simple expression of rules that our builder function will\nneed to apply. It looks a bit like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "id": "arv-regimen-medication",\n  "type": "Medication",\n  "url": "http://moh.gov.et/fhir/hiv/StructureDefinition/arv-regimen-medication",\n  "props": {\n    "id": {\n      "type": "string",\n      "isArray": false,\n      "desc": "Logical id of this artifact",\n      "isComposite": false,\n      "defaults": {}\n    }\n    // ...\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This tells us for exaple that an arv-regimen-medication has a property called\n",(0,s.jsx)(n.code,{children:"id"}),", which is a type string. So our builder function will need to handle that."]}),"\n",(0,s.jsxs)(n.p,{children:["We only generate a simple schema for the resource types we're interested in.\nThat's controlled by a file called ",(0,s.jsx)(n.code,{children:"./build/mappings.ts"}),". The mappings has two\njobs:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Specific which resource types to generate builder functions for"}),"\n",(0,s.jsx)(n.li,{children:"Provide manual override rules for those builders. This lets us provide\nspecial mappings on keys for example, or provide defaults if the schema is\nmissing some information."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"So now we've generated simple schema objects for the resource types we're\ninterested in."}),"\n",(0,s.jsxs)(n.p,{children:["Next we generate the builder functions. We use a library call ",(0,s.jsx)(n.code,{children:"ast-types"})," to\nhelp us do this. Mostly we build an AST tree directly - that is, we\nprogrammatically define the structure of the code using a neat API. And from\nthis structure we generate code strings with nice formatting."]}),"\n",(0,s.jsx)(n.p,{children:"This keeps our code generation nice and robust. The API ensures that the\ngenerated code is syntactically valid, and throws errors if we ask it do do\nsomething illegal - like nest a statement inside the condition of an\nif-statement. If we were generating strings directly, we'd have to be very\ncareful about things like typos and couldn't apply smart transformations to the\ncode."}),"\n",(0,s.jsxs)(n.p,{children:["Using the schema information and mapping overrides, we generate code statements\nto take the input data passed as the second argument, and apply it smartly to a\nnew FHIR resource, which we finally return. We lean heavily on the util\nfunctions in ",(0,s.jsx)(n.code,{children:"src/utils.js"})," to simplify this."]}),"\n",(0,s.jsx)(n.p,{children:"Once we've got our code, we have to generate matching TypeScript definitions for\neach builder. This ensures that we get code assist and intellisense on our\ngenerated functions, making the builders much safer and easier to use."}),"\n",(0,s.jsxs)(n.p,{children:["We use the TypeScript compiler to do this, just like how we use ",(0,s.jsx)(n.code,{children:"ast-types"})," to\ngenerate the code (although it has to be said that the TypeScript compiler has a\nway less nice API)."]}),"\n",(0,s.jsxs)(n.p,{children:["Once finished, generated files are written into ",(0,s.jsx)(n.code,{children:"src/"}),", where they can be\ntested."]}),"\n",(0,s.jsx)(n.h2,{id:"development",children:"Development"}),"\n",(0,s.jsxs)(n.p,{children:["Clone the ",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/adaptors",children:"adaptors monorepo"}),'. Follow the\n"Getting Started" guide inside to get set up.']}),"\n",(0,s.jsxs)(n.p,{children:["Run tests using ",(0,s.jsx)(n.code,{children:"pnpm run test"})," or ",(0,s.jsx)(n.code,{children:"pnpm run test:watch"})]}),"\n",(0,s.jsxs)(n.p,{children:["Build the project using ",(0,s.jsx)(n.code,{children:"pnpm build"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To build ",(0,s.jsx)(n.em,{children:"only"})," the docs run ",(0,s.jsx)(n.code,{children:"pnpm build docs"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);