"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[8063],{28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>t});var r=i(96540);const o={},s=r.createContext(o);function c(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(s.Provider,{value:n},e.children)}},46350:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/microservice_zip_export-9ae611d479650754fcb804c827f42f5c.gif"},46758:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"microservice/home","title":"Microservice","description":"Please note that OpenFn/microservice","source":"@site/versioned_docs/version-legacy/microservice/home.md","sourceDirName":"microservice","slug":"/microservice/home","permalink":"/documentation/legacy/microservice/home","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/versioned_docs/version-legacy/microservice/home.md","tags":[],"version":"legacy","frontMatter":{"title":"Microservice"},"sidebar":"docs","previous":{"title":"Devtools","permalink":"/documentation/legacy/devtools/home"},"next":{"title":"Planning","permalink":"/documentation/legacy/deploy/options"}}');var o=i(74848),s=i(28453);const c={title:"Microservice"},t=void 0,d={},l=[{value:"Intent",id:"intent",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Docker up and running",id:"docker-up-and-running",level:2},{value:"Development up and running guide",id:"development-up-and-running-guide",level:2},{value:"Up and running inside Docker",id:"up-and-running-inside-docker",level:3},{value:"Project configuration",id:"project-configuration",level:2},{value:"First setup using the sample config",id:"first-setup-using-the-sample-config",level:3},{value:"Setup from your existing OpenFn platform project",id:"setup-from-your-existing-openfn-platform-project",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.admonition,{title:"Microservice and devtools are being replaced by Lightning",type:"caution",children:(0,o.jsxs)(n.p,{children:["Please note that ",(0,o.jsx)(n.a,{href:"https://github.com/OpenFn/microservice",children:"OpenFn/microservice"}),"\nand ",(0,o.jsx)(n.a,{href:"https://github.com/OpenFn/devtools",children:"OpenFn/devtools"})," are being deprecated\nand replaced by ",(0,o.jsx)(n.a,{href:"https://github.com/OpenFn/lightning",children:"OpenFn/Lightning"}),", When\nlighting is released."]})}),"\n",(0,o.jsx)(n.h2,{id:"intent",children:"Intent"}),"\n",(0,o.jsxs)(n.p,{children:["OpenFn is used by numerous health and humanitarian organizations around the\nworld to scale their programs through real-time interoperability, systems\nintegration, and workflow automation. ",(0,o.jsx)(n.strong,{children:"OpenFn/microservice"})," makes use of\nOpenFn's open-core technology\u2014namely ",(0,o.jsx)(n.strong,{children:"OpenFn/core"}),", ",(0,o.jsx)(n.strong,{children:"OpenFn/engine"}),", and the\nvarious OpenFn ",(0,o.jsx)(n.strong,{children:"adaptors"}),"\u2014to create standalone microservices which can be\ndeployed on any hardware."]}),"\n",(0,o.jsxs)(n.p,{children:["This microservice approach helps to ensure that governments and NGOs are never\nlocked-in to OpenFn's SaaS offering, and can port their existing jobs, triggers,\nand credentials from ",(0,o.jsx)(n.a,{href:"https://www.openfn.org",children:"OpenFn.org"})," to their own\ninfrastructure easily."]}),"\n",(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.p,{children:["Similar to ",(0,o.jsx)(n.code,{children:"platform"}),", OpenFn/microservice runs on ",(0,o.jsx)(n.code,{children:"project.yaml"})," files. This\nmeans that when organizations or governments have an open-source license\nrequirement, all their jobs, credentials, and project configurations can be\nexported from OpenFn's iPaaS and used to create a microservice deployment."]}),"\n",(0,o.jsxs)(n.p,{children:["While this approach doesn't provide the OpenFn platform front-end with its\nvarious project management and configuration features, it's perfect for groups\nwith DevOps experience and 100% compatible with the platform. You can even build\nand test entire projects on ",(0,o.jsx)(n.code,{children:"platform"})," and then export the ",(0,o.jsx)(n.code,{children:"project.yaml"})," file\nto run on your own servers using ",(0,o.jsx)(n.code,{children:"microservice"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"This microservice approach provides flexibility to governments and NGOs, so they\nare never locked-in to OpenFn's SaaS platform offering. At any time, an\norganization can port their existing jobs, triggers, and credentials from\nOpenFn.org to run with our FOSS integration toolkit, using their own\ninfrastructure."}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.p,{children:"Familiarity with other elements of OpenFn's open source integration toolkit is\nhelpful when considering the microservice approach."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://docs.openfn.org/",children:"OpenFn/docs"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/openfn/engine",children:"OpenFn/engine"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/openFn/core",children:"OpenFn/core"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://openfn.github.io/devtools/",children:"OpenFn/devtools"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"docker-up-and-running",children:"Docker up and running"}),"\n",(0,o.jsxs)(n.p,{children:["Assuming you've got an ",(0,o.jsx)(n.code,{children:".env"})," and a sample project at ",(0,o.jsx)(n.code,{children:"./sample-project"}),"\ndirectory with a ",(0,o.jsx)(n.code,{children:"project.yaml"})," spec:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"docker-compose up\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can configure either the compose file or the .env, or run the container\nusing ",(0,o.jsx)(n.code,{children:"docker run"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"docker run -v <path-to-your-project-folder>:/home/microservice/<path-to-your-project-folder> \\\n  --env-file <path-to-your-env-file> \\\n  --network host \\\n  openfn/microservice:v0.3.2\n"})}),"\n",(0,o.jsx)(n.h2,{id:"development-up-and-running-guide",children:"Development up and running guide"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Clone this repo with ",(0,o.jsx)(n.code,{children:"git clone git@github.com:OpenFn/microservice.git"})]}),"\n",(0,o.jsxs)(n.li,{children:["Enter the directory with ",(0,o.jsx)(n.code,{children:"cd microservice"})]}),"\n",(0,o.jsxs)(n.li,{children:["Install dependencies with ",(0,o.jsx)(n.code,{children:"mix setup"})]}),"\n",(0,o.jsxs)(n.li,{children:["Run the tests with ",(0,o.jsx)(n.code,{children:"mix test"})]}),"\n",(0,o.jsxs)(n.li,{children:["Make a project directory to hold your project artifacts with\n",(0,o.jsx)(n.code,{children:"mkdir sample-project"})]}),"\n",(0,o.jsxs)(n.li,{children:["Create a new project specification with\n",(0,o.jsx)(n.code,{children:"cp project.yaml.example ./sample-project/project.yaml"})]}),"\n",(0,o.jsxs)(n.li,{children:["Create a ",(0,o.jsx)(n.code,{children:".env"})," file with ",(0,o.jsx)(n.code,{children:"cp .env.example .env"})]}),"\n",(0,o.jsxs)(n.li,{children:["Install necessary adaptors via\n",(0,o.jsx)(n.code,{children:"npm install @openfn/language-http --prefix priv/openfn/runtime/node_modules --no-save --no-package-lock --global-style"})]}),"\n",(0,o.jsxs)(n.li,{children:["Start your microservice server with\n",(0,o.jsx)(n.code,{children:'env $(cat .env | grep -v "#" | xargs ) iex -S mix phx.server'})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"up-and-running-inside-docker",children:"Up and running inside Docker"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Build a docker image with ",(0,o.jsx)(n.code,{children:"docker build -t openfn/microservice:v0.3.0 ."})]}),"\n",(0,o.jsxs)(n.li,{children:["Run with the ",(0,o.jsx)(n.a,{href:"#Docker-run",children:"docker run command"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"project-configuration",children:"Project configuration"}),"\n",(0,o.jsxs)(n.p,{children:["You can configure the jobs, triggers, credentials and language packs used in\nyour microservice in the ",(0,o.jsx)(n.code,{children:"project.yaml"})," config file."]}),"\n",(0,o.jsx)(n.h3,{id:"first-setup-using-the-sample-config",children:"First setup using the sample config"}),"\n",(0,o.jsxs)(n.p,{children:["The\n",(0,o.jsx)(n.a,{href:"https://github.com/OpenFn/microservice/blob/main/project.yaml.example",children:"sample project configuration file"}),"\ndescribes an example project setup to help you get acquainted with this\nstructure."]}),"\n",(0,o.jsx)(n.p,{children:"By default microservice is configured with 4 sample jobs:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"job-1"})," is triggered when a matching message arrives to the inbox (see\n",(0,o.jsx)(n.code,{children:"trigger-1"}),")."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"recurring-job"})," is a timed job scheduled to run every minute and is linked to\nthe ",(0,o.jsx)(n.code,{children:"every-minute"})," cron trigger."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"flow-job"})," and ",(0,o.jsx)(n.code,{children:"catch-job"})," run after the ",(0,o.jsx)(n.code,{children:"success"})," and ",(0,o.jsx)(n.code,{children:"failure"})," of job-1,\nrespectively."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["All of the jobs are configured with the language pack ",(0,o.jsx)(n.code,{children:"openfn/language-common"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["In the default sample configuration a new message posted to\n",(0,o.jsx)(n.code,{children:"localhost:4000/inbox"})," that matches ",(0,o.jsx)(n.code,{children:"trigger-1"})," (i.e. the message contains\n",(0,o.jsx)(n.code,{children:'"number":2'}),") is greeted with an asynchronous acknowledgement receipt\n(",(0,o.jsx)(n.code,{children:"HTTP 202"})," ",(0,o.jsx)(n.code,{children:"Data accepted and processing has begun"}),") and will trigger ",(0,o.jsx)(n.code,{children:"job-1"}),"\nto run."]}),"\n",(0,o.jsx)(n.p,{children:"You can try this out with the following snippet:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:'curl -X POST -H "Content-Type: application/json" \\\n -d \'{\n  "number":2,\n  "surveyId": 37479\n}\' \\\n http://localhost:4000/inbox\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Posting a message not matching any of the triggers (e.g. ",(0,o.jsx)(n.code,{children:"\u201cnumber\u201d:3"}),") equally\nprompts an acknowledgement but doesn\u2019t trigger any jobs."]}),"\n",(0,o.jsx)(n.p,{children:"Example message post for this non-match scenario:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:'curl -X POST -H "Content-Type: application/json" \\\n -d \'{\n  "number":3,\n  "surveyId": 37479\n}\' \\\n http://localhost:4000/inbox\n'})}),"\n",(0,o.jsxs)(n.p,{children:["HTTP ",(0,o.jsx)(n.code,{children:"post"})," requests made to\n",(0,o.jsx)(n.a,{href:"http://localhost:4000/inbox",children:(0,o.jsx)(n.code,{children:"localhost:4000/inbox"})})," will be processed by the\n",(0,o.jsx)(n.code,{children:"Receiver"}),", according to the ",(0,o.jsx)(n.code,{children:"credential"}),", ",(0,o.jsx)(n.code,{children:"expression"}),", and ",(0,o.jsx)(n.code,{children:"adaptor"})," defined\nin the project configuration ",(0,o.jsx)(n.code,{children:"YAML"})," file."]}),"\n",(0,o.jsxs)(n.p,{children:["Time-based jobs will be run by ",(0,o.jsx)(n.code,{children:"Engine"})," according to the ",(0,o.jsx)(n.code,{children:"credential"}),",\n",(0,o.jsx)(n.code,{children:"expression"}),", and ",(0,o.jsx)(n.code,{children:"adaptor"})," defined in your ",(0,o.jsx)(n.code,{children:"project.yaml"})," file."]}),"\n",(0,o.jsx)(n.h3,{id:"setup-from-your-existing-openfn-platform-project",children:"Setup from your existing OpenFn platform project"}),"\n",(0,o.jsx)(n.p,{children:"If you have a project configured on OpenFn, you have two ways for exporting your\nconfig on the Project Settings page and running your project in microservice."}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["If you export as ",(0,o.jsx)(n.code,{children:"project.yaml"}),", you can download your settings in ",(0,o.jsx)(n.code,{children:"yaml"}),"\nformat from your platform project Download page or from a link in the\nauto-generated email sent to your address. You can plug this file into your\nenvironment as set up using the\n",(0,o.jsx)(n.a,{href:"#Development-up-and-running-guide",children:"Development Up and Running Guide"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["If you export as ",(0,o.jsx)(n.code,{children:"microservice.zip"}),", you'll get your microservice folder\nready to run with ",(0,o.jsx)(n.code,{children:"docker"}),", containing"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["a ",(0,o.jsx)(n.code,{children:"docker-compose.yaml"})," config file"]}),"\n",(0,o.jsxs)(n.li,{children:["a project folder containing ",(0,o.jsx)(n.code,{children:"project.yaml"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:".env"})," file with the default environment variables for docker"]}),"\n",(0,o.jsxs)(n.li,{children:["a ",(0,o.jsx)(n.code,{children:"Readme"})," file"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"cd"})," into the folder and run the project with ",(0,o.jsx)(n.code,{children:"docker-compose up"}),". If you don't\nhave the docker image, it will be auto-pulled from ",(0,o.jsx)(n.code,{children:"hub.docker.com"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Export Microservice Zip",src:i(46350).A+"",width:"480",height:"257"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);