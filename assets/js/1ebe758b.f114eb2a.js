"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[16808],{20415:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var o=t(58168),a=(t(96540),t(15680));const l={title:"Collections CLI Usage",sidebar_label:"Collections",slug:"/collections-cli"},i=void 0,r={unversionedId:"build-for-developers/cli-collections",id:"build-for-developers/cli-collections",title:"Collections CLI Usage",description:"The OpenFn CLI includes support for reading from and writing to",source:"@site/docs/build-for-developers/cli-collections.md",sourceDirName:"build-for-developers",slug:"/collections-cli",permalink:"/documentation/collections-cli",draft:!1,editUrl:"https://github.com/openfn/docs/edit/main/docs/build-for-developers/cli-collections.md",tags:[],version:"current",frontMatter:{title:"Collections CLI Usage",sidebar_label:"Collections",slug:"/collections-cli"},sidebar:"docs",previous:{title:"CLI challenges",permalink:"/documentation/cli-challenges"},next:{title:"Planning",permalink:"/documentation/deploy/options"}},s={},p=[{value:"Getting a PAT",id:"getting-a-pat",level:2},{value:"Setting a server",id:"setting-a-server",level:2},{value:"Fetching items",id:"fetching-items",level:2},{value:"Uploading items",id:"uploading-items",level:2},{value:"Removing items",id:"removing-items",level:2}],c={toc:p},u="wrapper";function g(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,o.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"The OpenFn CLI includes support for reading from and writing to\n",(0,a.yg)("a",{parentName:"p",href:"/documentation/build/collections"},"Collections"),": a key/value store built into\nOpenFn."),(0,a.yg)("admonition",{title:"Versions",type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"Collections support was added to the CLI in version 1.9.0."),(0,a.yg)("p",{parentName:"admonition"},"Run ",(0,a.yg)("inlineCode",{parentName:"p"},"npm install -g @openfn/cli")," to update or install.")),(0,a.yg)("p",null,"You can use the CLI to:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Explore the contents of Collections without running a Workflow"),(0,a.yg)("li",{parentName:"ul"},"Experiment with query syntax to get the keys you need"),(0,a.yg)("li",{parentName:"ul"},"Update mapping objects and lookup tables from local (or source-controlled)\nfiles"),(0,a.yg)("li",{parentName:"ul"},"Manually remove unneeded data")),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"Got feedback? Want more Collections support in the CLI? Post a Feature Request\nto ",(0,a.yg)("a",{parentName:"p",href:"https://community.openfn.org/c/feature-requests"},"community.openfn.org"),"!")),(0,a.yg)("p",null,"Get started with the Collections API with ",(0,a.yg)("inlineCode",{parentName:"p"},"openfn collections --help")),(0,a.yg)("p",null,"You'll need a Personal Access Token (PAT) to access a collection. You'll also\nneed to ensure a collection has been created before you can read or write to\nit - see\n",(0,a.yg)("a",{parentName:"p",href:"http://localhost:3000/documentation/build/collections#managing-collections"},"Managing Collections")),(0,a.yg)("admonition",{title:"Trying to use Collections in a CLI workflow?",type:"info"},(0,a.yg)("p",{parentName:"admonition"},"These docs explain how to use the ",(0,a.yg)("inlineCode",{parentName:"p"},"openfn collections")," CLI command."),(0,a.yg)("p",{parentName:"admonition"},"If you're running an expression or workflow through the CLI, you need to use the\ncollections adaptor - check out the\n",(0,a.yg)("a",{parentName:"p",href:"http://localhost:3000/adaptors/collections#cli-usage"},"Collections Adaptor Docs"),"\nfor detauls")),(0,a.yg)("h2",{id:"getting-a-pat"},"Getting a PAT"),(0,a.yg)("p",null,"Data inside Collections is securely stored under a Project, and access is\nstrictly only allowed to users with access to that Project. So if you want to\naccess a Collection, you have to tell the server who you are."),(0,a.yg)("p",null,"We do this using Personal Access Tokens. See\n",(0,a.yg)("a",{parentName:"p",href:"/documentation/api-tokens#about-api-tokens"},"Create and Manage API Tokens")," for\nmore details."),(0,a.yg)("p",null,"One you have a PAT, you need to pass it in to the CLI. The easiest way to do\nthis is to set your ",(0,a.yg)("inlineCode",{parentName:"p"},"OPENFN_PAT")," env var, which the CLI will use automatically."),(0,a.yg)("p",null,"If you're using multiple access tokens, you can pass ",(0,a.yg)("inlineCode",{parentName:"p"},"--token")," to the CLI to\noverride the default."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openfn collections get my-collection \\* --token $MY_OPENFN_PAT\n")),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"The rest of this guide assumes that the ",(0,a.yg)("inlineCode",{parentName:"p"},"OPENFN_PAT")," env var has been set. So\nlong as it has, as you're using a server which has a ",(0,a.yg)("inlineCode",{parentName:"p"},"my-collection")," collection,\nall examples will work.")),(0,a.yg)("h2",{id:"setting-a-server"},"Setting a server"),(0,a.yg)("p",null,"By default, the CLI will all out to our primary platform at\n",(0,a.yg)("a",{parentName:"p",href:"https://app.openfn.org"},"https://app.openfn.org"),"."),(0,a.yg)("p",null,"If you're running from open source or using a different deployment, you'll also\nneed to tell the CLI which Collections server to use."),(0,a.yg)("p",null,"You can do this by passing ",(0,a.yg)("inlineCode",{parentName:"p"},"--lightning")," directly:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openfn collections get my-collection \\* --lightning http://localhost:4000\n")),(0,a.yg)("p",null,"Or by setting the ",(0,a.yg)("inlineCode",{parentName:"p"},"OPENFN_ENDPOINT")," environment variable."),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"To see which server the CLI is using, ask for debug-level logging in your\noutput:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openfn collections get my-collection \\* --log debug\n"))),(0,a.yg)("h2",{id:"fetching-items"},"Fetching items"),(0,a.yg)("p",null,"You can fetch items from a Collection by passing a collection name and a key, or\nkey pattern (like ",(0,a.yg)("inlineCode",{parentName:"p"},"*"),' for "everything", or ',(0,a.yg)("inlineCode",{parentName:"p"},"2024*")," for keys starting with\n",(0,a.yg)("inlineCode",{parentName:"p"},"2024"),")"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openfn collections get <collection-name> <key>\n")),(0,a.yg)("p",null,"For example, to get everything from ",(0,a.yg)("inlineCode",{parentName:"p"},"my-collection"),", run:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openfn collections get my-collection \\*\n")),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"In unix shells (MacOS or Linux), the ",(0,a.yg)("inlineCode",{parentName:"p"},"*")," character has special meaning. So if\nyou want to get all items, you have to escape it or quote it:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre"},"openfn collections get my-collection \\*\n")),(0,a.yg)("p",{parentName:"admonition"},"Including ","*"," in a pattern string should still work:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre"},"openfn collections get my-collection 2024*\n"))),(0,a.yg)("p",null,"Collections are saved as strings, but will be serialized to JSON in the output."),(0,a.yg)("p",null,"By default the CLI will log downloaded values to your shell. To write to disk,\npass ",(0,a.yg)("inlineCode",{parentName:"p"},"--output")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"-o")," with a file path relative to your working directory:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openfn collections get my-collection \\* -o /tmp/my_collection.json\n")),(0,a.yg)("p",null,"To format the output to make it easier to read, add the ",(0,a.yg)("inlineCode",{parentName:"p"},"--pretty")," flag for\npretty-printing:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openfn collections get my-collection \\* -o /tmp/my_collection.json --pretty\n")),(0,a.yg)("p",null,"It's important to understand that the output works a bit differently if you're\ngetting one specific item with or getting many items with a key-pattern."),(0,a.yg)("p",null,'A single key always returns its value "raw" or "verbatim", without the key\nattached. So for a key ',(0,a.yg)("inlineCode",{parentName:"p"},"item-1")," which holds a JSON object as a value, then this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openfn collections get my-collection item-1\n")),(0,a.yg)("p",null,"Will download and save something like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'{\n  "id": "item-1"\n  /* ... other properties of the value */\n}\n')),(0,a.yg)("p",null,"If you use a key-pattern to retrieve data, the value is output in multi-item\nmode: which is a JSON object where the key is the item's key, and the value is\nthe item's value:"),(0,a.yg)("p",null,"So if we get all items whose key starts with ",(0,a.yg)("inlineCode",{parentName:"p"},"item-"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"$ openfn collections get my-collection item-1*\n")),(0,a.yg)("p",null,"The resulting data will look like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "item-1": {\n    "id": "item-1"\n    /* ... other properties of the value */\n  },\n  "item-10": {\n    "id": "item-10"\n    /* ... other properties of the value */\n  }\n}\n')),(0,a.yg)("h2",{id:"uploading-items"},"Uploading items"),(0,a.yg)("p",null,"You can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"collections")," command to upload data to a collection. When\nuploading, values always come from a file on disk. In this example we'll use\nJSON files, but if you're uploading a single value it doesn't have to be valid\nJSON."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"set")," command has two modes. To upload a single item, use:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openfn collections set <collection-name> <key> <path/to/value.json>\n")),(0,a.yg)("p",null,"This will read the data in ",(0,a.yg)("inlineCode",{parentName:"p"},"path/to/value.json")," as a string, and upsert it under\nthe provided key. Key patterns are not supported."),(0,a.yg)("p",null,"To bulk upsert multiple values, use:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openfn collections set <collection-name> --items <path/to/items.json>\n")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"items.json")," file must contain a JSON object where the keys are item keys\nand the values are item values (just like the multi-item get command returns):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "item-1": {\n    "id": "item-1"\n    /* ... other properties of the value */\n  },\n  "item-10": {\n    "id": "item-10"\n    /* ... other properties of the value */\n  }\n}\n')),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"Remember that Collections always uses an ",(0,a.yg)("em",{parentName:"p"},"upsert")," strategy when uploading new\nitems."),(0,a.yg)("p",{parentName:"admonition"},"This means that if a key does not exist, it will be created and assigned a\nvalue. If it already exists, its value will be updated.")),(0,a.yg)("h2",{id:"removing-items"},"Removing items"),(0,a.yg)("p",null,"You can also remove items from a collection with the ",(0,a.yg)("inlineCode",{parentName:"p"},"collections remove"),"\ncommand:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openfn collections remove <collection-name> <key>\n")),(0,a.yg)("p",null,"Key-patterns are supported and allow you to remove multiple keys."),(0,a.yg)("p",null,"Use ",(0,a.yg)("inlineCode",{parentName:"p"},"--dry-run")," to get a list of the keys that would be deleted without actually\nrunning the delete:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"openfn collections remove my-collection 2024* --dry-run\n")))}g.isMDXComponent=!0},15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>y});var o=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,y=u["".concat(s,".").concat(m)]||u[m]||g[m]||l;return t?o.createElement(y,i(i({ref:n},c),{},{components:t})):o.createElement(y,i({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[u]="string"==typeof e?e:a,i[1]=r;for(var p=2;p<l;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);