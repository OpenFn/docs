"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[48155],{12660:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"library/jobs/auto/synchronous-http-request","title":"Chaining synchronous http requests","description":"\ud83d\udcdc This job is an official example from OpenFn.","source":"@site/adaptors/library/jobs/auto/synchronous-http-request.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/synchronous-http-request","permalink":"/adaptors/library/jobs/auto/synchronous-http-request","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Chaining synchronous http requests","sidebar_label":"\ud83d\udcdc Chaining synchronous http requests","id":"synchronous-http-request","keywords":["library","job","expression","http","post","async","await"]},"sidebar":"adaptors","previous":{"title":"\ud83d\udcdc Timeout to create a delay","permalink":"/adaptors/library/jobs/auto/timeout"},"next":{"title":"WF4-1 Bulk get Referral Cases","permalink":"/adaptors/library/jobs/auto/WF4-1-Bulk-get-Referral-Cases-2023-05-19"}}');var o=t(74848),a=t(28453);const i={title:"Chaining synchronous http requests",sidebar_label:"\ud83d\udcdc Chaining synchronous http requests",id:"synchronous-http-request",keywords:["library","job","expression","http","post","async","await"]},r=void 0,c={},l=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function u(n){const e={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:["\ud83d\udcdc ",(0,o.jsx)("em",{children:"This job is an official example from OpenFn."})]}),"\n",(0,o.jsx)(e.h2,{id:"metadata",children:"Metadata"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Name: Chaining synchronous http requests"}),"\n",(0,o.jsxs)(e.li,{children:["Adaptor: ",(0,o.jsx)(e.a,{href:"https://www.github.com/openfn/language-http",children:(0,o.jsx)(e.code,{children:"@openfn/language-http"})})]}),"\n",(0,o.jsxs)(e.li,{children:["Adaptor Version: ",(0,o.jsx)(e.a,{href:"https://www.github.com/openfn/language-http",children:(0,o.jsx)(e.code,{children:"latest"})})]}),"\n",(0,o.jsx)(e.li,{children:"Created date unknown"}),"\n",(0,o.jsx)(e.li,{children:"Updated date unknown"}),"\n",(0,o.jsxs)(e.li,{children:["Score: ",(0,o.jsx)("b",{children:"100"})," (an ",(0,o.jsx)(e.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"post"}),", ",(0,o.jsx)(e.code,{children:"async"}),", ",(0,o.jsx)(e.code,{children:"await"})]}),"\n",(0,o.jsx)(e.h2,{id:"expression",children:"Expression"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"fn(async state => {\n  const { Patient, Visit } = state.data;\n\n  console.log('Here we break large arrays into smaller chunks.');\n  const chunk = (arr, chunkSize) => {\n    var R = [];\n    for (var i = 0, len = arr.length; i < len; i += chunkSize) R.push(arr.slice(i, i + chunkSize));\n    return R;\n  };\n\n  const patientSets = chunk(Patient, 10);\n  const visitSets = chunk(Visit, 10);\n\n  console.log('Patient sets:', patientSets.length);\n  console.log('Visit sets:', visitSets.length);\n\n  const visitChunks = [];\n  const patientChunks = [];\n\n  patientSets.forEach(sets => {\n    const data = {\n      Visit: [],\n      Patient: sets,\n    };\n    patientChunks.push(data);\n  });\n\n  visitSets.forEach(sets => {\n    const data = {\n      Visit: sets,\n      Patient: [],\n    };\n    visitChunks.push(data);\n  });\n\n  let countInbox = 0;\n  console.log('Then we define our async function that make multiple posts requests,');\n  console.log('each after a fix period of time.');\n  const postToInbox = async data => {\n    countInbox++;\n    console.log(`${countInbox} request to inbox`);\n\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    await post(state.configuration.inboxUrl, { body: data })(state);\n  };\n\n  console.log('For each one of our chunks, we send one by one awaiting response.');\n  for (const patient of patientChunks) {\n    await postToInbox(patient);\n  }\n  for (const visit of visitChunks) {\n    await postToInbox(visit);\n  }\n\n  return { ...state, patientChunks, visitChunks };\n});\n\n"})})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>r});var s=t(96540);const o={},a=s.createContext(o);function i(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);