"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[36421],{67595:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var a=n(58168),r=(n(96540),n(15680));const s={title:"Create an Observation",sidebar_label:"\ud83d\udcdc Create an Observation",id:"satusehat-create-observations",keywords:["library","job","expression","satusehat","map","post","JSON"]},o=void 0,i={unversionedId:"library/jobs/auto/satusehat-create-observations",id:"library/jobs/auto/satusehat-create-observations",title:"Create an Observation",description:"\ud83d\udcdc This job is an official example from OpenFn.",source:"@site/adaptors/library/jobs/auto/satusehat-create-observations.md",sourceDirName:"library/jobs/auto",slug:"/library/jobs/auto/satusehat-create-observations",permalink:"/adaptors/library/jobs/auto/satusehat-create-observations",draft:!1,tags:[],version:"current",frontMatter:{title:"Create an Observation",sidebar_label:"\ud83d\udcdc Create an Observation",id:"satusehat-create-observations",keywords:["library","job","expression","satusehat","map","post","JSON"]},sidebar:"adaptors",previous:{title:"\ud83d\udcdc Create an Encounter Record",permalink:"/adaptors/library/jobs/auto/satusehat-create-encounter"},next:{title:"\ud83d\udcdc Create a Medication Record",permalink:"/adaptors/library/jobs/auto/satusehat-create-medication"}},l={},u=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(p,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"\ud83d\udcdc ",(0,r.yg)("em",null,"This job is an official example from OpenFn.")),(0,r.yg)("h2",{id:"metadata"},"Metadata"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Name: Create an Observation"),(0,r.yg)("li",{parentName:"ul"},"Adaptor: ",(0,r.yg)("a",{parentName:"li",href:"https://www.github.com/openfn/language-satusehat"},(0,r.yg)("inlineCode",{parentName:"a"},"@openfn/language-satusehat"))),(0,r.yg)("li",{parentName:"ul"},"Adaptor Version: ",(0,r.yg)("a",{parentName:"li",href:"https://www.github.com/openfn/language-satusehat"},(0,r.yg)("inlineCode",{parentName:"a"},"latest"))),(0,r.yg)("li",{parentName:"ul"},"Created date unknown"),(0,r.yg)("li",{parentName:"ul"},"Updated date unknown"),(0,r.yg)("li",{parentName:"ul"},"Score: ",(0,r.yg)("b",null,"100")," (an ",(0,r.yg)("a",{parentName:"li",href:"/adaptors/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,r.yg)("h2",{id:"key-functions"},"Key Functions"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"map"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"post"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"JSON")),(0,r.yg)("h2",{id:"expression"},"Expression"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"// Create observation in Satusehat based on an incoming Commcare visit\n\nfunction createObservationData(item, state, result) {\n  const patientReference = `Patient/${state.patient.ihs_number}`;\n  const encounterReference = `Encounter/${state.encounterId}`;\n  const encounterDisplay = `${state.patient.full_name}'s ${state.visit.properties.visit_type} on ${state.visit.properties.visit_date}`;\n  return {\n    resourceType: 'Observation',\n    status: 'final',\n    category: [\n      {\n        coding: item.category,\n      },\n    ],\n    code: {\n      coding: item.code,\n    },\n    subject: {\n      reference: patientReference,\n    },\n    performer: [\n      {\n        reference: `Practitioner/N10000001`,\n        display: 'Voigt',\n      },\n    ],\n    encounter: {\n      reference: encounterReference,\n      display: encounterDisplay,\n    },\n    effectiveDateTime: state.visit.visit_date,\n    ...result,\n  };\n}\n\nfn(state => {\n  //  Filtering and mapping observations based on the visit.\n  state.observations = state.visit.observations.map(item => {\n    const { value_type: valueType, value } = item;\n    const dataObjects = [];\n\n    if (valueType === 'valueCodeableConcept') {\n      value.forEach(value => {\n        const result = {\n          [valueType]: {\n            coding: [JSON.parse(value.snomed_code)],\n            value: JSON.parse(value.value),\n          },\n        };\n        const data = createObservationData(\n          { ...item, id: value.id },\n          state,\n          result\n        );\n        dataObjects.push(data);\n      });\n    } else if (valueType === 'valueQuantity') {\n      const result = {\n        [valueType]: {\n          coding: [value.snomed_code],\n          value: value.value,\n        },\n      };\n      const data = createObservationData(\n        { ...item, id: value.id },\n        state,\n        result\n      );\n      dataObjects.push(data);\n    } else if (valueType === 'valueInteger') {\n      const result = {\n        [valueType]: {\n          coding: value.snomed_code,\n          value: value.value,\n        },\n      };\n      const data = createObservationData(\n        { ...item, id: value.id },\n        state,\n        result\n      );\n      dataObjects.push(data);\n    } else if (valueType === 'valueDateTime') {\n      const result = {\n        [valueType]: {\n          coding: [JSON.parse(value.snomed_code)],\n          value: new Date(JSON.parse(value.value)).toISOString(),\n        },\n      };\n      const data = createObservationData(\n        { ...item, id: value.id },\n        state,\n        result\n      );\n      dataObjects.push(data);\n    } else if (valueType === 'valueBoolean') {\n      const result = {\n        [valueType]: {\n          coding: [JSON.parse(value.snomed_code)],\n          value: JSON.parse(value.value) === 'never' ? false : true,\n        },\n      };\n      const data = createObservationData(\n        { ...item, id: value.id },\n        state,\n        result\n      );\n      dataObjects.push(data);\n    } else {\n      const result = {\n        [valueType]: {\n          coding: [value.snomed_code],\n          value: value.value,\n        },\n      };\n\n      if (result) {\n        const data = createObservationData(item, state, result);\n        dataObjects.push(data);\n      }\n    }\n\n    return dataObjects;\n  });\n\n  return state;\n});\n\n// Post our observation resources to Satusehat\npost('Observation', $.observations);\n\n//  Store the newly created resources, created by the server, into state for the next step\nfn(state => {\n  state.observations = state.data;\n  return state;\n});\n\n")))}d.isMDXComponent=!0},15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>y});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),v=r,y=p["".concat(l,".").concat(v)]||p[v]||d[v]||s;return n?a.createElement(y,o(o({ref:t},c),{},{components:n})):a.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=v;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}v.displayName="MDXCreateElement"}}]);