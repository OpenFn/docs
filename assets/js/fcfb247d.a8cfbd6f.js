"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[46985],{75966:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var t=a(58168),r=(a(96540),a(15680));const s={title:"postgresql developer readme",id:"postgresql-readme",keywords:["adaptor","readme","postgresql"]},l="postgresql Adaptor developer README.md",o={unversionedId:"packages/postgresql-readme",id:"packages/postgresql-readme",title:"postgresql developer readme",description:"Source//github.com/OpenFn/adaptors/tree/main/packages/postgresql",source:"@site/adaptors/packages/postgresql-readme.md",sourceDirName:"packages",slug:"/packages/postgresql-readme",permalink:"/adaptors/packages/postgresql-readme",draft:!1,tags:[],version:"current",frontMatter:{title:"postgresql developer readme",id:"postgresql-readme",keywords:["adaptor","readme","postgresql"]},sidebar:"adaptors",previous:{title:"postgresql changelog",permalink:"/adaptors/packages/postgresql-changelog"},next:{title:"Power BI",permalink:"/adaptors/powerbi"}},i={},u=[{value:"Documentation",id:"documentation",level:2},{value:"required configuration for Heroku postgres",id:"required-configuration-for-heroku-postgres",level:2},{value:"<code>sql(query)</code>",id:"sqlquery",level:2},{value:"sample usage",id:"sample-usage",level:4},{value:"Find a single value for a table",id:"find-a-single-value-for-a-table",level:2},{value:"Insert a single record",id:"insert-a-single-record",level:2},{value:"Insert or Update using a unique column as a key",id:"insert-or-update-using-a-unique-column-as-a-key",level:2},{value:"Insert or Update if a value exist in the record",id:"insert-or-update-if-a-value-exist-in-the-record",level:2},{value:"Insert many records in postgresql",id:"insert-many-records-in-postgresql",level:2},{value:"Upsert many records in postgresql",id:"upsert-many-records-in-postgresql",level:2},{value:"Describe a table from postgres",id:"describe-a-table-from-postgres",level:2},{value:"Create a table in the database",id:"create-a-table-in-the-database",level:2},{value:"Alter a table in the database",id:"alter-a-table-in-the-database",level:2},{value:"Development",id:"development",level:2}],p={toc:u},d="wrapper";function g(e){let{components:n,...a}=e;return(0,r.yg)(d,(0,t.A)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"postgresql-adaptor-developer-readmemd"},"postgresql Adaptor developer README.md"),(0,r.yg)("p",null,"Source: ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/OpenFn/adaptors/tree/main/packages/postgresql"},"https://github.com/OpenFn/adaptors/tree/main/packages/postgresql")),(0,r.yg)("h1",{id:"language-postgresql"},"Language PostgreSQL"),(0,r.yg)("p",null,"Language Pack for building expressions and operations to run PostgreSQL queries."),(0,r.yg)("h2",{id:"documentation"},"Documentation"),(0,r.yg)("h2",{id:"required-configuration-for-heroku-postgres"},"required configuration for Heroku postgres"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "host": "some-host-url.compute-1.amazonaws.com",\n  "port": "5432",\n  "database": "wouldntyouliketoknow",\n  "user": "me",\n  "password": "noway",\n  "ssl": true,\n  "allowSelfSignedCert": true\n}\n')),(0,r.yg)("h2",{id:"sqlquery"},(0,r.yg)("inlineCode",{parentName:"h2"},"sql(query)")),(0,r.yg)("p",null,"Execute an sql query. An option can be added to either log the query or not and\neither execute the query or no. The options can be omitted as well."),(0,r.yg)("h4",{id:"sample-usage"},"sample usage"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"sql(\n  state =>\n    `INSERT INTO untitled_table (name, the_geom) VALUES ('` +\n    dataValue('form.first_name')(state) +\n    `', ST_SetSRID(ST_Point(` +\n    dataValue('lat')(state) +\n    `, ` +\n    dataValue('long')(state) +\n    `),4326))`,\n  { writeSql: true, execute: true }\n);\n")),(0,r.yg)("h2",{id:"find-a-single-value-for-a-table"},"Find a single value for a table"),(0,r.yg)("p",null,"This helper function allows to build a specific query where ",(0,r.yg)("inlineCode",{parentName:"p"},"sql")," would not be\nbest suited. It returns a single value and not a promise. An example of usage\nwould be in building a mapping object with a value from a lookup table."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"alterState(async state => {\n  const user = {\n    id: 1,\n    name: 'Mamadou',\n    user_id: await findValue({\n      uuid: 'id',\n      relation: 'users',\n      where: { first_name: 'Mama%' },\n      operator: { first_name: 'like' }, // operator is optional. \"=\" is used by default.\n    })(state),\n  };\n\n  return upsert(...)(state);\n});\n")),(0,r.yg)("h2",{id:"insert-a-single-record"},"Insert a single record"),(0,r.yg)("p",null,"This functions is used to insert a single record in postgres database. An option\n",(0,r.yg)("inlineCode",{parentName:"p"},"writeSql")," allows to log the generated sql query. The ",(0,r.yg)("inlineCode",{parentName:"p"},"setNull")," option allows to\nreplace the specified elements with ",(0,r.yg)("inlineCode",{parentName:"p"},"NULL"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"insert(\n  'users',\n  {\n    email: 'antony@gmail.com',\n    first_name: 'Antony',\n    inserted_at: '2020-08-27 00:00:00',\n    updated_at: '2020-08-27 00:00:00',\n  },\n  { setNull: [\"''\", \"'undefined'\"], writeSql: true, logValues: true }\n);\n")),(0,r.yg)("h2",{id:"insert-or-update-using-a-unique-column-as-a-key"},"Insert or Update using a unique column as a key"),(0,r.yg)("p",null,"Insert or Update if matched. An option, ",(0,r.yg)("inlineCode",{parentName:"p"},"execute"),", allows to either run the\ngenerated query or no."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"upsert(\n  'users',\n  'email',\n  {\n    email: 'luca@openfn.org',\n    first_name: 'Luca',\n    inserted_at: '2010-01-01 00:00:00',\n    updated_at: '2010-01-01 00:00:00',\n  },\n  {\n    setNull: [\"'NaN'\", \"'undefined'\"],\n    writeSql: false,\n    execute: true,\n    logValues: true,\n  }\n);\n")),(0,r.yg)("h2",{id:"insert-or-update-if-a-value-exist-in-the-record"},"Insert or Update if a value exist in the record"),(0,r.yg)("p",null,"This function will upsert a record only if the logical given is true. In this\ncase we check if ",(0,r.yg)("inlineCode",{parentName:"p"},"dataValue('name')")," exists."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"upsertIf(dataValue('name'), 'users', 'ON CONSTRAINT users_pkey', {\n  name: 'Elodie',\n  id: 7,\n});\n")),(0,r.yg)("h2",{id:"insert-many-records-in-postgresql"},"Insert many records in postgresql"),(0,r.yg)("p",null,"This function allows the insert of a set of records inside a table all at once."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"insertMany(\n  'users',\n  state =>\n    state.data.people.map(s => {\n      return {\n        first_name: ['Luca', 'Mohamed', 'Elodie'],\n        inserted_at: '2020-01-01 00:00:00',\n        updated_at: '2020-01-01 00:00:00',\n      };\n    }),\n  { logValues: true }\n);\n")),(0,r.yg)("h2",{id:"upsert-many-records-in-postgresql"},"Upsert many records in postgresql"),(0,r.yg)("p",null,"This function allows the upsert of a set of records inside a table all at once."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"upsertMany('users', 'ON CONSTRAINT users_pkey', state =>\n  state.data.people.map(s => {\n    return {\n      first_name: ['Luca', 'Mohamed', 'Elodie'],\n      inserted_at: '2020-01-01 00:00:00',\n      updated_at: '2020-01-01 00:00:00',\n    };\n  })\n);\n")),(0,r.yg)("h2",{id:"describe-a-table-from-postgres"},"Describe a table from postgres"),(0,r.yg)("p",null,"This function is used to fetch the list of columns of a given table in the\ndatabase."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"describeTable('users', { writeSql: true, execute: false });\n")),(0,r.yg)("h2",{id:"create-a-table-in-the-database"},"Create a table in the database"),(0,r.yg)("p",null,"This function allows to create a table in a database from a given array of\ncolumns. The key ",(0,r.yg)("inlineCode",{parentName:"p"},"identity")," can be use for a column to auto-generate a value."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"insertTable('users', state =>\n  state.data.map(column => ({\n    name: column.name,\n    type: column.type,\n    required: true, // optional\n    unique: false, // optional - set to true for unique constraint\n  }))\n);\n")),(0,r.yg)("h2",{id:"alter-a-table-in-the-database"},"Alter a table in the database"),(0,r.yg)("p",null,"This function allows to add new columns to a table. Beware of the fact that you\ncannot add new columns with names that already exist in the table."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"modifyTable(\n  'users',\n  state =>\n    state.data.map(newColumn => ({\n      name: newColumn.name,\n      type: newColumn.type,\n      required: true, // optional\n      unique: false, // optional - set to true for unique constraint\n    })),\n  { writeSql: false, execute: true }\n);\n")),(0,r.yg)("h2",{id:"development"},"Development"),(0,r.yg)("p",null,"Clone the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/OpenFn/adaptors"},"adaptors monorepo"),". Follow the\n",(0,r.yg)("inlineCode",{parentName:"p"},"Getting Started")," guide inside to get set up."),(0,r.yg)("p",null,"Run tests using ",(0,r.yg)("inlineCode",{parentName:"p"},"pnpm run test")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"pnpm run test:watch")),(0,r.yg)("p",null,"Build the project using ",(0,r.yg)("inlineCode",{parentName:"p"},"pnpm build"),"."),(0,r.yg)("p",null,"To just build the docs run ",(0,r.yg)("inlineCode",{parentName:"p"},"pnpm build docs")))}g.isMDXComponent=!0},15680:(e,n,a)=>{a.d(n,{xA:()=>p,yg:()=>m});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=t.createContext({}),u=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},p=function(e){var n=u(e.components);return t.createElement(i.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(a),c=r,m=d["".concat(i,".").concat(c)]||d[c]||g[c]||s;return a?t.createElement(m,l(l({ref:n},p),{},{components:a})):t.createElement(m,l({ref:n},p))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=c;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<s;u++)l[u]=a[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"}}]);