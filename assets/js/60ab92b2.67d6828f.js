"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[10909],{59853:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(58168),r=(a(96540),a(15680));const i={layout:"post",title:"Wrapping my head around jobs",author:"Taylor Downs",author_url:"https://github.com/taylordowns2000",author_image_url:"https://avatars.githubusercontent.com/taylordowns2000",tags:["how-to","tips","jobs"],featured:!0},o=void 0,s={permalink:"/articles/2021/07/05/wrapping-my-head-around-jobs",editUrl:"https://github.com/openfn/docs/edit/main/articles/2021-07-05-wrapping-my-head-around-jobs.md",source:"@site/articles/2021-07-05-wrapping-my-head-around-jobs.md",title:"Wrapping my head around jobs",description:"Jobs are business processes turned into functional-style scripts. What does that",date:"2021-07-05T00:00:00.000Z",formattedDate:"July 5, 2021",tags:[{label:"how-to",permalink:"/articles/tags/how-to"},{label:"tips",permalink:"/articles/tags/tips"},{label:"jobs",permalink:"/articles/tags/jobs"}],readingTime:8.285,hasTruncateMarker:!0,authors:[{name:"Taylor Downs",url:"https://github.com/taylordowns2000",imageURL:"https://avatars.githubusercontent.com/taylordowns2000"}],frontMatter:{layout:"post",title:"Wrapping my head around jobs",author:"Taylor Downs",author_url:"https://github.com/taylordowns2000",author_image_url:"https://avatars.githubusercontent.com/taylordowns2000",tags:["how-to","tips","jobs"],featured:!0},prevItem:{title:"Improving Multistage Docker Builds using Buildx",permalink:"/articles/2021/10/08/improving-multistage-docker-builds-using-buildx"},nextItem:{title:"Forms and Cases: CommCare and event-based integration",permalink:"/articles/2021/05/24/commcare-events"}},l={authorsImageUrls:[void 0]},p=[{value:"It all starts with <code>state</code>",id:"it-all-starts-with-state",level:2},{value:"It ends with <code>state</code> too",id:"it-ends-with-state-too",level:2},{value:"Keeping external actions clean",id:"keeping-external-actions-clean",level:2},{value:"Wrapping up",id:"wrapping-up",level:2}],g={toc:p},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.yg)(u,(0,n.A)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Jobs are business processes turned into functional-style scripts. What does that\nmean, how should you approach writing jobs?"),(0,r.yg)("p",null,"First, this is how ",(0,r.yg)("em",{parentName:"p"},"I")," think about jobs and what we do at Open Function Group to\ntry to make our job code as readable, future-proof, and concise as possible.\nThere are a million different ways to approach writing jobs. This is one."),(0,r.yg)("h2",{id:"it-all-starts-with-state"},"It all starts with ",(0,r.yg)("inlineCode",{parentName:"h2"},"state")),(0,r.yg)("p",null,"If a job is a set of instructions for a chef (a recipe?) then the initial\n",(0,r.yg)("inlineCode",{parentName:"p"},"state")," is all of the ingredients they need tied up in a perfect little bundle.\nIt usually looks something like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "configuration": {\n    "hostUrl": "https://moh.kenya.gov.ke/dhis2",\n    "username": "taylor",\n    "password": "very-secret"\n  },\n  "data": {\n    "type": "registration",\n    "patient": {\n      "age": 24,\n      "gender": "M",\n      "nationalId": "321cs7"\n    }\n  }\n}\n')),(0,r.yg)("p",null,"This might be the initial ",(0,r.yg)("inlineCode",{parentName:"p"},"state")," for a real-time, message-triggered job. Some\nsource system generated a new patient payload and sent that payload to OpenFn.\nThe data from our source system will wind up in ",(0,r.yg)("inlineCode",{parentName:"p"},"state.data"),". Now if my job is\nmeant to take this new patient registration information and use it to create a\nnew record in the national health record system, I'll also need to provide my\nrobot-chef here with a credential so they can access that system. The credential\nI've specified will get put into ",(0,r.yg)("inlineCode",{parentName:"p"},"state.configuration"),' and now our "raw\ningredients" are all ready for our robot chef.'),(0,r.yg)("p",null,'Note that even if this job was initiated by a cron trigger (e.g., "Hey chef,\nprepare this recipe every Tuesday at 7pm") or by a flow/catch trigger (e.g.,\n"Hey chef, prepare this recipe only when you ',(0,r.yg)("em",{parentName:"p"},"fail"),' to make banana pancakes") it\nwill have an initial state.'),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},'Every job, and every operation inside that job (think "step" in a recipe) is\ncalled with ',(0,r.yg)("inlineCode",{parentName:"strong"},"state")," and returns ",(0,r.yg)("inlineCode",{parentName:"strong"},"state")," when it's done.")),(0,r.yg)("p",null,"Initial state for a cron triggered job might look like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "configuration": {\n    "hostUrl": "https://moh.kenya.gov.ke",\n    "apiKey": "abc123"\n  },\n  "data": {},\n  "lastProcessedId": 321\n}\n')),(0,r.yg)("p",null,"And for a fail triggered job like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "configuration": {\n    "hostUrl": "https://moh.kenya.gov.ke",\n    "apiKey": "abc123"\n  },\n  "data": {},\n  "lastProcessedId": 321,\n  "error": ["Required field missing", "Patient Surname", "Line 43"]\n}\n')),(0,r.yg)("p",null,"No matter what, jobs start with state. See\n",(0,r.yg)("a",{parentName:"p",href:"/documentation/jobs/state"},'"Initial and final state for runs"')," for a detailed\nbreakdown."),(0,r.yg)("h2",{id:"it-ends-with-state-too"},"It ends with ",(0,r.yg)("inlineCode",{parentName:"h2"},"state")," too"),(0,r.yg)("p",null,"Now that we've got it in our heads that ",(0,r.yg)("inlineCode",{parentName:"p"},"state")," is the raw ingredients you hand\nto your chef when you ask them to prepare a recipe, let's look at the recipe.\nBoiled down (excuse the pun) a job for loading those patients into the national\nhealth record system might look like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"get('/api/insuranceRegistrations');\npost('/api/patients', { ...someData });\npost('/api/visits', { ...someData });\n")),(0,r.yg)("p",null,"We're telling our chef to take those raw ingredients (login info for our\nnational health system and a chunk of information about a newly registered\npatient) and do the following:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Find out whether this person already has a national health insurance number"),(0,r.yg)("li",{parentName:"ol"},"Add this person to the patient registry (making use of some insurance data\nfrom step 1)"),(0,r.yg)("li",{parentName:"ol"},"Add a visit record with information about this initial visit (making use of\npatient registry data from step 2)")),(0,r.yg)("p",null,"When all of this is done, we'll not only have a new patient and visit logged in\nthe national health registry, but we'll also return a final ",(0,r.yg)("inlineCode",{parentName:"p"},"state")," object with\ninformation about what we've done that can be used in subsequent jobs. Imagine\nthat we want to make a cash transfer to this patient so that they can take a cab\nto the next visit\u2014we might create a job with the Mpesa adaptor that takes the\nfinal state of this first job as its ",(0,r.yg)("em",{parentName:"p"},"initial state"),". In this way, jobs are\ncomposable."),(0,r.yg)("p",null,'But what about the complexity inside our job\u2014in order to complete step 2, we\nneed some data from the insurance registry and we only get that data in step 1.\nCrucially, each operation (again, think "step" in a recipe) takes state and\nreturns state. In effect, the OpenFn execution pipeline simply calls all of your\naction methods ',(0,r.yg)("em",{parentName:"p"},"with state"),", passing it along from one operation to the next,\nwaiting for each to finish and using the output from the first as the input for\nthe second."),(0,r.yg)("p",null,"While you may write your ",(0,r.yg)("inlineCode",{parentName:"p"},"get"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"post"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"post")," job as it's show above, the way\nit's handled by OpenFn is actually more like:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"return get('/api/insurance', { ...useDataFromState })(state)\n  .then(state2 => post('/api/patients', { ...useDataFromState2 })(state2))\n  .then(state3 => post('/api/visits', { ...useDataFromState3 })(state3));\n")),(0,r.yg)("p",null,"Each of these operations returns a function which ",(0,r.yg)("em",{parentName:"p"},"takes state")," and returns\nstate. This means that ",(0,r.yg)("em",{parentName:"p"},"within")," a job, you are essentially modifying ",(0,r.yg)("inlineCode",{parentName:"p"},"state"),",\ncreating/manipulating records in external systems, and returning ",(0,r.yg)("inlineCode",{parentName:"p"},"state"),"."),(0,r.yg)("p",null,"It opens up a really interesting world of possibility for data manipulation,\ncleaning, or transformation. Consider what we might do ",(0,r.yg)("em",{parentName:"p"},"after")," we get data from\nthe insurance registry but ",(0,r.yg)("em",{parentName:"p"},"before")," we create that patient in the national\npatient registry:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"get('/api/insuranceRegistrations');\nfn(state => {\n  console.log(state.data); // let's look at the response from the insurance API.\n  state.data.people.filter(p => p.HasActiveInsurance); // and modify the payload to only retain those with active insurance\n  return state; // before returning state for our create patients operation.\n});\npost('/api/patients', { ...someData });\npost('/api/visits', { ...someData });\n")),(0,r.yg)("p",null,"We might even need to do some manipulation ",(0,r.yg)("em",{parentName:"p"},"before")," we send a ",(0,r.yg)("inlineCode",{parentName:"p"},"get")," request to\nthe insurance registry. That's no problem:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"fn(state => {\n  state.data.registrationType = state.data.age > 18 ? 'Adult' : 'Minor';\n  return state; // before returning state for our create patients operation.\n});\nget('/api/insuranceRegistrations', {\n  query: { type: dataValue('registrationType') },\n});\nfn(state => {\n  state.data.people.filter(p => p.HasActiveInsurance);\n  return state;\n});\npost('/api/patients', { ...someData });\npost('/api/visits', { ...someData });\n")),(0,r.yg)("p",null,"Here, we've added a step to modify the initial ",(0,r.yg)("inlineCode",{parentName:"p"},"state")," before we send that first\n",(0,r.yg)("inlineCode",{parentName:"p"},"get")," request to the insurance API. We determine if the new patient is a minor,\nand then use that newly calculated data to apply a query to the insurance API\nrequest."),(0,r.yg)("p",null,"Using ",(0,r.yg)("inlineCode",{parentName:"p"},"fn(state => state)")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"alterState(state => state})")," is incredibly\nuseful, because it allows us to separate our data manipulation, calculation, and\nraw Javascript (which will be harder for low-tech users to understand) from our\nexternal actions. Let's explore that some more."),(0,r.yg)("h2",{id:"keeping-external-actions-clean"},"Keeping external actions clean"),(0,r.yg)("p",null,"Inside each operation we could do some data manipulation... all of these\noperations, across the many different language packages, allow for inline data\nmanipulation like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"get('/api/insuranceRegistrations', {\n  query: state => {\n    console.log(\"I'm doing some fancy stuff here.\");\n    return { type: state.data.age > 18 ? 'Adult' : 'Minor' };\n  },\n});\npost('/api/patients', {\n  body: {\n    name: state => {\n      return `${state.data.firstName}${state.data.lastName}`;\n    },\n  },\n});\n")),(0,r.yg)("p",null,"But if you're interacting with both technical and non-technical users, it makes\nfor harder to read jobs. Consider the following instead:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"// Perform calculations...\nfn(state => {\n  // Create several new calculated attributes...\n  state.data = {\n    ...state.data,\n    type: state.data.age > 18 ? 'Adult' : 'Minor',\n    fullName: `${state.data.firstName}${state.data.lastName}`,\n  };\n\n  return state;\n});\n\n// Get insurance data...\nget('/api/insuranceRegistrations', { query: { type: dataValue('type') } });\n\n// Create new patient...\npost('/api/patients', { body: { name: dataValue('fullName') } });\n")),(0,r.yg)("p",null,"Since we often have non-developers creating the external operations like ",(0,r.yg)("inlineCode",{parentName:"p"},"get"),"\nand ",(0,r.yg)("inlineCode",{parentName:"p"},"post"),' above, this pattern makes our handoff easier. The business analyst\ncan say "I need to have a registration ',(0,r.yg)("inlineCode",{parentName:"p"},"type"),' field available for use when\nquerying the insurance registry." A developer might respond, "Great! How do you\nwant to calculate it... I\'ve got all of Javascript at my fingertips." That dev\ncan then make as many API calls as they\'d like, perform as many\n',(0,r.yg)("inlineCode",{parentName:"p"},"map.reduce(...)")," calls as their heart desires to complete that calculation...\nso long as they make sure the hand off ",(0,r.yg)("inlineCode",{parentName:"p"},"state")," to the business analyst's\noperation with a valid ",(0,r.yg)("inlineCode",{parentName:"p"},"state.data.type")," attribute."),(0,r.yg)("p",null,"A final benefit of this approach is that it becomes much easier to generate job\nscripts from Google Sheets. Our implementation team frequently works with\nnon-technical clients to generate field maps that look like this:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Path to Source Data"),(0,r.yg)("th",{parentName:"tr",align:null},"Destination Field"),(0,r.yg)("th",{parentName:"tr",align:"right"},"Auto-generated syntax (using concat)"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"patient.fullName"),(0,r.yg)("td",{parentName:"tr",align:null},"name"),(0,r.yg)("td",{parentName:"tr",align:"right"},"field('name', dataValue('patient.fullName')),")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"patient.age"),(0,r.yg)("td",{parentName:"tr",align:null},"age"),(0,r.yg)("td",{parentName:"tr",align:"right"},"field('age', dataValue('patient.age')),")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"???"),(0,r.yg)("td",{parentName:"tr",align:null},"type"),(0,r.yg)("td",{parentName:"tr",align:"right"},"plz help us calculate 'type' based on x, y, z")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"patient.sex"),(0,r.yg)("td",{parentName:"tr",align:null},"gender"),(0,r.yg)("td",{parentName:"tr",align:"right"},"field('gender', dataValue('patient.sex')),")))),(0,r.yg)("p",null,"We can then copy and paste the syntax generated in that final column directly\ninto OpenFn and update the bits that need some sort of custom code, writing an\n",(0,r.yg)("inlineCode",{parentName:"p"},"fn(state)")," block or an ",(0,r.yg)("inlineCode",{parentName:"p"},"alterState(state)")," block before the external action."),(0,r.yg)("h2",{id:"wrapping-up"},"Wrapping up"),(0,r.yg)("p",null,"Some key takeaways here:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Jobs start and end with ",(0,r.yg)("inlineCode",{parentName:"p"},"state")," \u2014 some raw ingredients that will be used in a\nrecipe.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Jobs are lists of ",(0,r.yg)("inlineCode",{parentName:"p"},"operations")," \u2014 steps in a recipe that ",(0,r.yg)("em",{parentName:"p"},"each")," take ",(0,r.yg)("inlineCode",{parentName:"p"},"state"),",\n",(0,r.yg)("em",{parentName:"p"},"do some stuff"),", and then return ",(0,r.yg)("inlineCode",{parentName:"p"},"state"),".")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"As you move through the steps in a job, you are modifying ",(0,r.yg)("inlineCode",{parentName:"p"},"state"),". Each\nsubsequent step begins with the final state from the previous step.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"It may be useful to keep all your custom Javascript data cleaning,\nmanipulation, etc., in a separate operation (e.g., ",(0,r.yg)("inlineCode",{parentName:"p"},"fn(state)")," or\n",(0,r.yg)("inlineCode",{parentName:"p"},"alterState(state)"),") so that your external actions are clean and easy to\nfollow."))),(0,r.yg)("p",null,"Finally, taking a close look at how developers write those ",(0,r.yg)("inlineCode",{parentName:"p"},"fn(state)")," steps\ntells us a lot about what the job execution pipeline is really doing:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'// here, "fn" is a function that takes state and returns state\nfn(state => {\n  console.log("I\'m doing some cool stuff.");\n  //  I might create some new attribute...\n  state.myNewThing = true;\n\n  // And ALWAYS return state for the next operation to use...\n  return state;\n});\n')),(0,r.yg)("p",null,"I hope this gives you sense of how I think about structuring jobs and building\ndata pipelines or automation flows on OpenFn. We recognize that this stuff is\ncomplex, and are pushing our new documentation regularly, so please do get in\ntouch if you think there are ways we could improve this type of\nwalk-through/helper article."),(0,r.yg)("p",null,"Happy integrating,"),(0,r.yg)("p",null,"Taylor"))}d.isMDXComponent=!0},15680:(e,t,a)=>{a.d(t,{xA:()=>g,yg:()=>h});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},g=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),u=p(a),y=r,h=u["".concat(l,".").concat(y)]||u[y]||d[y]||i;return a?n.createElement(h,o(o({ref:t},g),{},{components:a})):n.createElement(h,o({ref:t},g))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"}}]);