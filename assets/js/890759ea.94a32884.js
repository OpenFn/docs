"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[51725],{28453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>o});var t=n(96540);const r={},i=t.createContext(r);function s(e){const a=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:a},e.children)}},65229:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"library/jobs/auto/create-if-proposal","title":"Create/update records if...","description":"\ud83d\udcdc This job is an official example from OpenFn.","source":"@site/adaptors/library/jobs/auto/create-if-proposal.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/create-if-proposal","permalink":"/adaptors/library/jobs/auto/create-if-proposal","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Create/update records if...","sidebar_label":"\ud83d\udcdc Create/update records if...","id":"create-if-proposal","keywords":["library","job","expression","salesforce","createIf","dataValue","field","fields","relationship","upsertIf"]},"sidebar":"adaptors","previous":{"title":"\ud83d\udcdc Concat fields with nulls","permalink":"/adaptors/library/jobs/auto/concatenate-many-fields-with-nulls"},"next":{"title":"\ud83d\udcdc Create SMS linked to contact","permalink":"/adaptors/library/jobs/auto/Create-SMS-Linked-to-Contact-in-SF"}}');var r=n(74848),i=n(28453);const s={title:"Create/update records if...",sidebar_label:"\ud83d\udcdc Create/update records if...",id:"create-if-proposal",keywords:["library","job","expression","salesforce","createIf","dataValue","field","fields","relationship","upsertIf"]},o=void 0,l={},c=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function d(e){const a={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.p,{children:["\ud83d\udcdc ",(0,r.jsx)("em",{children:"This job is an official example from OpenFn."})]}),"\n",(0,r.jsx)(a.h2,{id:"metadata",children:"Metadata"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Name: Create/update records if..."}),"\n",(0,r.jsxs)(a.li,{children:["Adaptor: ",(0,r.jsx)(a.a,{href:"https://www.github.com/openfn/language-salesforce",children:(0,r.jsx)(a.code,{children:"@openfn/language-salesforce"})})]}),"\n",(0,r.jsxs)(a.li,{children:["Adaptor Version: ",(0,r.jsx)(a.a,{href:"https://www.github.com/openfn/language-salesforce/releases/tag/v2.1.0",children:(0,r.jsx)(a.code,{children:"v2.1.0"})})]}),"\n",(0,r.jsx)(a.li,{children:"Created date unknown"}),"\n",(0,r.jsx)(a.li,{children:"Updated date unknown"}),"\n",(0,r.jsxs)(a.li,{children:["Score: ",(0,r.jsx)("b",{children:"100"})," (an ",(0,r.jsx)(a.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"createIf"}),", ",(0,r.jsx)(a.code,{children:"dataValue"}),", ",(0,r.jsx)(a.code,{children:"field"}),", ",(0,r.jsx)(a.code,{children:"fields"}),", ",(0,r.jsx)(a.code,{children:"relationship"}),", ",(0,r.jsx)(a.code,{children:"upsertIf"})]}),"\n",(0,r.jsx)(a.h2,{id:"expression",children:"Expression"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-js",children:"// Using upsertIf and createIf we can conditionally create or update records if\n// some condition in the source data is met.\n\nupsertIf(\n  // a path which resolves to true/false\n  dataValue('form.legal.allowedToSync'), \n  'Patient__c',\n  'Patient_ID__c',\n  fields(\n    field('Name__c', dataValue('form.name')),\n    field('Patient_ID__c', dataValue('form.identification.govId'))\n  )\n);\n\ncreateIf(\n  // or a function which returns true/false\n  state => state.data.form.completedVisit === 'yes',\n  'Visit__c',\n  fields(\n    field('Date__c', dataValue('form.visit.visit_date')),\n    field('Type__c', 'checkup'),\n    relationship(\n      'Patient__r',\n      'Patient_ID__c',\n      dataValue('form.identification.govId')\n    )\n  )\n);\n\n"})})]})}function f(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);