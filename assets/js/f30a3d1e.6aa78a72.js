"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[49440],{5348:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"library/jobs/auto/getKoboData","title":"Extract Kobo data from API to send to OpenFn Inbox","description":"\ud83d\udcdc This job is an official example from OpenFn.","source":"@site/adaptors/library/jobs/auto/getKoboData.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/getKoboData","permalink":"/adaptors/library/jobs/auto/getKoboData","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Extract Kobo data from API to send to OpenFn Inbox","sidebar_label":"\ud83d\udcdc Extract Kobo data from API to send to OpenFn Inbox","id":"getKoboData","keywords":["library","job","expression","http","dataPath","each","get","map","post"]},"sidebar":"adaptors","previous":{"title":"Configuration","permalink":"/adaptors/packages/http-configuration-schema"},"next":{"title":"\ud83d\udcdc Using async and array.map","permalink":"/adaptors/library/jobs/auto/async-and-array-dot-map"}}');var o=t(74848),s=t(28453);const r={title:"Extract Kobo data from API to send to OpenFn Inbox",sidebar_label:"\ud83d\udcdc Extract Kobo data from API to send to OpenFn Inbox",id:"getKoboData",keywords:["library","job","expression","http","dataPath","each","get","map","post"]},i=void 0,d={},c=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["\ud83d\udcdc ",(0,o.jsx)("em",{children:"This job is an official example from OpenFn."})]}),"\n",(0,o.jsx)(n.h2,{id:"metadata",children:"Metadata"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Name: Extract Kobo data from API to send to OpenFn Inbox"}),"\n",(0,o.jsxs)(n.li,{children:["Adaptor: ",(0,o.jsx)(n.a,{href:"https://www.github.com/openfn/language-http",children:(0,o.jsx)(n.code,{children:"@openfn/language-http"})})]}),"\n",(0,o.jsxs)(n.li,{children:["Adaptor Version: ",(0,o.jsx)(n.a,{href:"https://www.github.com/openfn/language-http/releases/tag/v3.1.7",children:(0,o.jsx)(n.code,{children:"v3.1.7"})})]}),"\n",(0,o.jsx)(n.li,{children:"Created date unknown"}),"\n",(0,o.jsx)(n.li,{children:"Updated date unknown"}),"\n",(0,o.jsxs)(n.li,{children:["Score: ",(0,o.jsx)("b",{children:"100"})," (an ",(0,o.jsx)(n.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"dataPath"}),", ",(0,o.jsx)(n.code,{children:"each"}),", ",(0,o.jsx)(n.code,{children:"get"}),", ",(0,o.jsx)(n.code,{children:"map"}),", ",(0,o.jsx)(n.code,{children:"post"})]}),"\n",(0,o.jsx)(n.h2,{id:"expression",children:"Expression"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"//Sample job to get Kobo data and post back to OpenFn Inbox\nfn(state => {\n  console.log(`Started at: ${new Date().toISOString()}`);\n  state.submissions = [];\n  state.data = {\n    surveys: [\n      // =========================================================================\n      //== TODO: Specify new forms to fetch here, including the Kobo form id, tag, name, and owner ==//\n      { id: 'aijj9FSpuCzMTRnMPGike8', tag: 'nrgt_historical', name: 'NRGT Makira 2017 - Test OpenFn', owner: 'bns' }, // example\n      //consider listing multiple forms\n      // =========================================================================\n     \n    ].map(survey => ({\n      formId: survey.id,\n      tag: survey.tag,\n      name: survey.name, \n      owner: survey.owner,\n      url: `https://kf.kobotoolbox.org/api/v2/assets/${survey.id}/data/?format=json`,\n    })),\n  };\n  console.log(`Fetching data for ${state.data.surveys.length} surveys.`);\n  return state;\n});\n\neach(dataPath('surveys[*]'), state => {\n  const { url, tag, formId, name, owner } = state.data;\n  return get(url, {}, state => {\n    state.data.submissions = state.data.results.map((submission, i) => {\n      return {\n        i,\n        // Here we append the tags defined above to the Kobo form submission data\n        form: tag,\n        formName: name, \n        formOwner: owner,\n        body: submission,\n      };\n    });\n    const count = state.data.submissions.length;\n    console.log(`Fetched ${count} submissions from ${formId} (${tag}).`);\n    //Once we fetch the data, we want to post each individual Kobo survey\n    //back to the OpenFn inbox to run through the jobs\n    return each(dataPath('submissions[*]'), state => {\n      console.log(`Posting ${state.data.i + 1} of ${count}...`);\n       // =========================================================================\n       //== TODO: replace openfnInboxUrl with your OpenFn Project Inbox URL ====//\n      return post(openfnInboxUrl, { body: state => state.data })(state);\n    })(state);\n    // =========================================================================\n  })(state);\n});\n\nfn(state => {\n  console.log(`Finished at: ${new Date().toISOString()}`);\n  return {\n    data: {\n      message: \"No cursor required. Job fetches all submission for given forms.\"\n    },\n    references: []\n  };\n});\n\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(96540);const o={},s=a.createContext(o);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);