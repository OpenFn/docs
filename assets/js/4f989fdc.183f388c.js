"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[63380],{28453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var t=a(96540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},68011:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"build/jobs","title":"Introduction to Jobs","description":"A job defines the specific series of \\"operations\\" (think: tasks or database","source":"@site/versioned_docs/version-legacy/build/jobs.md","sourceDirName":"build","slug":"/build/jobs","permalink":"/documentation/legacy/build/jobs","draft":false,"unlisted":false,"editUrl":"https://github.com/openfn/docs/edit/main/versioned_docs/version-legacy/build/jobs.md","tags":[],"version":"legacy","frontMatter":{"title":"Introduction to Jobs"},"sidebar":"docs","previous":{"title":"Glossary for Integration","permalink":"/documentation/legacy/getting-started/glossary"},"next":{"title":"Designing a job","permalink":"/documentation/legacy/jobs/job-design-intro"}}');var s=a(74848),i=a(28453);const r={title:"Introduction to Jobs"},o=void 0,l={},d=[{value:"The properties of a job",id:"the-properties-of-a-job",level:2},{value:"Adaptors",id:"adaptors",level:2},{value:"Adaptor Versions",id:"adaptor-versions",level:3},{value:"Upgrading to newer adaptor versions",id:"upgrading-to-newer-adaptor-versions",level:3},{value:"Composing job expressions",id:"composing-job-expressions",level:2},{value:"A basic expression",id:"a-basic-expression",level:3},{value:"dataValue",id:"datavalue",level:3},{value:"An expression with custom Javascript",id:"an-expression-with-custom-javascript",level:3},{value:"Available Javascript Globals",id:"available-javascript-globals",level:2},{value:"Examples of adaptor-specific functions",id:"examples-of-adaptor-specific-functions",level:2},{value:"language-common",id:"language-common",level:3},{value:"each()",id:"each",level:4},{value:"beta.each",id:"betaeach",level:4},{value:"Salesforce",id:"salesforce",level:3},{value:"dhis2",id:"dhis2",level:3},{value:"OpenMRS",id:"openmrs",level:3},{value:"Snippets and samples",id:"snippets-and-samples",level:2},{value:"Job expression (for CommCare to SF)",id:"job-expression-for-commcare-to-sf",level:3},{value:"Accessing the &quot;data array&quot; in Open Data Kit submissions",id:"accessing-the-data-array-in-open-data-kit-submissions",level:3},{value:"ODK to Salesforce: create parent record with many children from parent data",id:"odk-to-salesforce-create-parent-record-with-many-children-from-parent-data",level:3},{value:"Create many child records WITHOUT a repeat group in ODK",id:"create-many-child-records-without-a-repeat-group-in-odk",level:3},{value:"Salesforce: perform an update",id:"salesforce-perform-an-update",level:3},{value:"Salesforce: Set record type using &#39;relationship(...)&#39;",id:"salesforce-set-record-type-using-relationship",level:3},{value:"Salesforce: Set record type using record Type ID",id:"salesforce-set-record-type-using-record-type-id",level:3},{value:"Telerivet: Send SMS based on Salesforce workflow alert",id:"telerivet-send-sms-based-on-salesforce-workflow-alert",level:3},{value:"HTTP: fetch but don&#39;t fail!",id:"http-fetch-but-dont-fail",level:3},{value:"Sample DHIS2 events API job:",id:"sample-dhis2-events-api-job",level:3},{value:"Sample DHIS2 data value sets API job:",id:"sample-dhis2-data-value-sets-api-job",level:3},{value:"sample openMRS expression, creates a person and then a patient",id:"sample-openmrs-expression-creates-a-person-and-then-a-patient",level:3},{value:"merge many values into a child path",id:"merge-many-values-into-a-child-path",level:3},{value:"arrayToString",id:"arraytostring",level:3},{value:"access an image URL from an ODK submission",id:"access-an-image-url-from-an-odk-submission",level:3},{value:"alterState (alter state) to make sure data is in an array",id:"alterstate-alter-state-to-make-sure-data-is-in-an-array",level:3},{value:"Login in to a server with a custom SSL Certificate",id:"login-in-to-a-server-with-a-custom-ssl-certificate",level:3},{value:"Anonymous Functions",id:"anonymous-functions",level:2},{value:"Custom replacer",id:"custom-replacer",level:3},{value:"Custom arrayToString",id:"custom-arraytostring",level:3},{value:"Custom concatenation",id:"custom-concatenation",level:3},{value:"Concatenation of null values",id:"concatenation-of-null-values",level:3},{value:"Custom Nth reference ID",id:"custom-nth-reference-id",level:3},{value:"Convert date string to standard ISO date for Salesforce",id:"convert-date-string-to-standard-iso-date-for-salesforce",level:3},{value:"Use external ID fields for relationships during a bulk load in Salesforce",id:"use-external-id-fields-for-relationships-during-a-bulk-load-in-salesforce",level:3},{value:"Bulk upsert with an external ID in salesforce",id:"bulk-upsert-with-an-external-id-in-salesforce",level:3}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:'A job defines the specific series of "operations" (think: tasks or database\nactions) to be performed when a triggering message is received (even-based),\nanother run finishes (flow- or catch-based) or a pre-scheduled (and recurring)\ntime is reached.'}),"\n",(0,s.jsx)(n.h2,{id:"the-properties-of-a-job",children:"The properties of a job"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"})," - a human-readable name describing the series of operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Project"})," - the project the job belongs to"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Trigger"})," - the trigger that is used to automatically initiate a run of the\njob"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Adaptor"})," - the adaptor that is used to provide tool-specific functionality\nfor this job (e.g., ",(0,s.jsx)(n.code,{children:"language-dhis2"})," or ",(0,s.jsx)(n.code,{children:"language-commcare"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Auto-process?"})," - a true/false switch which controls whether the trigger\nshould be used to automatically run this job when its criteria are met"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Expression"}),' - the job "script" itself; a sequence of operations']}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"adaptors",children:"Adaptors"}),"\n",(0,s.jsxs)(n.p,{children:["We've got a whole section on creating new\n",(0,s.jsx)(n.a,{href:"/adaptors",children:"Adaptors"}),", but the critical thing to be aware of\nwhen writing a job is that you've got to choose an ",(0,s.jsx)(n.strong,{children:"adaptor"}),", and an ",(0,s.jsx)(n.strong,{children:"adaptor\nversion"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["All of the discussion below of helper functions like ",(0,s.jsx)(n.code,{children:"create"})," or ",(0,s.jsx)(n.code,{children:"findPatient"}),"\nrequires some understanding of adaptors. When you run a job, you're borrowing a\nlayer of functionality that's been built to connect with some specific API, type\nof API, or database."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, ",(0,s.jsx)(n.code,{children:"create"})," means one thing in ",(0,s.jsx)(n.code,{children:"language-salesforce"})," and another thing\nentirely in ",(0,s.jsx)(n.code,{children:"language-dhis2"}),". For this reason, before you can begin writing a\njob you have to decide which ",(0,s.jsx)(n.code,{children:"adaptor"})," to work with."]}),"\n",(0,s.jsx)(n.h3,{id:"adaptor-versions",children:"Adaptor Versions"}),"\n",(0,s.jsx)(n.p,{children:'Adaptors change over time. They\'re open source, and we encourage as much\ncontribution as possible\u2014releasing new versions for use on OpenFn.org as soon as\nthey pass our security reviews. New features may be added and bugs may be fixed,\nbut in order to make sure that an existing integration is not broken, we\nrecommend that you select a specific version (rather than using the\n"auto-upgrade" feature) when you choose an adaptor. The highest released version\nis the default choice here.'}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"first 4 lines"})," in the log of any run on OpenFn will tell you what adaptor\nyou're running. (As well as the version of core and NodeJs) This is incredibly\nimportant, particularly if you're trying to troubleshoot jobs in various\nenvironments (like your own shell, OpenFn.org, OpenFn/microservice, etc.)."]})}),"\n",(0,s.jsxs)(n.p,{children:["Pay careful attention to which ",(0,s.jsx)(n.code,{children:"version"})," you're using to write a job. Consider\nthe following run logs:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u25f2 \u25f1  @openfn/core#v1.3.12 (Node.js v12.20.1)  \u2502\n\u2502 \u25f3 \u25f0             @openfn/language-http#v2.4.15 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n...more logs here...\n\nFinished.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that here, OpenFn/core version ",(0,s.jsx)(n.code,{children:"1.3.12"})," is running on Node.js ",(0,s.jsx)(n.code,{children:"12.20.1"})," and\nusing ",(0,s.jsx)(n.code,{children:"@openfn/language-http#v2.4.15"})," which might have very different helper\nfunctions from ",(0,s.jsx)(n.code,{children:"@openfn/language-http#v3.1.5"})]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"/adaptors#install-on-platform-via-npm",children:"the npm section"}),"\non the adaptors docs page to learn how to install an adaptor from ",(0,s.jsx)(n.code,{children:"npm"})," while\nusing ",(0,s.jsx)(n.code,{children:"platform"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"upgrading-to-newer-adaptor-versions",children:"Upgrading to newer adaptor versions"}),"\n",(0,s.jsxs)(n.p,{children:["While it may be beneficial to upgrade as part of your routine maintenance, these\nupgrades should be carefully tested. Most often, customers upgrade to a new\nadaptor version for an existing job when they are making business-drives changes\nto that job. Some business-driven changes may actually ",(0,s.jsx)(n.em,{children:"require"})," upgrading the\nversion in order to use a new feature from the adaptor. Even if those changes\ndon't require and upgrade, if the technical team must spend time testing\njob-specific changes anyway, it may be an ideal opportunity to test also test an\nupgrade."]}),"\n",(0,s.jsxs)(n.p,{children:["Adaptors follow ",(0,s.jsx)(n.a,{href:"https://semver.org/",children:"SEMVER"})," so you can be reasonably assured\nthat upgrading from ",(0,s.jsx)(n.code,{children:"x.1.z"})," to ",(0,s.jsx)(n.code,{children:"x.2.z"})," will not lead to existing job code\nfailing, but an upgrade from ",(0,s.jsx)(n.code,{children:"3.y.z"})," to ",(0,s.jsx)(n.code,{children:"4.y.z"})," may\u2014in SEMVER ",(0,s.jsx)(n.em,{children:"major"})," upgrades\n(those that change the first number in the ",(0,s.jsx)(n.code,{children:"x.y.z"}),' version number) have\n"breaking" or "non-backwards compatible" changes.']}),"\n",(0,s.jsx)(n.h2,{id:"composing-job-expressions",children:"Composing job expressions"}),"\n",(0,s.jsxs)(n.p,{children:["In most cases, a job expression is a series of ",(0,s.jsx)(n.code,{children:"create"})," or ",(0,s.jsx)(n.code,{children:"upsert"})," actions that\nare run after a message arrives, using data from that message. It could look\nlike this:"]}),"\n",(0,s.jsx)(n.h3,{id:"a-basic-expression",children:"A basic expression"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"create(\n  'Patient__c',\n  fields(\n    field('Name', dataValue('form.surname')),\n    field('Other Names', dataValue('form.firstName')),\n    field('Age__c', dataValue('form.ageInYears')),\n    field('Is_Enrolled__c', true),\n    field('Enrollment_Status__c', 3)\n  )\n);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["That would create a new ",(0,s.jsx)(n.code,{children:"Patient__c"})," in some other system. The patient's ",(0,s.jsx)(n.code,{children:"Name"}),"\nwill be determined by the triggering message (the value inside ",(0,s.jsx)(n.code,{children:"form.surname"}),",\nspecifically) and the patient's ",(0,s.jsx)(n.code,{children:"Is_Enrolled__c"})," will ",(0,s.jsx)(n.em,{children:"always"})," be ",(0,s.jsx)(n.code,{children:"true"}),". See\nhow we hard coded it?"]}),"\n",(0,s.jsxs)(n.p,{children:["What you see above is OpenFn's own syntax, and you've got access to dozens of\ncommon \"helper functions\" like ",(0,s.jsx)(n.code,{children:"dataValue(path)"})," and destination specific\nfunctions like ",(0,s.jsx)(n.code,{children:"create(object,attributes)"}),". While most cases are covered\nout-of-the-box, jobs are ",(0,s.jsx)(n.strong,{children:"evaluated as Javascript"}),". This means that you can\nwrite your own custom, anonymous functions to do whatever your heart desires:"]}),"\n",(0,s.jsx)(n.h3,{id:"datavalue",children:"dataValue"}),"\n",(0,s.jsxs)(n.p,{children:['The most commonly used "helper function" is ',(0,s.jsx)(n.code,{children:"dataValue(...)"}),". This function\ntakes a single argument\u2014the ",(0,s.jsx)(n.em,{children:"path"})," to some data that you're trying to access\ninside the message that has triggered a particular run. In the above example,\nyou'll notice that ",(0,s.jsx)(n.code,{children:"Is_Enrolled__c"})," is ",(0,s.jsx)(n.em,{children:"always"})," set to ",(0,s.jsx)(n.code,{children:"true"}),", but ",(0,s.jsx)(n.code,{children:"Name"})," will\nchange for each message that triggers the running of this job. It's set to\n",(0,s.jsx)(n.code,{children:"dataValue('form.surname')"})," which means it will set ",(0,s.jsx)(n.code,{children:"Name"})," to whatever value is\npresent at ",(0,s.jsx)(n.code,{children:"state.data.form.surname"})," for the triggering message. It might be Bob\nfor one message, and Alice for another."]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["Note that for message-triggered jobs, ",(0,s.jsx)(n.code,{children:"state"})," will always have it's ",(0,s.jsx)(n.code,{children:"data"})," key\n(i.e., ",(0,s.jsx)(n.code,{children:"state.data"}),") set to the body of the triggering message (aka HTTP\nrequest)."]}),(0,s.jsxs)(n.p,{children:["I.e., ",(0,s.jsx)(n.code,{children:"dataValue('some.path') === state.data.some.path"}),", as evaluated at the\ntime that the operation (",(0,s.jsx)(n.code,{children:"create"})," in the above expression) is executed."]})]}),"\n",(0,s.jsx)(n.h3,{id:"an-expression-with-custom-javascript",children:"An expression with custom Javascript"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"create(\n  'Patient__c',\n  fields(\n    field('Name', state => {\n      console.log('Manipulate state to get your desired output.');\n      return Array.apply(null, state.data.form.names).join(', ');\n    }),\n    field('Age__c', 7)\n  )\n);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here, the patient's name will be a comma separated concatenation of all the\nvalues in the ",(0,s.jsx)(n.code,{children:"patient_names"})," array from our source message."]}),"\n",(0,s.jsx)(n.h2,{id:"available-javascript-globals",children:"Available Javascript Globals"}),"\n",(0,s.jsx)(n.p,{children:"For security reasons, users start with access to the following standard\nJavascript globals, and can request more by opening an issue on GitHub:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",children:(0,s.jsx)(n.code,{children:"Array"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://nodejs.org/api/console.html",children:(0,s.jsx)(n.code,{children:"console"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",children:(0,s.jsx)(n.code,{children:"JSON"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",children:(0,s.jsx)(n.code,{children:"Number"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",children:(0,s.jsx)(n.code,{children:"Promise"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",children:(0,s.jsx)(n.code,{children:"String"})})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples-of-adaptor-specific-functions",children:"Examples of adaptor-specific functions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"N.B.: This is just a sample."})," There are lots more available in the\nlanguage-packs."]}),"\n",(0,s.jsx)(n.h3,{id:"language-common",children:"language-common"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"field('destination_field_name__c', 'value')"})," Returns a key, value pair in an\narray.\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L248",children:"(source)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fields(list_of_fields)"})," zips key value pairs into an object.\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L258",children:"(source)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dataValue('JSON_path')"})," Picks out a single value from source data.\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L71",children:"(source)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"each(JSON_path, operation(...))"})," Scopes an array of data based on a JSONPath\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L194",children:"(source)"}),".\nSee beta.each when using multiple each()'s in an expression."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'each(merge(dataPath("CHILD_ARRAY[*]"),fields(field("metaId", dataValue("*meta-instance-id*")),field("parentId", lastReferenceValue("id")))), create(...))'}),"\nmerges data into an array then creates for each item in the array\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L272",children:"(source)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"lastReferenceValue('id')"})," gets the sfID of the last item created\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L96-L100",children:"(source)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"function(state){return state.references[state.references.length-N].id})"})," gets\nthe sfID of the nth item created"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"each",children:"each()"}),"\n",(0,s.jsxs)(n.p,{children:["Read more about each here: ",(0,s.jsx)(n.a,{href:"/documentation/legacy/jobs/each",children:"The each(...) operation"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"each(\n  dataPath('csvData[*]'),\n  upsertTEI(\n    'aX5hD4qUpRW', //piirs uid\n    {\n      trackedEntityType: 'bsDL4dvl2ni',\n      orgUnit: dataValue('OrgUnit'),\n      attributes: [\n        {\n          attribute: 'aX5hD4qUpRW',\n          value: dataValue('aX5hD4qUpRW'),\n        },\n        {\n          attribute: 'MxQPuS9G7hh',\n          value: dataValue('MxQPuS9G7hh'),\n        },\n      ],\n    },\n    { strict: false }\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"betaeach",children:"beta.each"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"beta.each(JSON_path, operation(...))\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Scopes an array of data based on a JSONPath but then returns to the state it was\ngiven upon completion\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-common/blob/master/src/beta.js#L44",children:"(source)"}),".\nThis is necessary if you string multiple ",(0,s.jsx)(n.code,{children:"each(...)"})," functions together in-line\nin the same expression. (E.g., Given data which has multiple separate 'repeat\ngroups' in a form which are rendered as arrays, you want to create new records\nfor each item inside the first repeat group, then ",(0,s.jsx)(n.em,{children:"RETURN TO THE TOP LEVEL"})," of\nthe data, and then create new records for each item in the second repeat group.\nUsing ",(0,s.jsx)(n.code,{children:"beta.each(...)"})," lets you enter the first array, create your records, then\nreturn to the top level and be able to enter the second array."]}),"\n",(0,s.jsx)(n.h3,{id:"salesforce",children:"Salesforce"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'create("DEST_OBJECT_NAME__C", fields(...))'})," Create a new object. Takes 2\nparameters: An object and attributes.\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L42-L63",children:"(source)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'upsert("DEST_OBJECT_NAME__C", "DEST_OBJECT_EXTERNAL_ID__C", fields(...))'}),"\nCreates or updates an object. Takes 3 paraneters: An object, an ID field and\nattributes.\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L65-L80",children:"(source)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'relationship("DEST_RELATIONSHIP_NAME__r", "EXTERNAL_ID_ON_RELATED_OBJECT__C", "SOURCE_DATA_OR_VALUE")'}),"\nAdds a lookup or 'dome insert' to a record.\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-salesforce/blob/master/src/sourceHelpers.js#L21-L40",children:"(source)"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"dhis2",children:"dhis2"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"event(...)"})," Creates an event.\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-dhis2/blob/master/src/Adaptor.js#L31-L60",children:"(source)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dataValueSet(...)"})," Send data values using the dataValueSets resource\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-dhis2/blob/master/src/Adaptor.js#L62-L82",children:"(source)"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"openmrs",children:"OpenMRS"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"person(...)"})," Takes a payload of data to create a person\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-openmrs/blob/master/src/Adaptor.js#L31-L60",children:"(source)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"patient(...)"})," Takes a payload of data to create a patient\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-openmrs/blob/master/src/Adaptor.js#L62-L90",children:"(source)"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"snippets-and-samples",children:"Snippets and samples"}),"\n",(0,s.jsx)(n.p,{children:"Below you can find some examples of block code for different functions and data\nhandling contexts."}),"\n",(0,s.jsx)(n.h3,{id:"job-expression-for-commcare-to-sf",children:"Job expression (for CommCare to SF)"}),"\n",(0,s.jsxs)(n.p,{children:["The following job expression will take a matching receipt and use data from that\nreceipt to upsert a ",(0,s.jsx)(n.code,{children:"Patient__c"})," record in Salesforce and create multiple new\n",(0,s.jsx)(n.code,{children:"Patient_Visit__c"})," (child to Patient) records."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"upsert(\n  'Patient__c',\n  'Patient_Id__c',\n  fields(\n    field('Patient_Id__c', dataValue('form.patient_ID')),\n    relationship('Nurse__r', 'Nurse_ID_code__c', dataValue('form.staff_id')),\n    field('Phone_Number__c', dataValue('form.mobile_phone'))\n  )\n),\n  each(\n    join('$.data.form.visits[*]', '$.references[0].id', 'Id'),\n    create(\n      'Visit__c',\n      fields(\n        field('Patient__c', dataValue('Id')),\n        field('Date__c', dataValue('date')),\n        field('Reason__c', dataValue('why_did_they_see_doctor'))\n      )\n    )\n  );\n"})}),"\n",(0,s.jsx)(n.h3,{id:"accessing-the-data-array-in-open-data-kit-submissions",children:'Accessing the "data array" in Open Data Kit submissions'}),"\n",(0,s.jsx)(n.p,{children:'Notice how we use "each" to get data from each item inside the "data array" in\nODK.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"each(\n  '$.data.data[*]',\n  create(\n    'ODK_Submission__c',\n    fields(\n      field('Site_School_ID_Number__c', dataValue('school')),\n      field('Date_Completed__c', dataValue('date')),\n      field('comments__c', dataValue('comments')),\n      field('ODK_Key__c', dataValue('*meta-instance-id*'))\n    )\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"odk-to-salesforce-create-parent-record-with-many-children-from-parent-data",children:"ODK to Salesforce: create parent record with many children from parent data"}),"\n",(0,s.jsxs)(n.p,{children:["Here, the user brings ",(0,s.jsx)(n.code,{children:"time_end"})," and ",(0,s.jsx)(n.code,{children:"parentId"})," onto the line items from the\nparent object."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"each(\n  dataPath('data[*]'),\n  combine(\n    create(\n      'transaction__c',\n      fields(\n        field('Transaction_Date__c', dataValue('today')),\n        relationship(\n          'Person_Responsible__r',\n          'Staff_ID_Code__c',\n          dataValue('person_code')\n        ),\n        field('metainstanceid__c', dataValue('*meta-instance-id*'))\n      )\n    ),\n    each(\n      merge(\n        dataPath('line_items[*]'),\n        fields(\n          field('end', dataValue('time_end')),\n          field('parentId', lastReferenceValue('id'))\n        )\n      ),\n      create(\n        'line_item__c',\n        fields(\n          field('transaction__c', dataValue('parentId')),\n          field('Barcode__c', dataValue('product_barcode')),\n          field('ODK_Form_Completed__c', dataValue('end'))\n        )\n      )\n    )\n  )\n);\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["NB - there was a known bug with the ",(0,s.jsx)(n.code,{children:"combine"})," function which has been\nresolved. ",(0,s.jsx)(n.code,{children:"combine"})," can be used to combine two operations into one and is\ncommonly used to run multiple ",(0,s.jsx)(n.code,{children:"create"}),"'s inside an ",(0,s.jsx)(n.code,{children:"each(path, operation)"}),".\nThe source code for combine can be found here:\n",(0,s.jsx)(n.a,{href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L204-L222",children:"language-common: combine"})]})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"create-many-child-records-without-a-repeat-group-in-odk",children:"Create many child records WITHOUT a repeat group in ODK"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"beta.each(\n  '$.data.data[*]',\n  upsert(\n    'Outlet__c',\n    'Outlet_Code__c',\n    fields(\n      field('Outlet_Code__c', dataValue('outlet_code')),\n      field('Location__Latitude__s', dataValue('gps:Latitude')),\n      field('Location__Longitude__s', dataValue('gps:Longitude'))\n    )\n  )\n),\n  beta.each(\n    '$.data.data[*]',\n    upsert(\n      'Outlet_Call__c',\n      'Invoice_Number__c',\n      fields(\n        field('Invoice_Number__c', dataValue('invoice_number')),\n        relationship('Outlet__r', 'Outlet_Code__c', dataValue('outlet_code')),\n        relationship('RecordType', 'name', 'No Call Card'),\n        field('Trip__c', 'a0FN0000008jPue'),\n        relationship(\n          'Sales_Person__r',\n          'Sales_Rep_Code__c',\n          dataValue('sales_rep_code')\n        ),\n        field('Date__c', dataValue('date')),\n        field('Comments__c', dataValue('comments'))\n      )\n    )\n  );\n"})}),"\n",(0,s.jsx)(n.h3,{id:"salesforce-perform-an-update",children:"Salesforce: perform an update"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'update("Patient__c", fields(\n  field("Id", dataValue("pathToSalesforceId")),\n  field("Name__c", dataValue("patient.first_name")),\n  field(...)\n));\n'})}),"\n",(0,s.jsx)(n.h3,{id:"salesforce-set-record-type-using-relationship",children:"Salesforce: Set record type using 'relationship(...)'"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"create(\n  'custom_obj__c',\n  fields(\n    relationship(\n      'RecordType',\n      'name',\n      dataValue('submission_type'),\n      field('name', dataValue('Name'))\n    )\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"salesforce-set-record-type-using-record-type-id",children:"Salesforce: Set record type using record Type ID"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"each(\n  '$.data.data[*]',\n  create(\n    'fancy_object__c',\n    fields(\n      field('RecordTypeId', '012110000008s19'),\n      field('site_size', dataValue('size'))\n    )\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"telerivet-send-sms-based-on-salesforce-workflow-alert",children:"Telerivet: Send SMS based on Salesforce workflow alert"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"send(\n  fields(\n    field(\n      'to_number',\n      dataValue(\n        'Envelope.Body.notifications.Notification.sObject.phone_number__c'\n      )\n    ),\n    field('message_type', 'sms'),\n    field('route_id', ''),\n    field('content', function (state) {\n      return 'Hey there. Your name is '.concat(\n        dataValue('Envelope.Body.notifications.Notification.sObject.name__c')(\n          state\n        ),\n        '.'\n      );\n    })\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"http-fetch-but-dont-fail",children:"HTTP: fetch but don't fail!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// =============\n// We use "fetchWithErrors(...)" so that when the\n// SMS gateway returns an error the run does not "fail".\n// It "succeeds" and then delivers that error message\n// back to Salesforce with the "Update SMS Status" job.\n// =============\nfetchWithErrors({\n  getEndpoint: \'send_to_contact\',\n  query: function (state) {\n    return {\n      msisdn:\n        state.data.Envelope.Body.notifications.Notification.sObject\n          .SMS__Phone_Number__c,\n      message:\n        state.data.Envelope.Body.notifications.Notification.sObject\n          .SMS__Message__c,\n      api_key: \'some-secret-key\',\n    };\n  },\n  externalId: state.data.Envelope.Body.notifications.Notification.sObject.Id,\n  postUrl: \'https://www.openfn.org/inbox/another-secret-key\',\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"sample-dhis2-events-api-job",children:"Sample DHIS2 events API job:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"event(\n  fields(\n    field('program', 'eBAyeGv0exc'),\n    field('orgUnit', 'DiszpKrYNg8'),\n    field('eventDate', dataValue('properties.date')),\n    field('status', 'COMPLETED'),\n    field('storedBy', 'admin'),\n    field('coordinate', {\n      latitude: '59.8',\n      longitude: '10.9',\n    }),\n    field('dataValues', function (state) {\n      return [\n        {\n          dataElement: 'qrur9Dvnyt5',\n          value: dataValue('properties.prop_a')(state),\n        },\n        {\n          dataElement: 'oZg33kd9taw',\n          value: dataValue('properties.prop_b')(state),\n        },\n        {\n          dataElement: 'msodh3rEMJa',\n          value: dataValue('properties.prop_c')(state),\n        },\n      ];\n    })\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sample-dhis2-data-value-sets-api-job",children:"Sample DHIS2 data value sets API job:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"dataValueSet(\n  fields(\n    field('dataSet', 'pBOMPrpg1QX'),\n    field('orgUnit', 'DiszpKrYNg8'),\n    field('period', '201401'),\n    field('completeData', dataValue('date')),\n    field('dataValues', function (state) {\n      return [\n        { dataElement: 'f7n9E0hX8qk', value: dataValue('prop_a')(state) },\n        { dataElement: 'Ix2HsbDMLea', value: dataValue('prop_b')(state) },\n        { dataElement: 'eY5ehpbEsB7', value: dataValue('prop_c')(state) },\n      ];\n    })\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sample-openmrs-expression-creates-a-person-and-then-a-patient",children:"sample openMRS expression, creates a person and then a patient"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"person(\n  fields(\n    field('gender', 'F'),\n    field('names', function (state) {\n      return [\n        {\n          givenName: dataValue('form.first_name')(state),\n          familyName: dataValue('form.last_name')(state),\n        },\n      ];\n    })\n  )\n),\n  patient(\n    fields(\n      field('person', lastReferenceValue('uuid')),\n      field('identifiers', function (state) {\n        return [\n          {\n            identifier: '1234',\n            identifierType: '8d79403a-c2cc-11de-8d13-0010c6dffd0f',\n            location: '8d6c993e-c2cc-11de-8d13-0010c6dffd0f',\n            preferred: true,\n          },\n        ];\n      })\n    )\n  );\n"})}),"\n",(0,s.jsx)(n.h3,{id:"merge-many-values-into-a-child-path",children:"merge many values into a child path"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'each(\n  merge(\n    dataPath("CHILD_ARRAY[*]"),\n    fields(\n      field("metaId", dataValue("*meta-instance-id*")),\n      field("parentId", lastReferenceValue("id"))\n    )\n  ),\n  create(...)\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"arraytostring",children:"arrayToString"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"arrayToString(arr, separator_string);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"access-an-image-url-from-an-odk-submission",children:"access an image URL from an ODK submission"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// In ODK the image URL is inside an image object...\nfield("Photo_URL_text__c", dataValue("image.url")),\n'})}),"\n",(0,s.jsx)(n.h3,{id:"alterstate-alter-state-to-make-sure-data-is-in-an-array",children:"alterState (alter state) to make sure data is in an array"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Here, we make sure CommCare gives us an array to use in each(merge(...), ...)\nfn(state => {\n  const idCards = state.data.form.ID_cards_given_to_vendor;\n  if (!Array.isArray(idCards)) {\n    state.data.form.ID_cards_given_to_vendor = [idCards];\n  }\n  return state;\n});\n\n// Now state has been changed, and we carry on...\neach(\n  merge(\n    dataPath('form.ID_cards_given_to_vendor[*]'),\n    fields(\n      field('Vendor_Id', dataValue('form.ID_vendor')),\n      field('form_finished_time', dataValue('form.meta.timeEnd'))\n    )\n  ),\n  upsert(\n    'Small_Packet__c',\n    'sp_id__c',\n    fields(\n      field('sp_id__c', dataValue('ID_cards_given_to_vendor')),\n      relationship('Vendor__r', 'Badge_Code__c', dataValue('Vendor_Id')),\n      field(\n        'Small_Packet_Distribution_Date__c',\n        dataValue('form_finished_time')\n      )\n    )\n  )\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"login-in-to-a-server-with-a-custom-ssl-certificate",children:"Login in to a server with a custom SSL Certificate"}),"\n",(0,s.jsxs)(n.p,{children:["This snippet describes how you would connect to a secure server ignoring SSL\ncertificate verification. Set ",(0,s.jsx)(n.code,{children:"strictSSL: false"})," in the options argument of the\n",(0,s.jsx)(n.code,{children:"post"})," function in ",(0,s.jsx)(n.code,{children:"language-http"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"post(\n  `${state.configuration.url}/${path}`,\n  {\n    headers: { 'content-type': 'application/json' },\n    body: {\n      email: 'Luka',\n      password: 'somethingSecret',\n    },\n    strictSSL: false,\n  },\n  callback\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"anonymous-functions",children:"Anonymous Functions"}),"\n",(0,s.jsxs)(n.p,{children:["Different to ",(0,s.jsx)(n.a,{href:"#examples-of-adaptor-specific-functions",children:"Named Functions"}),",\nAnonymous functions are generic pieces of javascript which you can write to suit\nyour needs. Here are some examples of these custom functions:"]}),"\n",(0,s.jsx)(n.h3,{id:"custom-replacer",children:"Custom replacer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"field('destination__c', state => {\n  console.log(something);\n  return dataValue('path_to_data')(state).toString().replace('cats', 'dogs');\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:['This will replace all "cats" with "dogs" in the string that lives at\n',(0,s.jsx)(n.code,{children:"path_to_data"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE:"})," The JavaScript ",(0,s.jsx)(n.code,{children:"replace()"})," function only replaces the first instance\nof whatever argument you specify. If you're looking for a way to replace all\ninstances, we suggest you use a regex like we did in the\n",(0,s.jsx)(n.a,{href:"#custom-concatenation-of-null-values",children:"example"})," below."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"custom-arraytostring",children:"Custom arrayToString"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'field("target_specie_list__c", function(state) {\n  return Array.apply(\n    null, sourceValue("$.data.target_specie_list")(state)\n  ).join(\', \')\n}),\n'})}),"\n",(0,s.jsx)(n.p,{children:'It will take an array, and concatenate each item into a string with a ", "\nseparator.'}),"\n",(0,s.jsx)(n.h3,{id:"custom-concatenation",children:"Custom concatenation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"field('ODK_Key__c', function (state) {\n  return dataValue('metaId')(state).concat('(', dataValue('index')(state), ')');\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will concatenate two values."}),"\n",(0,s.jsx)(n.h3,{id:"concatenation-of-null-values",children:"Concatenation of null values"}),"\n",(0,s.jsx)(n.p,{children:"This will concatenate many values, even if one or more are null, writing them to\na field called Main_Office_City_c."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'...\n  field("Main_Office_City__c", function(state) {\n    return arrayToString([\n      dataValue("Main_Office_City_a")(state) === null ? "" : dataValue("Main_Office_City_a")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_b")(state) === null ? "" : dataValue("Main_Office_City_b")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_c")(state) === null ? "" : dataValue("Main_Office_City_c")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_d")(state) === null ? "" : dataValue("Main_Office_City_d")(state).toString().replace(/-/g, " "),\n    ].filter(Boolean), \',\')\n  })\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Notice how this custom function makes use of the ",(0,s.jsx)(n.strong,{children:"regex"})," ",(0,s.jsx)(n.code,{children:"/-/g"})," to ensure\nthat all instances are accounted for (g = global search)."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"custom-nth-reference-id",children:"Custom Nth reference ID"}),"\n",(0,s.jsx)(n.p,{children:"If you ever want to retrieve the FIRST object you created, or the SECOND, or the\nNth, for that matter, a function like this will do the trick."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"field('parent__c', function (state) {\n  return state.references[state.references.length - 1].id;\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:'See how instead of taking the id of the "last" thing that was created in\nSalesforce, you\'re taking the id of the 1st thing, or 2nd thing if you replace\n"length-1" with "length-2".'}),"\n",(0,s.jsx)(n.h3,{id:"convert-date-string-to-standard-iso-date-for-salesforce",children:"Convert date string to standard ISO date for Salesforce"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"field('Payment_Date__c', function (state) {\n  return new Date(dataValue('payment_date')(state)).toISOString();\n});\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"NOTE"}),": The output of this function will always be formatted according to\nGMT time-zone."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"use-external-id-fields-for-relationships-during-a-bulk-load-in-salesforce",children:"Use external ID fields for relationships during a bulk load in Salesforce"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"array.map(item => {\n  return {\n    Patient_Name__c: item.fullName,\n    'Account.Account_External_ID__c': item.account\n    'Clinic__r.Unique_Clinic_Identifier__c': item.clinicId,\n    'RecordType.Name': item.type,\n  };\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"bulk-upsert-with-an-external-id-in-salesforce",children:"Bulk upsert with an external ID in salesforce"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"bulk(\n  'Visit_new__c',\n  'upsert',\n  {\n    extIdField: 'commcare_case_id__c',\n    failOnError: true,\n    allowNoOp: true,\n  },\n  dataValue('patients')\n);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);