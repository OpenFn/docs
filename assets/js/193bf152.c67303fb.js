"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[7684],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(96540);const a={},s=r.createContext(a);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}},93018:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"library/jobs/auto/01a-Create-Registrants-2019-11-19","title":"01a/ Create Registrants","description":"This job was provided by an OpenFn.org user via the job library API.","source":"@site/adaptors/library/jobs/auto/01a-Create-Registrants-2019-11-19.md","sourceDirName":"library/jobs/auto","slug":"/library/jobs/auto/01a-Create-Registrants-2019-11-19","permalink":"/adaptors/library/jobs/auto/01a-Create-Registrants-2019-11-19","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"01a/ Create Registrants","sidebar_label":"01a/ Create Registrants","id":"01a-Create-Registrants-2019-11-19","keywords":["library","job","expression","http","alterState","post","JSON"]},"sidebar":"adaptors","previous":{"title":"01c/ Create person_position record","permalink":"/adaptors/library/jobs/auto/01c-Create-person_position-record-2019-12-13"},"next":{"title":"05b/Update ODK eval form","permalink":"/adaptors/library/jobs/auto/05b-Update-ODK-eval-form-2019-12-19"}}');var a=n(74848),s=n(28453);const o={title:"01a/ Create Registrants",sidebar_label:"01a/ Create Registrants",id:"01a-Create-Registrants-2019-11-19",keywords:["library","job","expression","http","alterState","post","JSON"]},i=void 0,l={},d=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("em",{children:"This job was provided by an OpenFn.org user via the job library API."}),"\n",(0,a.jsx)(t.h2,{id:"metadata",children:"Metadata"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Name: 01a/ Create Registrants"}),"\n",(0,a.jsxs)(t.li,{children:["Adaptor: ",(0,a.jsx)(t.a,{href:"https://www.github.com/openfn/language-http",children:(0,a.jsx)(t.code,{children:"@openfn/language-http"})})]}),"\n",(0,a.jsxs)(t.li,{children:["Adaptor Version: ",(0,a.jsx)(t.a,{href:"https://www.github.com/openfn/language-http",children:(0,a.jsx)(t.code,{children:"latest"})})]}),"\n",(0,a.jsx)(t.li,{children:"Created over 5 years ago"}),"\n",(0,a.jsx)(t.li,{children:"Updated about 5 years ago"}),"\n",(0,a.jsxs)(t.li,{children:["Score: ",(0,a.jsx)("b",{children:"0"})," (an ",(0,a.jsx)(t.a,{href:"/adaptors/library/#library-scores",children:"indicator"})," of how useful this job may be)"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"key-functions",children:"Key Functions"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"alterState"}),", ",(0,a.jsx)(t.code,{children:"post"}),", ",(0,a.jsx)(t.code,{children:"JSON"})]}),"\n",(0,a.jsx)(t.h2,{id:"expression",children:"Expression"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"// @trigger 'odk submission' either via Aggregate JSON Forwarding or via direct\n//          submission to OpenFn.org/inbox\n// @credential 'ihris'\n// @adaptor 'http'\n// -----------------------------------------------------------------------------\n\n// =============================================================================\n// Pluck out parts of the ODK submission and prepare our 'person' object that we\n// will use in multiple requests to iHRIS. =====================================\nconsole.log(JSON.stringify(state.data))\nalterState(state => {\n  state.person = {\n    'form[person][0][0][fields][id]': 'person|0',\n    'form[person][0][0][fields][surname]': state.data.RegistrationForm.last_name,\n    'form[person][0][0][fields][firstname]': state.data.RegistrationForm.first_name,\n    'form[person][0][0][fields][nationality]': `country|${state.data.RegistrationForm.country}`,\n    'form[person][0][0][fields][residence]': 'district|3',\n  };\n  return state;\n});\n\n// =============================================================================\n// Create records via iHRIS api, with the hostUrl, port, and authentication\n// handled by the credential ===================================================\npost(\n  '/manage/person',\n  {\n    formData: state => {\n      state.person.submit_type = 'confirm';\n      return state.person;\n    },\n  },\n  post('/manage/person', {\n    formData: state => {\n      state.person.submit_type = 'save';\n      return state.person;\n    },\n    options: {\n      successCodes: [302],\n    },\n  })\n);\n\n\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);